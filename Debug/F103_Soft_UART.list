
F103_Soft_UART.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000023a4  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000024  080024b0  080024b0  000124b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080024d4  080024d4  0002001c  2**0
                  CONTENTS
  4 .ARM          00000000  080024d4  080024d4  0002001c  2**0
                  CONTENTS
  5 .preinit_array 00000000  080024d4  080024d4  0002001c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080024d4  080024d4  000124d4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080024d8  080024d8  000124d8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000001c  20000000  080024dc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000290  2000001c  080024f8  0002001c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200002ac  080024f8  000202ac  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002001c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020045  2**0
                  CONTENTS, READONLY
 13 .debug_info   00008dff  00000000  00000000  00020088  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000016b1  00000000  00000000  00028e87  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000970  00000000  00000000  0002a538  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000746  00000000  00000000  0002aea8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00016903  00000000  00000000  0002b5ee  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000a2d9  00000000  00000000  00041ef1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000856fa  00000000  00000000  0004c1ca  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000026a0  00000000  00000000  000d18c4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000008b  00000000  00000000  000d3f64  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000001c 	.word	0x2000001c
 8000128:	00000000 	.word	0x00000000
 800012c:	08002498 	.word	0x08002498

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000020 	.word	0x20000020
 8000148:	08002498 	.word	0x08002498

0800014c <TIM3_IRQHandler>:
/**
 * @brief  Interrupt service routine for data reception and transmission
 * @param  None
 * @retval None
 */
void TIM3_IRQHandler() {
 800014c:	b480      	push	{r7}
 800014e:	b083      	sub	sp, #12
 8000150:	af00      	add	r7, sp, #0
	/* Falling edge (start bit) detection */
	if(TIM3_SR->CC2IF) {
 8000152:	4b9c      	ldr	r3, [pc, #624]	; (80003c4 <TIM3_IRQHandler+0x278>)
 8000154:	681b      	ldr	r3, [r3, #0]
 8000156:	681b      	ldr	r3, [r3, #0]
 8000158:	f3c3 0380 	ubfx	r3, r3, #2, #1
 800015c:	b2db      	uxtb	r3, r3
 800015e:	2b00      	cmp	r3, #0
 8000160:	d03b      	beq.n	80001da <TIM3_IRQHandler+0x8e>
		uint32_t cap_cnt = TIM3->CCR2;
 8000162:	4b99      	ldr	r3, [pc, #612]	; (80003c8 <TIM3_IRQHandler+0x27c>)
 8000164:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000166:	607b      	str	r3, [r7, #4]
		if(!is_receiving && !RX_DATA) {	/* start bit */
 8000168:	4b98      	ldr	r3, [pc, #608]	; (80003cc <TIM3_IRQHandler+0x280>)
 800016a:	781b      	ldrb	r3, [r3, #0]
 800016c:	b2db      	uxtb	r3, r3
 800016e:	2b00      	cmp	r3, #0
 8000170:	d133      	bne.n	80001da <TIM3_IRQHandler+0x8e>
 8000172:	4b97      	ldr	r3, [pc, #604]	; (80003d0 <TIM3_IRQHandler+0x284>)
 8000174:	689b      	ldr	r3, [r3, #8]
 8000176:	09db      	lsrs	r3, r3, #7
 8000178:	2b00      	cmp	r3, #0
 800017a:	d12e      	bne.n	80001da <TIM3_IRQHandler+0x8e>
			TIM3->CCR3 = cap_cnt + one_and_half_bit_time;
 800017c:	4b95      	ldr	r3, [pc, #596]	; (80003d4 <TIM3_IRQHandler+0x288>)
 800017e:	681a      	ldr	r2, [r3, #0]
 8000180:	4991      	ldr	r1, [pc, #580]	; (80003c8 <TIM3_IRQHandler+0x27c>)
 8000182:	687b      	ldr	r3, [r7, #4]
 8000184:	4413      	add	r3, r2
 8000186:	63cb      	str	r3, [r1, #60]	; 0x3c
			TIM3_SR->CC3IF = 0;
 8000188:	4b8e      	ldr	r3, [pc, #568]	; (80003c4 <TIM3_IRQHandler+0x278>)
 800018a:	681a      	ldr	r2, [r3, #0]
 800018c:	8813      	ldrh	r3, [r2, #0]
 800018e:	f36f 03c3 	bfc	r3, #3, #1
 8000192:	8013      	strh	r3, [r2, #0]
			is_receiving = 1;
 8000194:	4b8d      	ldr	r3, [pc, #564]	; (80003cc <TIM3_IRQHandler+0x280>)
 8000196:	2201      	movs	r2, #1
 8000198:	701a      	strb	r2, [r3, #0]
			is_rx_buff_available = (available_rx_byte < SS_MAX_RX_BUFF);
 800019a:	4b8f      	ldr	r3, [pc, #572]	; (80003d8 <TIM3_IRQHandler+0x28c>)
 800019c:	781b      	ldrb	r3, [r3, #0]
 800019e:	4b8f      	ldr	r3, [pc, #572]	; (80003dc <TIM3_IRQHandler+0x290>)
 80001a0:	2201      	movs	r2, #1
 80001a2:	701a      	strb	r2, [r3, #0]
			ENABLE_TIM3_CC3_INT();
 80001a4:	4b8e      	ldr	r3, [pc, #568]	; (80003e0 <TIM3_IRQHandler+0x294>)
 80001a6:	681a      	ldr	r2, [r3, #0]
 80001a8:	8813      	ldrh	r3, [r2, #0]
 80001aa:	f043 0308 	orr.w	r3, r3, #8
 80001ae:	8013      	strh	r3, [r2, #0]
			DISABLE_TIM3_INPUT_CAP2();
 80001b0:	4b8c      	ldr	r3, [pc, #560]	; (80003e4 <TIM3_IRQHandler+0x298>)
 80001b2:	681b      	ldr	r3, [r3, #0]
 80001b4:	681b      	ldr	r3, [r3, #0]
 80001b6:	f3c3 1303 	ubfx	r3, r3, #4, #4
 80001ba:	b2db      	uxtb	r3, r3
 80001bc:	4a89      	ldr	r2, [pc, #548]	; (80003e4 <TIM3_IRQHandler+0x298>)
 80001be:	6812      	ldr	r2, [r2, #0]
 80001c0:	f003 030e 	and.w	r3, r3, #14
 80001c4:	b2d9      	uxtb	r1, r3
 80001c6:	8813      	ldrh	r3, [r2, #0]
 80001c8:	f361 1307 	bfi	r3, r1, #4, #4
 80001cc:	8013      	strh	r3, [r2, #0]
			DISABLE_TIM3_CC2_INT();
 80001ce:	4b84      	ldr	r3, [pc, #528]	; (80003e0 <TIM3_IRQHandler+0x294>)
 80001d0:	681a      	ldr	r2, [r3, #0]
 80001d2:	8813      	ldrh	r3, [r2, #0]
 80001d4:	f36f 0382 	bfc	r3, #2, #1
 80001d8:	8013      	strh	r3, [r2, #0]
		}
	}

	/* Reception */
	if(is_receiving && TIM3_SR->CC3IF) {
 80001da:	4b7c      	ldr	r3, [pc, #496]	; (80003cc <TIM3_IRQHandler+0x280>)
 80001dc:	781b      	ldrb	r3, [r3, #0]
 80001de:	b2db      	uxtb	r3, r3
 80001e0:	2b00      	cmp	r3, #0
 80001e2:	f000 8084 	beq.w	80002ee <TIM3_IRQHandler+0x1a2>
 80001e6:	4b77      	ldr	r3, [pc, #476]	; (80003c4 <TIM3_IRQHandler+0x278>)
 80001e8:	681b      	ldr	r3, [r3, #0]
 80001ea:	681b      	ldr	r3, [r3, #0]
 80001ec:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 80001f0:	b2db      	uxtb	r3, r3
 80001f2:	2b00      	cmp	r3, #0
 80001f4:	d07b      	beq.n	80002ee <TIM3_IRQHandler+0x1a2>
		TIM3_SR->CC3IF = 0;
 80001f6:	4b73      	ldr	r3, [pc, #460]	; (80003c4 <TIM3_IRQHandler+0x278>)
 80001f8:	681a      	ldr	r2, [r3, #0]
 80001fa:	8813      	ldrh	r3, [r2, #0]
 80001fc:	f36f 03c3 	bfc	r3, #3, #1
 8000200:	8013      	strh	r3, [r2, #0]
		TIM3->CCR3 += cnt_per_bit;
 8000202:	4b79      	ldr	r3, [pc, #484]	; (80003e8 <TIM3_IRQHandler+0x29c>)
 8000204:	681a      	ldr	r2, [r3, #0]
 8000206:	4b70      	ldr	r3, [pc, #448]	; (80003c8 <TIM3_IRQHandler+0x27c>)
 8000208:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800020a:	496f      	ldr	r1, [pc, #444]	; (80003c8 <TIM3_IRQHandler+0x27c>)
 800020c:	4413      	add	r3, r2
 800020e:	63cb      	str	r3, [r1, #60]	; 0x3c
		if(rx_bit < 8) {
 8000210:	4b76      	ldr	r3, [pc, #472]	; (80003ec <TIM3_IRQHandler+0x2a0>)
 8000212:	781b      	ldrb	r3, [r3, #0]
 8000214:	b2db      	uxtb	r3, r3
 8000216:	2b07      	cmp	r3, #7
 8000218:	d821      	bhi.n	800025e <TIM3_IRQHandler+0x112>
			rx_data |= RX_DATA << rx_bit;
 800021a:	4b6d      	ldr	r3, [pc, #436]	; (80003d0 <TIM3_IRQHandler+0x284>)
 800021c:	689b      	ldr	r3, [r3, #8]
 800021e:	09db      	lsrs	r3, r3, #7
 8000220:	2b00      	cmp	r3, #0
 8000222:	d009      	beq.n	8000238 <TIM3_IRQHandler+0xec>
 8000224:	4b71      	ldr	r3, [pc, #452]	; (80003ec <TIM3_IRQHandler+0x2a0>)
 8000226:	781b      	ldrb	r3, [r3, #0]
 8000228:	b2db      	uxtb	r3, r3
 800022a:	461a      	mov	r2, r3
 800022c:	2301      	movs	r3, #1
 800022e:	4093      	lsls	r3, r2
 8000230:	2b00      	cmp	r3, #0
 8000232:	d001      	beq.n	8000238 <TIM3_IRQHandler+0xec>
 8000234:	2301      	movs	r3, #1
 8000236:	e000      	b.n	800023a <TIM3_IRQHandler+0xee>
 8000238:	2300      	movs	r3, #0
 800023a:	b25a      	sxtb	r2, r3
 800023c:	4b6c      	ldr	r3, [pc, #432]	; (80003f0 <TIM3_IRQHandler+0x2a4>)
 800023e:	781b      	ldrb	r3, [r3, #0]
 8000240:	b2db      	uxtb	r3, r3
 8000242:	b25b      	sxtb	r3, r3
 8000244:	4313      	orrs	r3, r2
 8000246:	b25b      	sxtb	r3, r3
 8000248:	b2da      	uxtb	r2, r3
 800024a:	4b69      	ldr	r3, [pc, #420]	; (80003f0 <TIM3_IRQHandler+0x2a4>)
 800024c:	701a      	strb	r2, [r3, #0]
			rx_bit++;
 800024e:	4b67      	ldr	r3, [pc, #412]	; (80003ec <TIM3_IRQHandler+0x2a0>)
 8000250:	781b      	ldrb	r3, [r3, #0]
 8000252:	b2db      	uxtb	r3, r3
 8000254:	3301      	adds	r3, #1
 8000256:	b2da      	uxtb	r2, r3
 8000258:	4b64      	ldr	r3, [pc, #400]	; (80003ec <TIM3_IRQHandler+0x2a0>)
 800025a:	701a      	strb	r2, [r3, #0]
 800025c:	e047      	b.n	80002ee <TIM3_IRQHandler+0x1a2>
		} else {
			if(RX_DATA) {	/* stop bit */
 800025e:	4b5c      	ldr	r3, [pc, #368]	; (80003d0 <TIM3_IRQHandler+0x284>)
 8000260:	689b      	ldr	r3, [r3, #8]
 8000262:	09db      	lsrs	r3, r3, #7
 8000264:	2b00      	cmp	r3, #0
 8000266:	d01b      	beq.n	80002a0 <TIM3_IRQHandler+0x154>
				if(is_rx_buff_available) {
 8000268:	4b5c      	ldr	r3, [pc, #368]	; (80003dc <TIM3_IRQHandler+0x290>)
 800026a:	781b      	ldrb	r3, [r3, #0]
 800026c:	b2db      	uxtb	r3, r3
 800026e:	2b00      	cmp	r3, #0
 8000270:	d016      	beq.n	80002a0 <TIM3_IRQHandler+0x154>
					rx_buff[rx_byte.pos] = rx_data;
 8000272:	4b60      	ldr	r3, [pc, #384]	; (80003f4 <TIM3_IRQHandler+0x2a8>)
 8000274:	781b      	ldrb	r3, [r3, #0]
 8000276:	b2db      	uxtb	r3, r3
 8000278:	461a      	mov	r2, r3
 800027a:	4b5d      	ldr	r3, [pc, #372]	; (80003f0 <TIM3_IRQHandler+0x2a4>)
 800027c:	781b      	ldrb	r3, [r3, #0]
 800027e:	b2d9      	uxtb	r1, r3
 8000280:	4b5d      	ldr	r3, [pc, #372]	; (80003f8 <TIM3_IRQHandler+0x2ac>)
 8000282:	5499      	strb	r1, [r3, r2]
					available_rx_byte++;
 8000284:	4b54      	ldr	r3, [pc, #336]	; (80003d8 <TIM3_IRQHandler+0x28c>)
 8000286:	781b      	ldrb	r3, [r3, #0]
 8000288:	b2db      	uxtb	r3, r3
 800028a:	3301      	adds	r3, #1
 800028c:	b2da      	uxtb	r2, r3
 800028e:	4b52      	ldr	r3, [pc, #328]	; (80003d8 <TIM3_IRQHandler+0x28c>)
 8000290:	701a      	strb	r2, [r3, #0]
					rx_byte.pos++;
 8000292:	4b58      	ldr	r3, [pc, #352]	; (80003f4 <TIM3_IRQHandler+0x2a8>)
 8000294:	781b      	ldrb	r3, [r3, #0]
 8000296:	b2db      	uxtb	r3, r3
 8000298:	3301      	adds	r3, #1
 800029a:	b2da      	uxtb	r2, r3
 800029c:	4b55      	ldr	r3, [pc, #340]	; (80003f4 <TIM3_IRQHandler+0x2a8>)
 800029e:	701a      	strb	r2, [r3, #0]
				}
			} else {		/* framing error */
				//TODO:	Handle framing error
			}

			rx_data = 0;
 80002a0:	4b53      	ldr	r3, [pc, #332]	; (80003f0 <TIM3_IRQHandler+0x2a4>)
 80002a2:	2200      	movs	r2, #0
 80002a4:	701a      	strb	r2, [r3, #0]
			is_receiving = 0;
 80002a6:	4b49      	ldr	r3, [pc, #292]	; (80003cc <TIM3_IRQHandler+0x280>)
 80002a8:	2200      	movs	r2, #0
 80002aa:	701a      	strb	r2, [r3, #0]
			rx_bit = 0;
 80002ac:	4b4f      	ldr	r3, [pc, #316]	; (80003ec <TIM3_IRQHandler+0x2a0>)
 80002ae:	2200      	movs	r2, #0
 80002b0:	701a      	strb	r2, [r3, #0]
			is_rx_buff_available = 0;
 80002b2:	4b4a      	ldr	r3, [pc, #296]	; (80003dc <TIM3_IRQHandler+0x290>)
 80002b4:	2200      	movs	r2, #0
 80002b6:	701a      	strb	r2, [r3, #0]
			ENABLE_TIM3_INPUT_CAP2();
 80002b8:	4b4a      	ldr	r3, [pc, #296]	; (80003e4 <TIM3_IRQHandler+0x298>)
 80002ba:	681b      	ldr	r3, [r3, #0]
 80002bc:	681b      	ldr	r3, [r3, #0]
 80002be:	f3c3 1303 	ubfx	r3, r3, #4, #4
 80002c2:	b2db      	uxtb	r3, r3
 80002c4:	4a47      	ldr	r2, [pc, #284]	; (80003e4 <TIM3_IRQHandler+0x298>)
 80002c6:	6812      	ldr	r2, [r2, #0]
 80002c8:	f043 0301 	orr.w	r3, r3, #1
 80002cc:	b2d9      	uxtb	r1, r3
 80002ce:	8813      	ldrh	r3, [r2, #0]
 80002d0:	f361 1307 	bfi	r3, r1, #4, #4
 80002d4:	8013      	strh	r3, [r2, #0]
			ENABLE_TIM3_CC2_INT();
 80002d6:	4b42      	ldr	r3, [pc, #264]	; (80003e0 <TIM3_IRQHandler+0x294>)
 80002d8:	681a      	ldr	r2, [r3, #0]
 80002da:	8813      	ldrh	r3, [r2, #0]
 80002dc:	f043 0304 	orr.w	r3, r3, #4
 80002e0:	8013      	strh	r3, [r2, #0]
			DISABLE_TIM3_CC3_INT();
 80002e2:	4b3f      	ldr	r3, [pc, #252]	; (80003e0 <TIM3_IRQHandler+0x294>)
 80002e4:	681a      	ldr	r2, [r3, #0]
 80002e6:	8813      	ldrh	r3, [r2, #0]
 80002e8:	f36f 03c3 	bfc	r3, #3, #1
 80002ec:	8013      	strh	r3, [r2, #0]
		}
	}

	/* Transmission */
	if(pend_tx_byte && TIM3_SR->CC1IF) {
 80002ee:	4b43      	ldr	r3, [pc, #268]	; (80003fc <TIM3_IRQHandler+0x2b0>)
 80002f0:	781b      	ldrb	r3, [r3, #0]
 80002f2:	b2db      	uxtb	r3, r3
 80002f4:	2b00      	cmp	r3, #0
 80002f6:	f000 80e4 	beq.w	80004c2 <TIM3_IRQHandler+0x376>
 80002fa:	4b32      	ldr	r3, [pc, #200]	; (80003c4 <TIM3_IRQHandler+0x278>)
 80002fc:	681b      	ldr	r3, [r3, #0]
 80002fe:	681b      	ldr	r3, [r3, #0]
 8000300:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8000304:	b2db      	uxtb	r3, r3
 8000306:	2b00      	cmp	r3, #0
 8000308:	f000 80db 	beq.w	80004c2 <TIM3_IRQHandler+0x376>
		TIM3_SR->CC1IF = 0;
 800030c:	4b2d      	ldr	r3, [pc, #180]	; (80003c4 <TIM3_IRQHandler+0x278>)
 800030e:	681a      	ldr	r2, [r3, #0]
 8000310:	8813      	ldrh	r3, [r2, #0]
 8000312:	f36f 0341 	bfc	r3, #1, #1
 8000316:	8013      	strh	r3, [r2, #0]
		TIM3->CCR1 += cnt_per_bit;
 8000318:	4b33      	ldr	r3, [pc, #204]	; (80003e8 <TIM3_IRQHandler+0x29c>)
 800031a:	681a      	ldr	r2, [r3, #0]
 800031c:	4b2a      	ldr	r3, [pc, #168]	; (80003c8 <TIM3_IRQHandler+0x27c>)
 800031e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000320:	4929      	ldr	r1, [pc, #164]	; (80003c8 <TIM3_IRQHandler+0x27c>)
 8000322:	4413      	add	r3, r2
 8000324:	634b      	str	r3, [r1, #52]	; 0x34

		if(tx_bit < 9) {
 8000326:	4b36      	ldr	r3, [pc, #216]	; (8000400 <TIM3_IRQHandler+0x2b4>)
 8000328:	781b      	ldrb	r3, [r3, #0]
 800032a:	b2db      	uxtb	r3, r3
 800032c:	2b08      	cmp	r3, #8
 800032e:	d819      	bhi.n	8000364 <TIM3_IRQHandler+0x218>
			CONFIG_TIM3_CC1_OUT_MODE(tx_data[tx_bit++]);
 8000330:	4b33      	ldr	r3, [pc, #204]	; (8000400 <TIM3_IRQHandler+0x2b4>)
 8000332:	781b      	ldrb	r3, [r3, #0]
 8000334:	b2db      	uxtb	r3, r3
 8000336:	1c5a      	adds	r2, r3, #1
 8000338:	b2d1      	uxtb	r1, r2
 800033a:	4a31      	ldr	r2, [pc, #196]	; (8000400 <TIM3_IRQHandler+0x2b4>)
 800033c:	7011      	strb	r1, [r2, #0]
 800033e:	461a      	mov	r2, r3
 8000340:	4b30      	ldr	r3, [pc, #192]	; (8000404 <TIM3_IRQHandler+0x2b8>)
 8000342:	5c9b      	ldrb	r3, [r3, r2]
 8000344:	b2db      	uxtb	r3, r3
 8000346:	461a      	mov	r2, r3
 8000348:	2302      	movs	r3, #2
 800034a:	fa43 f102 	asr.w	r1, r3, r2
 800034e:	4b2e      	ldr	r3, [pc, #184]	; (8000408 <TIM3_IRQHandler+0x2bc>)
 8000350:	681a      	ldr	r2, [r3, #0]
 8000352:	460b      	mov	r3, r1
 8000354:	f003 0307 	and.w	r3, r3, #7
 8000358:	b2d9      	uxtb	r1, r3
 800035a:	6813      	ldr	r3, [r2, #0]
 800035c:	f361 1306 	bfi	r3, r1, #4, #3
 8000360:	6013      	str	r3, [r2, #0]
				tx_data[6] = (curr_tx_byte >> 6) & 0x01;
				tx_data[7] = (curr_tx_byte >> 7) & 0x01;
			}
		}
	}
}
 8000362:	e0ae      	b.n	80004c2 <TIM3_IRQHandler+0x376>
			CONFIG_TIM3_CC1_OUT_MODE(0);			/* start bit */
 8000364:	4b28      	ldr	r3, [pc, #160]	; (8000408 <TIM3_IRQHandler+0x2bc>)
 8000366:	681a      	ldr	r2, [r3, #0]
 8000368:	6813      	ldr	r3, [r2, #0]
 800036a:	2102      	movs	r1, #2
 800036c:	f361 1306 	bfi	r3, r1, #4, #3
 8000370:	6013      	str	r3, [r2, #0]
			tx_bit = 0;
 8000372:	4b23      	ldr	r3, [pc, #140]	; (8000400 <TIM3_IRQHandler+0x2b4>)
 8000374:	2200      	movs	r2, #0
 8000376:	701a      	strb	r2, [r3, #0]
			tx_byte.pos++;
 8000378:	4b24      	ldr	r3, [pc, #144]	; (800040c <TIM3_IRQHandler+0x2c0>)
 800037a:	781b      	ldrb	r3, [r3, #0]
 800037c:	b2db      	uxtb	r3, r3
 800037e:	3301      	adds	r3, #1
 8000380:	b2da      	uxtb	r2, r3
 8000382:	4b22      	ldr	r3, [pc, #136]	; (800040c <TIM3_IRQHandler+0x2c0>)
 8000384:	701a      	strb	r2, [r3, #0]
			pend_tx_byte--;
 8000386:	4b1d      	ldr	r3, [pc, #116]	; (80003fc <TIM3_IRQHandler+0x2b0>)
 8000388:	781b      	ldrb	r3, [r3, #0]
 800038a:	b2db      	uxtb	r3, r3
 800038c:	3b01      	subs	r3, #1
 800038e:	b2da      	uxtb	r2, r3
 8000390:	4b1a      	ldr	r3, [pc, #104]	; (80003fc <TIM3_IRQHandler+0x2b0>)
 8000392:	701a      	strb	r2, [r3, #0]
			if(!pend_tx_byte) {
 8000394:	4b19      	ldr	r3, [pc, #100]	; (80003fc <TIM3_IRQHandler+0x2b0>)
 8000396:	781b      	ldrb	r3, [r3, #0]
 8000398:	b2db      	uxtb	r3, r3
 800039a:	2b00      	cmp	r3, #0
 800039c:	d13a      	bne.n	8000414 <TIM3_IRQHandler+0x2c8>
				DISABLE_TIM3_CC1_INT();
 800039e:	4b10      	ldr	r3, [pc, #64]	; (80003e0 <TIM3_IRQHandler+0x294>)
 80003a0:	681a      	ldr	r2, [r3, #0]
 80003a2:	8813      	ldrh	r3, [r2, #0]
 80003a4:	f36f 0341 	bfc	r3, #1, #1
 80003a8:	8013      	strh	r3, [r2, #0]
				DISABLE_TIM3_OUTPUT_COMP1();
 80003aa:	4b0e      	ldr	r3, [pc, #56]	; (80003e4 <TIM3_IRQHandler+0x298>)
 80003ac:	681a      	ldr	r2, [r3, #0]
 80003ae:	8813      	ldrh	r3, [r2, #0]
 80003b0:	f36f 0303 	bfc	r3, #0, #4
 80003b4:	8013      	strh	r3, [r2, #0]
				tx_byte.pos = 0;
 80003b6:	4b15      	ldr	r3, [pc, #84]	; (800040c <TIM3_IRQHandler+0x2c0>)
 80003b8:	2200      	movs	r2, #0
 80003ba:	701a      	strb	r2, [r3, #0]
				tx_buff_byte.pos = 0;
 80003bc:	4b14      	ldr	r3, [pc, #80]	; (8000410 <TIM3_IRQHandler+0x2c4>)
 80003be:	2200      	movs	r2, #0
 80003c0:	701a      	strb	r2, [r3, #0]
}
 80003c2:	e07e      	b.n	80004c2 <TIM3_IRQHandler+0x376>
 80003c4:	20000000 	.word	0x20000000
 80003c8:	40000400 	.word	0x40000400
 80003cc:	20000240 	.word	0x20000240
 80003d0:	40010800 	.word	0x40010800
 80003d4:	20000250 	.word	0x20000250
 80003d8:	2000023d 	.word	0x2000023d
 80003dc:	20000241 	.word	0x20000241
 80003e0:	20000004 	.word	0x20000004
 80003e4:	2000000c 	.word	0x2000000c
 80003e8:	20000038 	.word	0x20000038
 80003ec:	2000023f 	.word	0x2000023f
 80003f0:	20000242 	.word	0x20000242
 80003f4:	2000025c 	.word	0x2000025c
 80003f8:	2000013c 	.word	0x2000013c
 80003fc:	2000023c 	.word	0x2000023c
 8000400:	2000023e 	.word	0x2000023e
 8000404:	20000244 	.word	0x20000244
 8000408:	20000008 	.word	0x20000008
 800040c:	20000258 	.word	0x20000258
 8000410:	20000254 	.word	0x20000254
				curr_tx_byte = tx_buff[tx_byte.pos];
 8000414:	4b2d      	ldr	r3, [pc, #180]	; (80004cc <TIM3_IRQHandler+0x380>)
 8000416:	781b      	ldrb	r3, [r3, #0]
 8000418:	b2db      	uxtb	r3, r3
 800041a:	461a      	mov	r2, r3
 800041c:	4b2c      	ldr	r3, [pc, #176]	; (80004d0 <TIM3_IRQHandler+0x384>)
 800041e:	5c9b      	ldrb	r3, [r3, r2]
 8000420:	b2da      	uxtb	r2, r3
 8000422:	4b2c      	ldr	r3, [pc, #176]	; (80004d4 <TIM3_IRQHandler+0x388>)
 8000424:	701a      	strb	r2, [r3, #0]
				tx_data[0] = (curr_tx_byte >> 0) & 0x01;
 8000426:	4b2b      	ldr	r3, [pc, #172]	; (80004d4 <TIM3_IRQHandler+0x388>)
 8000428:	781b      	ldrb	r3, [r3, #0]
 800042a:	b2db      	uxtb	r3, r3
 800042c:	f003 0301 	and.w	r3, r3, #1
 8000430:	b2da      	uxtb	r2, r3
 8000432:	4b29      	ldr	r3, [pc, #164]	; (80004d8 <TIM3_IRQHandler+0x38c>)
 8000434:	701a      	strb	r2, [r3, #0]
				tx_data[1] = (curr_tx_byte >> 1) & 0x01;
 8000436:	4b27      	ldr	r3, [pc, #156]	; (80004d4 <TIM3_IRQHandler+0x388>)
 8000438:	781b      	ldrb	r3, [r3, #0]
 800043a:	b2db      	uxtb	r3, r3
 800043c:	085b      	lsrs	r3, r3, #1
 800043e:	b2db      	uxtb	r3, r3
 8000440:	f003 0301 	and.w	r3, r3, #1
 8000444:	b2da      	uxtb	r2, r3
 8000446:	4b24      	ldr	r3, [pc, #144]	; (80004d8 <TIM3_IRQHandler+0x38c>)
 8000448:	705a      	strb	r2, [r3, #1]
				tx_data[2] = (curr_tx_byte >> 2) & 0x01;
 800044a:	4b22      	ldr	r3, [pc, #136]	; (80004d4 <TIM3_IRQHandler+0x388>)
 800044c:	781b      	ldrb	r3, [r3, #0]
 800044e:	b2db      	uxtb	r3, r3
 8000450:	089b      	lsrs	r3, r3, #2
 8000452:	b2db      	uxtb	r3, r3
 8000454:	f003 0301 	and.w	r3, r3, #1
 8000458:	b2da      	uxtb	r2, r3
 800045a:	4b1f      	ldr	r3, [pc, #124]	; (80004d8 <TIM3_IRQHandler+0x38c>)
 800045c:	709a      	strb	r2, [r3, #2]
				tx_data[3] = (curr_tx_byte >> 3) & 0x01;
 800045e:	4b1d      	ldr	r3, [pc, #116]	; (80004d4 <TIM3_IRQHandler+0x388>)
 8000460:	781b      	ldrb	r3, [r3, #0]
 8000462:	b2db      	uxtb	r3, r3
 8000464:	08db      	lsrs	r3, r3, #3
 8000466:	b2db      	uxtb	r3, r3
 8000468:	f003 0301 	and.w	r3, r3, #1
 800046c:	b2da      	uxtb	r2, r3
 800046e:	4b1a      	ldr	r3, [pc, #104]	; (80004d8 <TIM3_IRQHandler+0x38c>)
 8000470:	70da      	strb	r2, [r3, #3]
				tx_data[4] = (curr_tx_byte >> 4) & 0x01;
 8000472:	4b18      	ldr	r3, [pc, #96]	; (80004d4 <TIM3_IRQHandler+0x388>)
 8000474:	781b      	ldrb	r3, [r3, #0]
 8000476:	b2db      	uxtb	r3, r3
 8000478:	091b      	lsrs	r3, r3, #4
 800047a:	b2db      	uxtb	r3, r3
 800047c:	f003 0301 	and.w	r3, r3, #1
 8000480:	b2da      	uxtb	r2, r3
 8000482:	4b15      	ldr	r3, [pc, #84]	; (80004d8 <TIM3_IRQHandler+0x38c>)
 8000484:	711a      	strb	r2, [r3, #4]
				tx_data[5] = (curr_tx_byte >> 5) & 0x01;
 8000486:	4b13      	ldr	r3, [pc, #76]	; (80004d4 <TIM3_IRQHandler+0x388>)
 8000488:	781b      	ldrb	r3, [r3, #0]
 800048a:	b2db      	uxtb	r3, r3
 800048c:	095b      	lsrs	r3, r3, #5
 800048e:	b2db      	uxtb	r3, r3
 8000490:	f003 0301 	and.w	r3, r3, #1
 8000494:	b2da      	uxtb	r2, r3
 8000496:	4b10      	ldr	r3, [pc, #64]	; (80004d8 <TIM3_IRQHandler+0x38c>)
 8000498:	715a      	strb	r2, [r3, #5]
				tx_data[6] = (curr_tx_byte >> 6) & 0x01;
 800049a:	4b0e      	ldr	r3, [pc, #56]	; (80004d4 <TIM3_IRQHandler+0x388>)
 800049c:	781b      	ldrb	r3, [r3, #0]
 800049e:	b2db      	uxtb	r3, r3
 80004a0:	099b      	lsrs	r3, r3, #6
 80004a2:	b2db      	uxtb	r3, r3
 80004a4:	f003 0301 	and.w	r3, r3, #1
 80004a8:	b2da      	uxtb	r2, r3
 80004aa:	4b0b      	ldr	r3, [pc, #44]	; (80004d8 <TIM3_IRQHandler+0x38c>)
 80004ac:	719a      	strb	r2, [r3, #6]
				tx_data[7] = (curr_tx_byte >> 7) & 0x01;
 80004ae:	4b09      	ldr	r3, [pc, #36]	; (80004d4 <TIM3_IRQHandler+0x388>)
 80004b0:	781b      	ldrb	r3, [r3, #0]
 80004b2:	b2db      	uxtb	r3, r3
 80004b4:	09db      	lsrs	r3, r3, #7
 80004b6:	b2db      	uxtb	r3, r3
 80004b8:	f003 0301 	and.w	r3, r3, #1
 80004bc:	b2da      	uxtb	r2, r3
 80004be:	4b06      	ldr	r3, [pc, #24]	; (80004d8 <TIM3_IRQHandler+0x38c>)
 80004c0:	71da      	strb	r2, [r3, #7]
}
 80004c2:	bf00      	nop
 80004c4:	370c      	adds	r7, #12
 80004c6:	46bd      	mov	sp, r7
 80004c8:	bc80      	pop	{r7}
 80004ca:	4770      	bx	lr
 80004cc:	20000258 	.word	0x20000258
 80004d0:	2000003c 	.word	0x2000003c
 80004d4:	2000024d 	.word	0x2000024d
 80004d8:	20000244 	.word	0x20000244

080004dc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004dc:	b580      	push	{r7, lr}
 80004de:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004e0:	f000 fa2e 	bl	8000940 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004e4:	f000 f805 	bl	80004f2 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004e8:	f000 f8ee 	bl	80006c8 <MX_GPIO_Init>
  MX_TIM3_Init();
 80004ec:	f000 f844 	bl	8000578 <MX_TIM3_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80004f0:	e7fe      	b.n	80004f0 <main+0x14>

080004f2 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80004f2:	b580      	push	{r7, lr}
 80004f4:	b090      	sub	sp, #64	; 0x40
 80004f6:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80004f8:	f107 0318 	add.w	r3, r7, #24
 80004fc:	2228      	movs	r2, #40	; 0x28
 80004fe:	2100      	movs	r1, #0
 8000500:	4618      	mov	r0, r3
 8000502:	f001 ff9d 	bl	8002440 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000506:	1d3b      	adds	r3, r7, #4
 8000508:	2200      	movs	r2, #0
 800050a:	601a      	str	r2, [r3, #0]
 800050c:	605a      	str	r2, [r3, #4]
 800050e:	609a      	str	r2, [r3, #8]
 8000510:	60da      	str	r2, [r3, #12]
 8000512:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000514:	2301      	movs	r3, #1
 8000516:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000518:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800051c:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 800051e:	2300      	movs	r3, #0
 8000520:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000522:	2301      	movs	r3, #1
 8000524:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000526:	2302      	movs	r3, #2
 8000528:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800052a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800052e:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL2;
 8000530:	2300      	movs	r3, #0
 8000532:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000534:	f107 0318 	add.w	r3, r7, #24
 8000538:	4618      	mov	r0, r3
 800053a:	f000 fcf5 	bl	8000f28 <HAL_RCC_OscConfig>
 800053e:	4603      	mov	r3, r0
 8000540:	2b00      	cmp	r3, #0
 8000542:	d001      	beq.n	8000548 <SystemClock_Config+0x56>
  {
    Error_Handler();
 8000544:	f000 f8ee 	bl	8000724 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000548:	230f      	movs	r3, #15
 800054a:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800054c:	2302      	movs	r3, #2
 800054e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000550:	2300      	movs	r3, #0
 8000552:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000554:	2300      	movs	r3, #0
 8000556:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000558:	2300      	movs	r3, #0
 800055a:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 800055c:	1d3b      	adds	r3, r7, #4
 800055e:	2101      	movs	r1, #1
 8000560:	4618      	mov	r0, r3
 8000562:	f000 ff63 	bl	800142c <HAL_RCC_ClockConfig>
 8000566:	4603      	mov	r3, r0
 8000568:	2b00      	cmp	r3, #0
 800056a:	d001      	beq.n	8000570 <SystemClock_Config+0x7e>
  {
    Error_Handler();
 800056c:	f000 f8da 	bl	8000724 <Error_Handler>
  }
}
 8000570:	bf00      	nop
 8000572:	3740      	adds	r7, #64	; 0x40
 8000574:	46bd      	mov	sp, r7
 8000576:	bd80      	pop	{r7, pc}

08000578 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000578:	b580      	push	{r7, lr}
 800057a:	b092      	sub	sp, #72	; 0x48
 800057c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800057e:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000582:	2200      	movs	r2, #0
 8000584:	601a      	str	r2, [r3, #0]
 8000586:	605a      	str	r2, [r3, #4]
 8000588:	609a      	str	r2, [r3, #8]
 800058a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800058c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000590:	2200      	movs	r2, #0
 8000592:	601a      	str	r2, [r3, #0]
 8000594:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000596:	f107 0314 	add.w	r3, r7, #20
 800059a:	2200      	movs	r2, #0
 800059c:	601a      	str	r2, [r3, #0]
 800059e:	605a      	str	r2, [r3, #4]
 80005a0:	609a      	str	r2, [r3, #8]
 80005a2:	60da      	str	r2, [r3, #12]
 80005a4:	611a      	str	r2, [r3, #16]
 80005a6:	615a      	str	r2, [r3, #20]
 80005a8:	619a      	str	r2, [r3, #24]
  TIM_IC_InitTypeDef sConfigIC = {0};
 80005aa:	1d3b      	adds	r3, r7, #4
 80005ac:	2200      	movs	r2, #0
 80005ae:	601a      	str	r2, [r3, #0]
 80005b0:	605a      	str	r2, [r3, #4]
 80005b2:	609a      	str	r2, [r3, #8]
 80005b4:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80005b6:	4b42      	ldr	r3, [pc, #264]	; (80006c0 <MX_TIM3_Init+0x148>)
 80005b8:	4a42      	ldr	r2, [pc, #264]	; (80006c4 <MX_TIM3_Init+0x14c>)
 80005ba:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 32-1;
 80005bc:	4b40      	ldr	r3, [pc, #256]	; (80006c0 <MX_TIM3_Init+0x148>)
 80005be:	221f      	movs	r2, #31
 80005c0:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80005c2:	4b3f      	ldr	r3, [pc, #252]	; (80006c0 <MX_TIM3_Init+0x148>)
 80005c4:	2200      	movs	r2, #0
 80005c6:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 80005c8:	4b3d      	ldr	r3, [pc, #244]	; (80006c0 <MX_TIM3_Init+0x148>)
 80005ca:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80005ce:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80005d0:	4b3b      	ldr	r3, [pc, #236]	; (80006c0 <MX_TIM3_Init+0x148>)
 80005d2:	2200      	movs	r2, #0
 80005d4:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80005d6:	4b3a      	ldr	r3, [pc, #232]	; (80006c0 <MX_TIM3_Init+0x148>)
 80005d8:	2200      	movs	r2, #0
 80005da:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80005dc:	4838      	ldr	r0, [pc, #224]	; (80006c0 <MX_TIM3_Init+0x148>)
 80005de:	f001 f883 	bl	80016e8 <HAL_TIM_Base_Init>
 80005e2:	4603      	mov	r3, r0
 80005e4:	2b00      	cmp	r3, #0
 80005e6:	d001      	beq.n	80005ec <MX_TIM3_Init+0x74>
  {
    Error_Handler();
 80005e8:	f000 f89c 	bl	8000724 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80005ec:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80005f0:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80005f2:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80005f6:	4619      	mov	r1, r3
 80005f8:	4831      	ldr	r0, [pc, #196]	; (80006c0 <MX_TIM3_Init+0x148>)
 80005fa:	f001 fa6d 	bl	8001ad8 <HAL_TIM_ConfigClockSource>
 80005fe:	4603      	mov	r3, r0
 8000600:	2b00      	cmp	r3, #0
 8000602:	d001      	beq.n	8000608 <MX_TIM3_Init+0x90>
  {
    Error_Handler();
 8000604:	f000 f88e 	bl	8000724 <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim3) != HAL_OK)
 8000608:	482d      	ldr	r0, [pc, #180]	; (80006c0 <MX_TIM3_Init+0x148>)
 800060a:	f001 f8bc 	bl	8001786 <HAL_TIM_OC_Init>
 800060e:	4603      	mov	r3, r0
 8000610:	2b00      	cmp	r3, #0
 8000612:	d001      	beq.n	8000618 <MX_TIM3_Init+0xa0>
  {
    Error_Handler();
 8000614:	f000 f886 	bl	8000724 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim3) != HAL_OK)
 8000618:	4829      	ldr	r0, [pc, #164]	; (80006c0 <MX_TIM3_Init+0x148>)
 800061a:	f001 f90c 	bl	8001836 <HAL_TIM_IC_Init>
 800061e:	4603      	mov	r3, r0
 8000620:	2b00      	cmp	r3, #0
 8000622:	d001      	beq.n	8000628 <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 8000624:	f000 f87e 	bl	8000724 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000628:	2300      	movs	r3, #0
 800062a:	633b      	str	r3, [r7, #48]	; 0x30
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800062c:	2300      	movs	r3, #0
 800062e:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000630:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000634:	4619      	mov	r1, r3
 8000636:	4822      	ldr	r0, [pc, #136]	; (80006c0 <MX_TIM3_Init+0x148>)
 8000638:	f001 fea4 	bl	8002384 <HAL_TIMEx_MasterConfigSynchronization>
 800063c:	4603      	mov	r3, r0
 800063e:	2b00      	cmp	r3, #0
 8000640:	d001      	beq.n	8000646 <MX_TIM3_Init+0xce>
  {
    Error_Handler();
 8000642:	f000 f86f 	bl	8000724 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_FORCED_ACTIVE;
 8000646:	2350      	movs	r3, #80	; 0x50
 8000648:	617b      	str	r3, [r7, #20]
  sConfigOC.Pulse = 0;
 800064a:	2300      	movs	r3, #0
 800064c:	61bb      	str	r3, [r7, #24]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800064e:	2300      	movs	r3, #0
 8000650:	61fb      	str	r3, [r7, #28]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000652:	2300      	movs	r3, #0
 8000654:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIM_OC_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000656:	f107 0314 	add.w	r3, r7, #20
 800065a:	2200      	movs	r2, #0
 800065c:	4619      	mov	r1, r3
 800065e:	4818      	ldr	r0, [pc, #96]	; (80006c0 <MX_TIM3_Init+0x148>)
 8000660:	f001 f942 	bl	80018e8 <HAL_TIM_OC_ConfigChannel>
 8000664:	4603      	mov	r3, r0
 8000666:	2b00      	cmp	r3, #0
 8000668:	d001      	beq.n	800066e <MX_TIM3_Init+0xf6>
  {
    Error_Handler();
 800066a:	f000 f85b 	bl	8000724 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_FALLING;
 800066e:	2302      	movs	r3, #2
 8000670:	607b      	str	r3, [r7, #4]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8000672:	2301      	movs	r3, #1
 8000674:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8000676:	2300      	movs	r3, #0
 8000678:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICFilter = 0;
 800067a:	2300      	movs	r3, #0
 800067c:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim3, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 800067e:	1d3b      	adds	r3, r7, #4
 8000680:	2204      	movs	r2, #4
 8000682:	4619      	mov	r1, r3
 8000684:	480e      	ldr	r0, [pc, #56]	; (80006c0 <MX_TIM3_Init+0x148>)
 8000686:	f001 f98b 	bl	80019a0 <HAL_TIM_IC_ConfigChannel>
 800068a:	4603      	mov	r3, r0
 800068c:	2b00      	cmp	r3, #0
 800068e:	d001      	beq.n	8000694 <MX_TIM3_Init+0x11c>
  {
    Error_Handler();
 8000690:	f000 f848 	bl	8000724 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 8000694:	2300      	movs	r3, #0
 8000696:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_OC_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000698:	f107 0314 	add.w	r3, r7, #20
 800069c:	2208      	movs	r2, #8
 800069e:	4619      	mov	r1, r3
 80006a0:	4807      	ldr	r0, [pc, #28]	; (80006c0 <MX_TIM3_Init+0x148>)
 80006a2:	f001 f921 	bl	80018e8 <HAL_TIM_OC_ConfigChannel>
 80006a6:	4603      	mov	r3, r0
 80006a8:	2b00      	cmp	r3, #0
 80006aa:	d001      	beq.n	80006b0 <MX_TIM3_Init+0x138>
  {
    Error_Handler();
 80006ac:	f000 f83a 	bl	8000724 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 80006b0:	4803      	ldr	r0, [pc, #12]	; (80006c0 <MX_TIM3_Init+0x148>)
 80006b2:	f000 f8a5 	bl	8000800 <HAL_TIM_MspPostInit>

}
 80006b6:	bf00      	nop
 80006b8:	3748      	adds	r7, #72	; 0x48
 80006ba:	46bd      	mov	sp, r7
 80006bc:	bd80      	pop	{r7, pc}
 80006be:	bf00      	nop
 80006c0:	20000260 	.word	0x20000260
 80006c4:	40000400 	.word	0x40000400

080006c8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80006c8:	b480      	push	{r7}
 80006ca:	b085      	sub	sp, #20
 80006cc:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80006ce:	4b14      	ldr	r3, [pc, #80]	; (8000720 <MX_GPIO_Init+0x58>)
 80006d0:	699b      	ldr	r3, [r3, #24]
 80006d2:	4a13      	ldr	r2, [pc, #76]	; (8000720 <MX_GPIO_Init+0x58>)
 80006d4:	f043 0320 	orr.w	r3, r3, #32
 80006d8:	6193      	str	r3, [r2, #24]
 80006da:	4b11      	ldr	r3, [pc, #68]	; (8000720 <MX_GPIO_Init+0x58>)
 80006dc:	699b      	ldr	r3, [r3, #24]
 80006de:	f003 0320 	and.w	r3, r3, #32
 80006e2:	60fb      	str	r3, [r7, #12]
 80006e4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80006e6:	4b0e      	ldr	r3, [pc, #56]	; (8000720 <MX_GPIO_Init+0x58>)
 80006e8:	699b      	ldr	r3, [r3, #24]
 80006ea:	4a0d      	ldr	r2, [pc, #52]	; (8000720 <MX_GPIO_Init+0x58>)
 80006ec:	f043 0304 	orr.w	r3, r3, #4
 80006f0:	6193      	str	r3, [r2, #24]
 80006f2:	4b0b      	ldr	r3, [pc, #44]	; (8000720 <MX_GPIO_Init+0x58>)
 80006f4:	699b      	ldr	r3, [r3, #24]
 80006f6:	f003 0304 	and.w	r3, r3, #4
 80006fa:	60bb      	str	r3, [r7, #8]
 80006fc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80006fe:	4b08      	ldr	r3, [pc, #32]	; (8000720 <MX_GPIO_Init+0x58>)
 8000700:	699b      	ldr	r3, [r3, #24]
 8000702:	4a07      	ldr	r2, [pc, #28]	; (8000720 <MX_GPIO_Init+0x58>)
 8000704:	f043 0308 	orr.w	r3, r3, #8
 8000708:	6193      	str	r3, [r2, #24]
 800070a:	4b05      	ldr	r3, [pc, #20]	; (8000720 <MX_GPIO_Init+0x58>)
 800070c:	699b      	ldr	r3, [r3, #24]
 800070e:	f003 0308 	and.w	r3, r3, #8
 8000712:	607b      	str	r3, [r7, #4]
 8000714:	687b      	ldr	r3, [r7, #4]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000716:	bf00      	nop
 8000718:	3714      	adds	r7, #20
 800071a:	46bd      	mov	sp, r7
 800071c:	bc80      	pop	{r7}
 800071e:	4770      	bx	lr
 8000720:	40021000 	.word	0x40021000

08000724 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000724:	b480      	push	{r7}
 8000726:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000728:	b672      	cpsid	i
}
 800072a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800072c:	e7fe      	b.n	800072c <Error_Handler+0x8>
	...

08000730 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000730:	b480      	push	{r7}
 8000732:	b083      	sub	sp, #12
 8000734:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000736:	4b0e      	ldr	r3, [pc, #56]	; (8000770 <HAL_MspInit+0x40>)
 8000738:	699b      	ldr	r3, [r3, #24]
 800073a:	4a0d      	ldr	r2, [pc, #52]	; (8000770 <HAL_MspInit+0x40>)
 800073c:	f043 0301 	orr.w	r3, r3, #1
 8000740:	6193      	str	r3, [r2, #24]
 8000742:	4b0b      	ldr	r3, [pc, #44]	; (8000770 <HAL_MspInit+0x40>)
 8000744:	699b      	ldr	r3, [r3, #24]
 8000746:	f003 0301 	and.w	r3, r3, #1
 800074a:	607b      	str	r3, [r7, #4]
 800074c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800074e:	4b08      	ldr	r3, [pc, #32]	; (8000770 <HAL_MspInit+0x40>)
 8000750:	69db      	ldr	r3, [r3, #28]
 8000752:	4a07      	ldr	r2, [pc, #28]	; (8000770 <HAL_MspInit+0x40>)
 8000754:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000758:	61d3      	str	r3, [r2, #28]
 800075a:	4b05      	ldr	r3, [pc, #20]	; (8000770 <HAL_MspInit+0x40>)
 800075c:	69db      	ldr	r3, [r3, #28]
 800075e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000762:	603b      	str	r3, [r7, #0]
 8000764:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000766:	bf00      	nop
 8000768:	370c      	adds	r7, #12
 800076a:	46bd      	mov	sp, r7
 800076c:	bc80      	pop	{r7}
 800076e:	4770      	bx	lr
 8000770:	40021000 	.word	0x40021000

08000774 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000774:	b580      	push	{r7, lr}
 8000776:	b088      	sub	sp, #32
 8000778:	af00      	add	r7, sp, #0
 800077a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800077c:	f107 0310 	add.w	r3, r7, #16
 8000780:	2200      	movs	r2, #0
 8000782:	601a      	str	r2, [r3, #0]
 8000784:	605a      	str	r2, [r3, #4]
 8000786:	609a      	str	r2, [r3, #8]
 8000788:	60da      	str	r2, [r3, #12]
  if(htim_base->Instance==TIM3)
 800078a:	687b      	ldr	r3, [r7, #4]
 800078c:	681b      	ldr	r3, [r3, #0]
 800078e:	4a19      	ldr	r2, [pc, #100]	; (80007f4 <HAL_TIM_Base_MspInit+0x80>)
 8000790:	4293      	cmp	r3, r2
 8000792:	d12b      	bne.n	80007ec <HAL_TIM_Base_MspInit+0x78>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000794:	4b18      	ldr	r3, [pc, #96]	; (80007f8 <HAL_TIM_Base_MspInit+0x84>)
 8000796:	69db      	ldr	r3, [r3, #28]
 8000798:	4a17      	ldr	r2, [pc, #92]	; (80007f8 <HAL_TIM_Base_MspInit+0x84>)
 800079a:	f043 0302 	orr.w	r3, r3, #2
 800079e:	61d3      	str	r3, [r2, #28]
 80007a0:	4b15      	ldr	r3, [pc, #84]	; (80007f8 <HAL_TIM_Base_MspInit+0x84>)
 80007a2:	69db      	ldr	r3, [r3, #28]
 80007a4:	f003 0302 	and.w	r3, r3, #2
 80007a8:	60fb      	str	r3, [r7, #12]
 80007aa:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80007ac:	4b12      	ldr	r3, [pc, #72]	; (80007f8 <HAL_TIM_Base_MspInit+0x84>)
 80007ae:	699b      	ldr	r3, [r3, #24]
 80007b0:	4a11      	ldr	r2, [pc, #68]	; (80007f8 <HAL_TIM_Base_MspInit+0x84>)
 80007b2:	f043 0304 	orr.w	r3, r3, #4
 80007b6:	6193      	str	r3, [r2, #24]
 80007b8:	4b0f      	ldr	r3, [pc, #60]	; (80007f8 <HAL_TIM_Base_MspInit+0x84>)
 80007ba:	699b      	ldr	r3, [r3, #24]
 80007bc:	f003 0304 	and.w	r3, r3, #4
 80007c0:	60bb      	str	r3, [r7, #8]
 80007c2:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PA7     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 80007c4:	2380      	movs	r3, #128	; 0x80
 80007c6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80007c8:	2300      	movs	r3, #0
 80007ca:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80007cc:	2301      	movs	r3, #1
 80007ce:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80007d0:	f107 0310 	add.w	r3, r7, #16
 80007d4:	4619      	mov	r1, r3
 80007d6:	4809      	ldr	r0, [pc, #36]	; (80007fc <HAL_TIM_Base_MspInit+0x88>)
 80007d8:	f000 fa22 	bl	8000c20 <HAL_GPIO_Init>

    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 80007dc:	2200      	movs	r2, #0
 80007de:	2100      	movs	r1, #0
 80007e0:	201d      	movs	r0, #29
 80007e2:	f000 f9e6 	bl	8000bb2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 80007e6:	201d      	movs	r0, #29
 80007e8:	f000 f9ff 	bl	8000bea <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 80007ec:	bf00      	nop
 80007ee:	3720      	adds	r7, #32
 80007f0:	46bd      	mov	sp, r7
 80007f2:	bd80      	pop	{r7, pc}
 80007f4:	40000400 	.word	0x40000400
 80007f8:	40021000 	.word	0x40021000
 80007fc:	40010800 	.word	0x40010800

08000800 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000800:	b580      	push	{r7, lr}
 8000802:	b088      	sub	sp, #32
 8000804:	af00      	add	r7, sp, #0
 8000806:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000808:	f107 0310 	add.w	r3, r7, #16
 800080c:	2200      	movs	r2, #0
 800080e:	601a      	str	r2, [r3, #0]
 8000810:	605a      	str	r2, [r3, #4]
 8000812:	609a      	str	r2, [r3, #8]
 8000814:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM3)
 8000816:	687b      	ldr	r3, [r7, #4]
 8000818:	681b      	ldr	r3, [r3, #0]
 800081a:	4a1b      	ldr	r2, [pc, #108]	; (8000888 <HAL_TIM_MspPostInit+0x88>)
 800081c:	4293      	cmp	r3, r2
 800081e:	d12f      	bne.n	8000880 <HAL_TIM_MspPostInit+0x80>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000820:	4b1a      	ldr	r3, [pc, #104]	; (800088c <HAL_TIM_MspPostInit+0x8c>)
 8000822:	699b      	ldr	r3, [r3, #24]
 8000824:	4a19      	ldr	r2, [pc, #100]	; (800088c <HAL_TIM_MspPostInit+0x8c>)
 8000826:	f043 0304 	orr.w	r3, r3, #4
 800082a:	6193      	str	r3, [r2, #24]
 800082c:	4b17      	ldr	r3, [pc, #92]	; (800088c <HAL_TIM_MspPostInit+0x8c>)
 800082e:	699b      	ldr	r3, [r3, #24]
 8000830:	f003 0304 	and.w	r3, r3, #4
 8000834:	60fb      	str	r3, [r7, #12]
 8000836:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000838:	4b14      	ldr	r3, [pc, #80]	; (800088c <HAL_TIM_MspPostInit+0x8c>)
 800083a:	699b      	ldr	r3, [r3, #24]
 800083c:	4a13      	ldr	r2, [pc, #76]	; (800088c <HAL_TIM_MspPostInit+0x8c>)
 800083e:	f043 0308 	orr.w	r3, r3, #8
 8000842:	6193      	str	r3, [r2, #24]
 8000844:	4b11      	ldr	r3, [pc, #68]	; (800088c <HAL_TIM_MspPostInit+0x8c>)
 8000846:	699b      	ldr	r3, [r3, #24]
 8000848:	f003 0308 	and.w	r3, r3, #8
 800084c:	60bb      	str	r3, [r7, #8]
 800084e:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    PB0     ------> TIM3_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8000850:	2340      	movs	r3, #64	; 0x40
 8000852:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000854:	2302      	movs	r3, #2
 8000856:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000858:	2303      	movs	r3, #3
 800085a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800085c:	f107 0310 	add.w	r3, r7, #16
 8000860:	4619      	mov	r1, r3
 8000862:	480b      	ldr	r0, [pc, #44]	; (8000890 <HAL_TIM_MspPostInit+0x90>)
 8000864:	f000 f9dc 	bl	8000c20 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000868:	2301      	movs	r3, #1
 800086a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800086c:	2302      	movs	r3, #2
 800086e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000870:	2302      	movs	r3, #2
 8000872:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000874:	f107 0310 	add.w	r3, r7, #16
 8000878:	4619      	mov	r1, r3
 800087a:	4806      	ldr	r0, [pc, #24]	; (8000894 <HAL_TIM_MspPostInit+0x94>)
 800087c:	f000 f9d0 	bl	8000c20 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8000880:	bf00      	nop
 8000882:	3720      	adds	r7, #32
 8000884:	46bd      	mov	sp, r7
 8000886:	bd80      	pop	{r7, pc}
 8000888:	40000400 	.word	0x40000400
 800088c:	40021000 	.word	0x40021000
 8000890:	40010800 	.word	0x40010800
 8000894:	40010c00 	.word	0x40010c00

08000898 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000898:	b480      	push	{r7}
 800089a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800089c:	e7fe      	b.n	800089c <NMI_Handler+0x4>

0800089e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800089e:	b480      	push	{r7}
 80008a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80008a2:	e7fe      	b.n	80008a2 <HardFault_Handler+0x4>

080008a4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80008a4:	b480      	push	{r7}
 80008a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80008a8:	e7fe      	b.n	80008a8 <MemManage_Handler+0x4>

080008aa <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80008aa:	b480      	push	{r7}
 80008ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80008ae:	e7fe      	b.n	80008ae <BusFault_Handler+0x4>

080008b0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80008b0:	b480      	push	{r7}
 80008b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80008b4:	e7fe      	b.n	80008b4 <UsageFault_Handler+0x4>

080008b6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80008b6:	b480      	push	{r7}
 80008b8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80008ba:	bf00      	nop
 80008bc:	46bd      	mov	sp, r7
 80008be:	bc80      	pop	{r7}
 80008c0:	4770      	bx	lr

080008c2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80008c2:	b480      	push	{r7}
 80008c4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80008c6:	bf00      	nop
 80008c8:	46bd      	mov	sp, r7
 80008ca:	bc80      	pop	{r7}
 80008cc:	4770      	bx	lr

080008ce <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80008ce:	b480      	push	{r7}
 80008d0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80008d2:	bf00      	nop
 80008d4:	46bd      	mov	sp, r7
 80008d6:	bc80      	pop	{r7}
 80008d8:	4770      	bx	lr

080008da <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80008da:	b580      	push	{r7, lr}
 80008dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80008de:	f000 f875 	bl	80009cc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80008e2:	bf00      	nop
 80008e4:	bd80      	pop	{r7, pc}

080008e6 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80008e6:	b480      	push	{r7}
 80008e8:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80008ea:	bf00      	nop
 80008ec:	46bd      	mov	sp, r7
 80008ee:	bc80      	pop	{r7}
 80008f0:	4770      	bx	lr
	...

080008f4 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 80008f4:	f7ff fff7 	bl	80008e6 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80008f8:	480b      	ldr	r0, [pc, #44]	; (8000928 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 80008fa:	490c      	ldr	r1, [pc, #48]	; (800092c <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 80008fc:	4a0c      	ldr	r2, [pc, #48]	; (8000930 <LoopFillZerobss+0x16>)
  movs r3, #0
 80008fe:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000900:	e002      	b.n	8000908 <LoopCopyDataInit>

08000902 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000902:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000904:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000906:	3304      	adds	r3, #4

08000908 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000908:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800090a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800090c:	d3f9      	bcc.n	8000902 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800090e:	4a09      	ldr	r2, [pc, #36]	; (8000934 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8000910:	4c09      	ldr	r4, [pc, #36]	; (8000938 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000912:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000914:	e001      	b.n	800091a <LoopFillZerobss>

08000916 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000916:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000918:	3204      	adds	r2, #4

0800091a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800091a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800091c:	d3fb      	bcc.n	8000916 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800091e:	f001 fd97 	bl	8002450 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000922:	f7ff fddb 	bl	80004dc <main>
  bx lr
 8000926:	4770      	bx	lr
  ldr r0, =_sdata
 8000928:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800092c:	2000001c 	.word	0x2000001c
  ldr r2, =_sidata
 8000930:	080024dc 	.word	0x080024dc
  ldr r2, =_sbss
 8000934:	2000001c 	.word	0x2000001c
  ldr r4, =_ebss
 8000938:	200002ac 	.word	0x200002ac

0800093c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800093c:	e7fe      	b.n	800093c <ADC1_2_IRQHandler>
	...

08000940 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000940:	b580      	push	{r7, lr}
 8000942:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000944:	4b08      	ldr	r3, [pc, #32]	; (8000968 <HAL_Init+0x28>)
 8000946:	681b      	ldr	r3, [r3, #0]
 8000948:	4a07      	ldr	r2, [pc, #28]	; (8000968 <HAL_Init+0x28>)
 800094a:	f043 0310 	orr.w	r3, r3, #16
 800094e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000950:	2003      	movs	r0, #3
 8000952:	f000 f923 	bl	8000b9c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000956:	200f      	movs	r0, #15
 8000958:	f000 f808 	bl	800096c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800095c:	f7ff fee8 	bl	8000730 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000960:	2300      	movs	r3, #0
}
 8000962:	4618      	mov	r0, r3
 8000964:	bd80      	pop	{r7, pc}
 8000966:	bf00      	nop
 8000968:	40022000 	.word	0x40022000

0800096c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800096c:	b580      	push	{r7, lr}
 800096e:	b082      	sub	sp, #8
 8000970:	af00      	add	r7, sp, #0
 8000972:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000974:	4b12      	ldr	r3, [pc, #72]	; (80009c0 <HAL_InitTick+0x54>)
 8000976:	681a      	ldr	r2, [r3, #0]
 8000978:	4b12      	ldr	r3, [pc, #72]	; (80009c4 <HAL_InitTick+0x58>)
 800097a:	781b      	ldrb	r3, [r3, #0]
 800097c:	4619      	mov	r1, r3
 800097e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000982:	fbb3 f3f1 	udiv	r3, r3, r1
 8000986:	fbb2 f3f3 	udiv	r3, r2, r3
 800098a:	4618      	mov	r0, r3
 800098c:	f000 f93b 	bl	8000c06 <HAL_SYSTICK_Config>
 8000990:	4603      	mov	r3, r0
 8000992:	2b00      	cmp	r3, #0
 8000994:	d001      	beq.n	800099a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000996:	2301      	movs	r3, #1
 8000998:	e00e      	b.n	80009b8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800099a:	687b      	ldr	r3, [r7, #4]
 800099c:	2b0f      	cmp	r3, #15
 800099e:	d80a      	bhi.n	80009b6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80009a0:	2200      	movs	r2, #0
 80009a2:	6879      	ldr	r1, [r7, #4]
 80009a4:	f04f 30ff 	mov.w	r0, #4294967295
 80009a8:	f000 f903 	bl	8000bb2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80009ac:	4a06      	ldr	r2, [pc, #24]	; (80009c8 <HAL_InitTick+0x5c>)
 80009ae:	687b      	ldr	r3, [r7, #4]
 80009b0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80009b2:	2300      	movs	r3, #0
 80009b4:	e000      	b.n	80009b8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80009b6:	2301      	movs	r3, #1
}
 80009b8:	4618      	mov	r0, r3
 80009ba:	3708      	adds	r7, #8
 80009bc:	46bd      	mov	sp, r7
 80009be:	bd80      	pop	{r7, pc}
 80009c0:	20000010 	.word	0x20000010
 80009c4:	20000018 	.word	0x20000018
 80009c8:	20000014 	.word	0x20000014

080009cc <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80009cc:	b480      	push	{r7}
 80009ce:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80009d0:	4b05      	ldr	r3, [pc, #20]	; (80009e8 <HAL_IncTick+0x1c>)
 80009d2:	781b      	ldrb	r3, [r3, #0]
 80009d4:	461a      	mov	r2, r3
 80009d6:	4b05      	ldr	r3, [pc, #20]	; (80009ec <HAL_IncTick+0x20>)
 80009d8:	681b      	ldr	r3, [r3, #0]
 80009da:	4413      	add	r3, r2
 80009dc:	4a03      	ldr	r2, [pc, #12]	; (80009ec <HAL_IncTick+0x20>)
 80009de:	6013      	str	r3, [r2, #0]
}
 80009e0:	bf00      	nop
 80009e2:	46bd      	mov	sp, r7
 80009e4:	bc80      	pop	{r7}
 80009e6:	4770      	bx	lr
 80009e8:	20000018 	.word	0x20000018
 80009ec:	200002a8 	.word	0x200002a8

080009f0 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80009f0:	b480      	push	{r7}
 80009f2:	af00      	add	r7, sp, #0
  return uwTick;
 80009f4:	4b02      	ldr	r3, [pc, #8]	; (8000a00 <HAL_GetTick+0x10>)
 80009f6:	681b      	ldr	r3, [r3, #0]
}
 80009f8:	4618      	mov	r0, r3
 80009fa:	46bd      	mov	sp, r7
 80009fc:	bc80      	pop	{r7}
 80009fe:	4770      	bx	lr
 8000a00:	200002a8 	.word	0x200002a8

08000a04 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000a04:	b480      	push	{r7}
 8000a06:	b085      	sub	sp, #20
 8000a08:	af00      	add	r7, sp, #0
 8000a0a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000a0c:	687b      	ldr	r3, [r7, #4]
 8000a0e:	f003 0307 	and.w	r3, r3, #7
 8000a12:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000a14:	4b0c      	ldr	r3, [pc, #48]	; (8000a48 <__NVIC_SetPriorityGrouping+0x44>)
 8000a16:	68db      	ldr	r3, [r3, #12]
 8000a18:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000a1a:	68ba      	ldr	r2, [r7, #8]
 8000a1c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000a20:	4013      	ands	r3, r2
 8000a22:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000a24:	68fb      	ldr	r3, [r7, #12]
 8000a26:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000a28:	68bb      	ldr	r3, [r7, #8]
 8000a2a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000a2c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000a30:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000a34:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000a36:	4a04      	ldr	r2, [pc, #16]	; (8000a48 <__NVIC_SetPriorityGrouping+0x44>)
 8000a38:	68bb      	ldr	r3, [r7, #8]
 8000a3a:	60d3      	str	r3, [r2, #12]
}
 8000a3c:	bf00      	nop
 8000a3e:	3714      	adds	r7, #20
 8000a40:	46bd      	mov	sp, r7
 8000a42:	bc80      	pop	{r7}
 8000a44:	4770      	bx	lr
 8000a46:	bf00      	nop
 8000a48:	e000ed00 	.word	0xe000ed00

08000a4c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000a4c:	b480      	push	{r7}
 8000a4e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000a50:	4b04      	ldr	r3, [pc, #16]	; (8000a64 <__NVIC_GetPriorityGrouping+0x18>)
 8000a52:	68db      	ldr	r3, [r3, #12]
 8000a54:	0a1b      	lsrs	r3, r3, #8
 8000a56:	f003 0307 	and.w	r3, r3, #7
}
 8000a5a:	4618      	mov	r0, r3
 8000a5c:	46bd      	mov	sp, r7
 8000a5e:	bc80      	pop	{r7}
 8000a60:	4770      	bx	lr
 8000a62:	bf00      	nop
 8000a64:	e000ed00 	.word	0xe000ed00

08000a68 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000a68:	b480      	push	{r7}
 8000a6a:	b083      	sub	sp, #12
 8000a6c:	af00      	add	r7, sp, #0
 8000a6e:	4603      	mov	r3, r0
 8000a70:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000a72:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a76:	2b00      	cmp	r3, #0
 8000a78:	db0b      	blt.n	8000a92 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000a7a:	79fb      	ldrb	r3, [r7, #7]
 8000a7c:	f003 021f 	and.w	r2, r3, #31
 8000a80:	4906      	ldr	r1, [pc, #24]	; (8000a9c <__NVIC_EnableIRQ+0x34>)
 8000a82:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a86:	095b      	lsrs	r3, r3, #5
 8000a88:	2001      	movs	r0, #1
 8000a8a:	fa00 f202 	lsl.w	r2, r0, r2
 8000a8e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000a92:	bf00      	nop
 8000a94:	370c      	adds	r7, #12
 8000a96:	46bd      	mov	sp, r7
 8000a98:	bc80      	pop	{r7}
 8000a9a:	4770      	bx	lr
 8000a9c:	e000e100 	.word	0xe000e100

08000aa0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000aa0:	b480      	push	{r7}
 8000aa2:	b083      	sub	sp, #12
 8000aa4:	af00      	add	r7, sp, #0
 8000aa6:	4603      	mov	r3, r0
 8000aa8:	6039      	str	r1, [r7, #0]
 8000aaa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000aac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ab0:	2b00      	cmp	r3, #0
 8000ab2:	db0a      	blt.n	8000aca <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ab4:	683b      	ldr	r3, [r7, #0]
 8000ab6:	b2da      	uxtb	r2, r3
 8000ab8:	490c      	ldr	r1, [pc, #48]	; (8000aec <__NVIC_SetPriority+0x4c>)
 8000aba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000abe:	0112      	lsls	r2, r2, #4
 8000ac0:	b2d2      	uxtb	r2, r2
 8000ac2:	440b      	add	r3, r1
 8000ac4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000ac8:	e00a      	b.n	8000ae0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000aca:	683b      	ldr	r3, [r7, #0]
 8000acc:	b2da      	uxtb	r2, r3
 8000ace:	4908      	ldr	r1, [pc, #32]	; (8000af0 <__NVIC_SetPriority+0x50>)
 8000ad0:	79fb      	ldrb	r3, [r7, #7]
 8000ad2:	f003 030f 	and.w	r3, r3, #15
 8000ad6:	3b04      	subs	r3, #4
 8000ad8:	0112      	lsls	r2, r2, #4
 8000ada:	b2d2      	uxtb	r2, r2
 8000adc:	440b      	add	r3, r1
 8000ade:	761a      	strb	r2, [r3, #24]
}
 8000ae0:	bf00      	nop
 8000ae2:	370c      	adds	r7, #12
 8000ae4:	46bd      	mov	sp, r7
 8000ae6:	bc80      	pop	{r7}
 8000ae8:	4770      	bx	lr
 8000aea:	bf00      	nop
 8000aec:	e000e100 	.word	0xe000e100
 8000af0:	e000ed00 	.word	0xe000ed00

08000af4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000af4:	b480      	push	{r7}
 8000af6:	b089      	sub	sp, #36	; 0x24
 8000af8:	af00      	add	r7, sp, #0
 8000afa:	60f8      	str	r0, [r7, #12]
 8000afc:	60b9      	str	r1, [r7, #8]
 8000afe:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000b00:	68fb      	ldr	r3, [r7, #12]
 8000b02:	f003 0307 	and.w	r3, r3, #7
 8000b06:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000b08:	69fb      	ldr	r3, [r7, #28]
 8000b0a:	f1c3 0307 	rsb	r3, r3, #7
 8000b0e:	2b04      	cmp	r3, #4
 8000b10:	bf28      	it	cs
 8000b12:	2304      	movcs	r3, #4
 8000b14:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000b16:	69fb      	ldr	r3, [r7, #28]
 8000b18:	3304      	adds	r3, #4
 8000b1a:	2b06      	cmp	r3, #6
 8000b1c:	d902      	bls.n	8000b24 <NVIC_EncodePriority+0x30>
 8000b1e:	69fb      	ldr	r3, [r7, #28]
 8000b20:	3b03      	subs	r3, #3
 8000b22:	e000      	b.n	8000b26 <NVIC_EncodePriority+0x32>
 8000b24:	2300      	movs	r3, #0
 8000b26:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000b28:	f04f 32ff 	mov.w	r2, #4294967295
 8000b2c:	69bb      	ldr	r3, [r7, #24]
 8000b2e:	fa02 f303 	lsl.w	r3, r2, r3
 8000b32:	43da      	mvns	r2, r3
 8000b34:	68bb      	ldr	r3, [r7, #8]
 8000b36:	401a      	ands	r2, r3
 8000b38:	697b      	ldr	r3, [r7, #20]
 8000b3a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000b3c:	f04f 31ff 	mov.w	r1, #4294967295
 8000b40:	697b      	ldr	r3, [r7, #20]
 8000b42:	fa01 f303 	lsl.w	r3, r1, r3
 8000b46:	43d9      	mvns	r1, r3
 8000b48:	687b      	ldr	r3, [r7, #4]
 8000b4a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000b4c:	4313      	orrs	r3, r2
         );
}
 8000b4e:	4618      	mov	r0, r3
 8000b50:	3724      	adds	r7, #36	; 0x24
 8000b52:	46bd      	mov	sp, r7
 8000b54:	bc80      	pop	{r7}
 8000b56:	4770      	bx	lr

08000b58 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000b58:	b580      	push	{r7, lr}
 8000b5a:	b082      	sub	sp, #8
 8000b5c:	af00      	add	r7, sp, #0
 8000b5e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000b60:	687b      	ldr	r3, [r7, #4]
 8000b62:	3b01      	subs	r3, #1
 8000b64:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000b68:	d301      	bcc.n	8000b6e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000b6a:	2301      	movs	r3, #1
 8000b6c:	e00f      	b.n	8000b8e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000b6e:	4a0a      	ldr	r2, [pc, #40]	; (8000b98 <SysTick_Config+0x40>)
 8000b70:	687b      	ldr	r3, [r7, #4]
 8000b72:	3b01      	subs	r3, #1
 8000b74:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000b76:	210f      	movs	r1, #15
 8000b78:	f04f 30ff 	mov.w	r0, #4294967295
 8000b7c:	f7ff ff90 	bl	8000aa0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000b80:	4b05      	ldr	r3, [pc, #20]	; (8000b98 <SysTick_Config+0x40>)
 8000b82:	2200      	movs	r2, #0
 8000b84:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000b86:	4b04      	ldr	r3, [pc, #16]	; (8000b98 <SysTick_Config+0x40>)
 8000b88:	2207      	movs	r2, #7
 8000b8a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000b8c:	2300      	movs	r3, #0
}
 8000b8e:	4618      	mov	r0, r3
 8000b90:	3708      	adds	r7, #8
 8000b92:	46bd      	mov	sp, r7
 8000b94:	bd80      	pop	{r7, pc}
 8000b96:	bf00      	nop
 8000b98:	e000e010 	.word	0xe000e010

08000b9c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000b9c:	b580      	push	{r7, lr}
 8000b9e:	b082      	sub	sp, #8
 8000ba0:	af00      	add	r7, sp, #0
 8000ba2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000ba4:	6878      	ldr	r0, [r7, #4]
 8000ba6:	f7ff ff2d 	bl	8000a04 <__NVIC_SetPriorityGrouping>
}
 8000baa:	bf00      	nop
 8000bac:	3708      	adds	r7, #8
 8000bae:	46bd      	mov	sp, r7
 8000bb0:	bd80      	pop	{r7, pc}

08000bb2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000bb2:	b580      	push	{r7, lr}
 8000bb4:	b086      	sub	sp, #24
 8000bb6:	af00      	add	r7, sp, #0
 8000bb8:	4603      	mov	r3, r0
 8000bba:	60b9      	str	r1, [r7, #8]
 8000bbc:	607a      	str	r2, [r7, #4]
 8000bbe:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000bc0:	2300      	movs	r3, #0
 8000bc2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000bc4:	f7ff ff42 	bl	8000a4c <__NVIC_GetPriorityGrouping>
 8000bc8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000bca:	687a      	ldr	r2, [r7, #4]
 8000bcc:	68b9      	ldr	r1, [r7, #8]
 8000bce:	6978      	ldr	r0, [r7, #20]
 8000bd0:	f7ff ff90 	bl	8000af4 <NVIC_EncodePriority>
 8000bd4:	4602      	mov	r2, r0
 8000bd6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000bda:	4611      	mov	r1, r2
 8000bdc:	4618      	mov	r0, r3
 8000bde:	f7ff ff5f 	bl	8000aa0 <__NVIC_SetPriority>
}
 8000be2:	bf00      	nop
 8000be4:	3718      	adds	r7, #24
 8000be6:	46bd      	mov	sp, r7
 8000be8:	bd80      	pop	{r7, pc}

08000bea <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000bea:	b580      	push	{r7, lr}
 8000bec:	b082      	sub	sp, #8
 8000bee:	af00      	add	r7, sp, #0
 8000bf0:	4603      	mov	r3, r0
 8000bf2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000bf4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bf8:	4618      	mov	r0, r3
 8000bfa:	f7ff ff35 	bl	8000a68 <__NVIC_EnableIRQ>
}
 8000bfe:	bf00      	nop
 8000c00:	3708      	adds	r7, #8
 8000c02:	46bd      	mov	sp, r7
 8000c04:	bd80      	pop	{r7, pc}

08000c06 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000c06:	b580      	push	{r7, lr}
 8000c08:	b082      	sub	sp, #8
 8000c0a:	af00      	add	r7, sp, #0
 8000c0c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000c0e:	6878      	ldr	r0, [r7, #4]
 8000c10:	f7ff ffa2 	bl	8000b58 <SysTick_Config>
 8000c14:	4603      	mov	r3, r0
}
 8000c16:	4618      	mov	r0, r3
 8000c18:	3708      	adds	r7, #8
 8000c1a:	46bd      	mov	sp, r7
 8000c1c:	bd80      	pop	{r7, pc}
	...

08000c20 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000c20:	b480      	push	{r7}
 8000c22:	b08b      	sub	sp, #44	; 0x2c
 8000c24:	af00      	add	r7, sp, #0
 8000c26:	6078      	str	r0, [r7, #4]
 8000c28:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000c2a:	2300      	movs	r3, #0
 8000c2c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8000c2e:	2300      	movs	r3, #0
 8000c30:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000c32:	e169      	b.n	8000f08 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8000c34:	2201      	movs	r2, #1
 8000c36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c38:	fa02 f303 	lsl.w	r3, r2, r3
 8000c3c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000c3e:	683b      	ldr	r3, [r7, #0]
 8000c40:	681b      	ldr	r3, [r3, #0]
 8000c42:	69fa      	ldr	r2, [r7, #28]
 8000c44:	4013      	ands	r3, r2
 8000c46:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000c48:	69ba      	ldr	r2, [r7, #24]
 8000c4a:	69fb      	ldr	r3, [r7, #28]
 8000c4c:	429a      	cmp	r2, r3
 8000c4e:	f040 8158 	bne.w	8000f02 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000c52:	683b      	ldr	r3, [r7, #0]
 8000c54:	685b      	ldr	r3, [r3, #4]
 8000c56:	4a9a      	ldr	r2, [pc, #616]	; (8000ec0 <HAL_GPIO_Init+0x2a0>)
 8000c58:	4293      	cmp	r3, r2
 8000c5a:	d05e      	beq.n	8000d1a <HAL_GPIO_Init+0xfa>
 8000c5c:	4a98      	ldr	r2, [pc, #608]	; (8000ec0 <HAL_GPIO_Init+0x2a0>)
 8000c5e:	4293      	cmp	r3, r2
 8000c60:	d875      	bhi.n	8000d4e <HAL_GPIO_Init+0x12e>
 8000c62:	4a98      	ldr	r2, [pc, #608]	; (8000ec4 <HAL_GPIO_Init+0x2a4>)
 8000c64:	4293      	cmp	r3, r2
 8000c66:	d058      	beq.n	8000d1a <HAL_GPIO_Init+0xfa>
 8000c68:	4a96      	ldr	r2, [pc, #600]	; (8000ec4 <HAL_GPIO_Init+0x2a4>)
 8000c6a:	4293      	cmp	r3, r2
 8000c6c:	d86f      	bhi.n	8000d4e <HAL_GPIO_Init+0x12e>
 8000c6e:	4a96      	ldr	r2, [pc, #600]	; (8000ec8 <HAL_GPIO_Init+0x2a8>)
 8000c70:	4293      	cmp	r3, r2
 8000c72:	d052      	beq.n	8000d1a <HAL_GPIO_Init+0xfa>
 8000c74:	4a94      	ldr	r2, [pc, #592]	; (8000ec8 <HAL_GPIO_Init+0x2a8>)
 8000c76:	4293      	cmp	r3, r2
 8000c78:	d869      	bhi.n	8000d4e <HAL_GPIO_Init+0x12e>
 8000c7a:	4a94      	ldr	r2, [pc, #592]	; (8000ecc <HAL_GPIO_Init+0x2ac>)
 8000c7c:	4293      	cmp	r3, r2
 8000c7e:	d04c      	beq.n	8000d1a <HAL_GPIO_Init+0xfa>
 8000c80:	4a92      	ldr	r2, [pc, #584]	; (8000ecc <HAL_GPIO_Init+0x2ac>)
 8000c82:	4293      	cmp	r3, r2
 8000c84:	d863      	bhi.n	8000d4e <HAL_GPIO_Init+0x12e>
 8000c86:	4a92      	ldr	r2, [pc, #584]	; (8000ed0 <HAL_GPIO_Init+0x2b0>)
 8000c88:	4293      	cmp	r3, r2
 8000c8a:	d046      	beq.n	8000d1a <HAL_GPIO_Init+0xfa>
 8000c8c:	4a90      	ldr	r2, [pc, #576]	; (8000ed0 <HAL_GPIO_Init+0x2b0>)
 8000c8e:	4293      	cmp	r3, r2
 8000c90:	d85d      	bhi.n	8000d4e <HAL_GPIO_Init+0x12e>
 8000c92:	2b12      	cmp	r3, #18
 8000c94:	d82a      	bhi.n	8000cec <HAL_GPIO_Init+0xcc>
 8000c96:	2b12      	cmp	r3, #18
 8000c98:	d859      	bhi.n	8000d4e <HAL_GPIO_Init+0x12e>
 8000c9a:	a201      	add	r2, pc, #4	; (adr r2, 8000ca0 <HAL_GPIO_Init+0x80>)
 8000c9c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000ca0:	08000d1b 	.word	0x08000d1b
 8000ca4:	08000cf5 	.word	0x08000cf5
 8000ca8:	08000d07 	.word	0x08000d07
 8000cac:	08000d49 	.word	0x08000d49
 8000cb0:	08000d4f 	.word	0x08000d4f
 8000cb4:	08000d4f 	.word	0x08000d4f
 8000cb8:	08000d4f 	.word	0x08000d4f
 8000cbc:	08000d4f 	.word	0x08000d4f
 8000cc0:	08000d4f 	.word	0x08000d4f
 8000cc4:	08000d4f 	.word	0x08000d4f
 8000cc8:	08000d4f 	.word	0x08000d4f
 8000ccc:	08000d4f 	.word	0x08000d4f
 8000cd0:	08000d4f 	.word	0x08000d4f
 8000cd4:	08000d4f 	.word	0x08000d4f
 8000cd8:	08000d4f 	.word	0x08000d4f
 8000cdc:	08000d4f 	.word	0x08000d4f
 8000ce0:	08000d4f 	.word	0x08000d4f
 8000ce4:	08000cfd 	.word	0x08000cfd
 8000ce8:	08000d11 	.word	0x08000d11
 8000cec:	4a79      	ldr	r2, [pc, #484]	; (8000ed4 <HAL_GPIO_Init+0x2b4>)
 8000cee:	4293      	cmp	r3, r2
 8000cf0:	d013      	beq.n	8000d1a <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8000cf2:	e02c      	b.n	8000d4e <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000cf4:	683b      	ldr	r3, [r7, #0]
 8000cf6:	68db      	ldr	r3, [r3, #12]
 8000cf8:	623b      	str	r3, [r7, #32]
          break;
 8000cfa:	e029      	b.n	8000d50 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000cfc:	683b      	ldr	r3, [r7, #0]
 8000cfe:	68db      	ldr	r3, [r3, #12]
 8000d00:	3304      	adds	r3, #4
 8000d02:	623b      	str	r3, [r7, #32]
          break;
 8000d04:	e024      	b.n	8000d50 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000d06:	683b      	ldr	r3, [r7, #0]
 8000d08:	68db      	ldr	r3, [r3, #12]
 8000d0a:	3308      	adds	r3, #8
 8000d0c:	623b      	str	r3, [r7, #32]
          break;
 8000d0e:	e01f      	b.n	8000d50 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000d10:	683b      	ldr	r3, [r7, #0]
 8000d12:	68db      	ldr	r3, [r3, #12]
 8000d14:	330c      	adds	r3, #12
 8000d16:	623b      	str	r3, [r7, #32]
          break;
 8000d18:	e01a      	b.n	8000d50 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000d1a:	683b      	ldr	r3, [r7, #0]
 8000d1c:	689b      	ldr	r3, [r3, #8]
 8000d1e:	2b00      	cmp	r3, #0
 8000d20:	d102      	bne.n	8000d28 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000d22:	2304      	movs	r3, #4
 8000d24:	623b      	str	r3, [r7, #32]
          break;
 8000d26:	e013      	b.n	8000d50 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000d28:	683b      	ldr	r3, [r7, #0]
 8000d2a:	689b      	ldr	r3, [r3, #8]
 8000d2c:	2b01      	cmp	r3, #1
 8000d2e:	d105      	bne.n	8000d3c <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000d30:	2308      	movs	r3, #8
 8000d32:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8000d34:	687b      	ldr	r3, [r7, #4]
 8000d36:	69fa      	ldr	r2, [r7, #28]
 8000d38:	611a      	str	r2, [r3, #16]
          break;
 8000d3a:	e009      	b.n	8000d50 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000d3c:	2308      	movs	r3, #8
 8000d3e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8000d40:	687b      	ldr	r3, [r7, #4]
 8000d42:	69fa      	ldr	r2, [r7, #28]
 8000d44:	615a      	str	r2, [r3, #20]
          break;
 8000d46:	e003      	b.n	8000d50 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000d48:	2300      	movs	r3, #0
 8000d4a:	623b      	str	r3, [r7, #32]
          break;
 8000d4c:	e000      	b.n	8000d50 <HAL_GPIO_Init+0x130>
          break;
 8000d4e:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000d50:	69bb      	ldr	r3, [r7, #24]
 8000d52:	2bff      	cmp	r3, #255	; 0xff
 8000d54:	d801      	bhi.n	8000d5a <HAL_GPIO_Init+0x13a>
 8000d56:	687b      	ldr	r3, [r7, #4]
 8000d58:	e001      	b.n	8000d5e <HAL_GPIO_Init+0x13e>
 8000d5a:	687b      	ldr	r3, [r7, #4]
 8000d5c:	3304      	adds	r3, #4
 8000d5e:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8000d60:	69bb      	ldr	r3, [r7, #24]
 8000d62:	2bff      	cmp	r3, #255	; 0xff
 8000d64:	d802      	bhi.n	8000d6c <HAL_GPIO_Init+0x14c>
 8000d66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d68:	009b      	lsls	r3, r3, #2
 8000d6a:	e002      	b.n	8000d72 <HAL_GPIO_Init+0x152>
 8000d6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d6e:	3b08      	subs	r3, #8
 8000d70:	009b      	lsls	r3, r3, #2
 8000d72:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000d74:	697b      	ldr	r3, [r7, #20]
 8000d76:	681a      	ldr	r2, [r3, #0]
 8000d78:	210f      	movs	r1, #15
 8000d7a:	693b      	ldr	r3, [r7, #16]
 8000d7c:	fa01 f303 	lsl.w	r3, r1, r3
 8000d80:	43db      	mvns	r3, r3
 8000d82:	401a      	ands	r2, r3
 8000d84:	6a39      	ldr	r1, [r7, #32]
 8000d86:	693b      	ldr	r3, [r7, #16]
 8000d88:	fa01 f303 	lsl.w	r3, r1, r3
 8000d8c:	431a      	orrs	r2, r3
 8000d8e:	697b      	ldr	r3, [r7, #20]
 8000d90:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000d92:	683b      	ldr	r3, [r7, #0]
 8000d94:	685b      	ldr	r3, [r3, #4]
 8000d96:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000d9a:	2b00      	cmp	r3, #0
 8000d9c:	f000 80b1 	beq.w	8000f02 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000da0:	4b4d      	ldr	r3, [pc, #308]	; (8000ed8 <HAL_GPIO_Init+0x2b8>)
 8000da2:	699b      	ldr	r3, [r3, #24]
 8000da4:	4a4c      	ldr	r2, [pc, #304]	; (8000ed8 <HAL_GPIO_Init+0x2b8>)
 8000da6:	f043 0301 	orr.w	r3, r3, #1
 8000daa:	6193      	str	r3, [r2, #24]
 8000dac:	4b4a      	ldr	r3, [pc, #296]	; (8000ed8 <HAL_GPIO_Init+0x2b8>)
 8000dae:	699b      	ldr	r3, [r3, #24]
 8000db0:	f003 0301 	and.w	r3, r3, #1
 8000db4:	60bb      	str	r3, [r7, #8]
 8000db6:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8000db8:	4a48      	ldr	r2, [pc, #288]	; (8000edc <HAL_GPIO_Init+0x2bc>)
 8000dba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000dbc:	089b      	lsrs	r3, r3, #2
 8000dbe:	3302      	adds	r3, #2
 8000dc0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000dc4:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000dc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000dc8:	f003 0303 	and.w	r3, r3, #3
 8000dcc:	009b      	lsls	r3, r3, #2
 8000dce:	220f      	movs	r2, #15
 8000dd0:	fa02 f303 	lsl.w	r3, r2, r3
 8000dd4:	43db      	mvns	r3, r3
 8000dd6:	68fa      	ldr	r2, [r7, #12]
 8000dd8:	4013      	ands	r3, r2
 8000dda:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000ddc:	687b      	ldr	r3, [r7, #4]
 8000dde:	4a40      	ldr	r2, [pc, #256]	; (8000ee0 <HAL_GPIO_Init+0x2c0>)
 8000de0:	4293      	cmp	r3, r2
 8000de2:	d013      	beq.n	8000e0c <HAL_GPIO_Init+0x1ec>
 8000de4:	687b      	ldr	r3, [r7, #4]
 8000de6:	4a3f      	ldr	r2, [pc, #252]	; (8000ee4 <HAL_GPIO_Init+0x2c4>)
 8000de8:	4293      	cmp	r3, r2
 8000dea:	d00d      	beq.n	8000e08 <HAL_GPIO_Init+0x1e8>
 8000dec:	687b      	ldr	r3, [r7, #4]
 8000dee:	4a3e      	ldr	r2, [pc, #248]	; (8000ee8 <HAL_GPIO_Init+0x2c8>)
 8000df0:	4293      	cmp	r3, r2
 8000df2:	d007      	beq.n	8000e04 <HAL_GPIO_Init+0x1e4>
 8000df4:	687b      	ldr	r3, [r7, #4]
 8000df6:	4a3d      	ldr	r2, [pc, #244]	; (8000eec <HAL_GPIO_Init+0x2cc>)
 8000df8:	4293      	cmp	r3, r2
 8000dfa:	d101      	bne.n	8000e00 <HAL_GPIO_Init+0x1e0>
 8000dfc:	2303      	movs	r3, #3
 8000dfe:	e006      	b.n	8000e0e <HAL_GPIO_Init+0x1ee>
 8000e00:	2304      	movs	r3, #4
 8000e02:	e004      	b.n	8000e0e <HAL_GPIO_Init+0x1ee>
 8000e04:	2302      	movs	r3, #2
 8000e06:	e002      	b.n	8000e0e <HAL_GPIO_Init+0x1ee>
 8000e08:	2301      	movs	r3, #1
 8000e0a:	e000      	b.n	8000e0e <HAL_GPIO_Init+0x1ee>
 8000e0c:	2300      	movs	r3, #0
 8000e0e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000e10:	f002 0203 	and.w	r2, r2, #3
 8000e14:	0092      	lsls	r2, r2, #2
 8000e16:	4093      	lsls	r3, r2
 8000e18:	68fa      	ldr	r2, [r7, #12]
 8000e1a:	4313      	orrs	r3, r2
 8000e1c:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8000e1e:	492f      	ldr	r1, [pc, #188]	; (8000edc <HAL_GPIO_Init+0x2bc>)
 8000e20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e22:	089b      	lsrs	r3, r3, #2
 8000e24:	3302      	adds	r3, #2
 8000e26:	68fa      	ldr	r2, [r7, #12]
 8000e28:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000e2c:	683b      	ldr	r3, [r7, #0]
 8000e2e:	685b      	ldr	r3, [r3, #4]
 8000e30:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000e34:	2b00      	cmp	r3, #0
 8000e36:	d006      	beq.n	8000e46 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8000e38:	4b2d      	ldr	r3, [pc, #180]	; (8000ef0 <HAL_GPIO_Init+0x2d0>)
 8000e3a:	689a      	ldr	r2, [r3, #8]
 8000e3c:	492c      	ldr	r1, [pc, #176]	; (8000ef0 <HAL_GPIO_Init+0x2d0>)
 8000e3e:	69bb      	ldr	r3, [r7, #24]
 8000e40:	4313      	orrs	r3, r2
 8000e42:	608b      	str	r3, [r1, #8]
 8000e44:	e006      	b.n	8000e54 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8000e46:	4b2a      	ldr	r3, [pc, #168]	; (8000ef0 <HAL_GPIO_Init+0x2d0>)
 8000e48:	689a      	ldr	r2, [r3, #8]
 8000e4a:	69bb      	ldr	r3, [r7, #24]
 8000e4c:	43db      	mvns	r3, r3
 8000e4e:	4928      	ldr	r1, [pc, #160]	; (8000ef0 <HAL_GPIO_Init+0x2d0>)
 8000e50:	4013      	ands	r3, r2
 8000e52:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000e54:	683b      	ldr	r3, [r7, #0]
 8000e56:	685b      	ldr	r3, [r3, #4]
 8000e58:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000e5c:	2b00      	cmp	r3, #0
 8000e5e:	d006      	beq.n	8000e6e <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8000e60:	4b23      	ldr	r3, [pc, #140]	; (8000ef0 <HAL_GPIO_Init+0x2d0>)
 8000e62:	68da      	ldr	r2, [r3, #12]
 8000e64:	4922      	ldr	r1, [pc, #136]	; (8000ef0 <HAL_GPIO_Init+0x2d0>)
 8000e66:	69bb      	ldr	r3, [r7, #24]
 8000e68:	4313      	orrs	r3, r2
 8000e6a:	60cb      	str	r3, [r1, #12]
 8000e6c:	e006      	b.n	8000e7c <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8000e6e:	4b20      	ldr	r3, [pc, #128]	; (8000ef0 <HAL_GPIO_Init+0x2d0>)
 8000e70:	68da      	ldr	r2, [r3, #12]
 8000e72:	69bb      	ldr	r3, [r7, #24]
 8000e74:	43db      	mvns	r3, r3
 8000e76:	491e      	ldr	r1, [pc, #120]	; (8000ef0 <HAL_GPIO_Init+0x2d0>)
 8000e78:	4013      	ands	r3, r2
 8000e7a:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000e7c:	683b      	ldr	r3, [r7, #0]
 8000e7e:	685b      	ldr	r3, [r3, #4]
 8000e80:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000e84:	2b00      	cmp	r3, #0
 8000e86:	d006      	beq.n	8000e96 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8000e88:	4b19      	ldr	r3, [pc, #100]	; (8000ef0 <HAL_GPIO_Init+0x2d0>)
 8000e8a:	685a      	ldr	r2, [r3, #4]
 8000e8c:	4918      	ldr	r1, [pc, #96]	; (8000ef0 <HAL_GPIO_Init+0x2d0>)
 8000e8e:	69bb      	ldr	r3, [r7, #24]
 8000e90:	4313      	orrs	r3, r2
 8000e92:	604b      	str	r3, [r1, #4]
 8000e94:	e006      	b.n	8000ea4 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8000e96:	4b16      	ldr	r3, [pc, #88]	; (8000ef0 <HAL_GPIO_Init+0x2d0>)
 8000e98:	685a      	ldr	r2, [r3, #4]
 8000e9a:	69bb      	ldr	r3, [r7, #24]
 8000e9c:	43db      	mvns	r3, r3
 8000e9e:	4914      	ldr	r1, [pc, #80]	; (8000ef0 <HAL_GPIO_Init+0x2d0>)
 8000ea0:	4013      	ands	r3, r2
 8000ea2:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000ea4:	683b      	ldr	r3, [r7, #0]
 8000ea6:	685b      	ldr	r3, [r3, #4]
 8000ea8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000eac:	2b00      	cmp	r3, #0
 8000eae:	d021      	beq.n	8000ef4 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8000eb0:	4b0f      	ldr	r3, [pc, #60]	; (8000ef0 <HAL_GPIO_Init+0x2d0>)
 8000eb2:	681a      	ldr	r2, [r3, #0]
 8000eb4:	490e      	ldr	r1, [pc, #56]	; (8000ef0 <HAL_GPIO_Init+0x2d0>)
 8000eb6:	69bb      	ldr	r3, [r7, #24]
 8000eb8:	4313      	orrs	r3, r2
 8000eba:	600b      	str	r3, [r1, #0]
 8000ebc:	e021      	b.n	8000f02 <HAL_GPIO_Init+0x2e2>
 8000ebe:	bf00      	nop
 8000ec0:	10320000 	.word	0x10320000
 8000ec4:	10310000 	.word	0x10310000
 8000ec8:	10220000 	.word	0x10220000
 8000ecc:	10210000 	.word	0x10210000
 8000ed0:	10120000 	.word	0x10120000
 8000ed4:	10110000 	.word	0x10110000
 8000ed8:	40021000 	.word	0x40021000
 8000edc:	40010000 	.word	0x40010000
 8000ee0:	40010800 	.word	0x40010800
 8000ee4:	40010c00 	.word	0x40010c00
 8000ee8:	40011000 	.word	0x40011000
 8000eec:	40011400 	.word	0x40011400
 8000ef0:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8000ef4:	4b0b      	ldr	r3, [pc, #44]	; (8000f24 <HAL_GPIO_Init+0x304>)
 8000ef6:	681a      	ldr	r2, [r3, #0]
 8000ef8:	69bb      	ldr	r3, [r7, #24]
 8000efa:	43db      	mvns	r3, r3
 8000efc:	4909      	ldr	r1, [pc, #36]	; (8000f24 <HAL_GPIO_Init+0x304>)
 8000efe:	4013      	ands	r3, r2
 8000f00:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8000f02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f04:	3301      	adds	r3, #1
 8000f06:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000f08:	683b      	ldr	r3, [r7, #0]
 8000f0a:	681a      	ldr	r2, [r3, #0]
 8000f0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f0e:	fa22 f303 	lsr.w	r3, r2, r3
 8000f12:	2b00      	cmp	r3, #0
 8000f14:	f47f ae8e 	bne.w	8000c34 <HAL_GPIO_Init+0x14>
  }
}
 8000f18:	bf00      	nop
 8000f1a:	bf00      	nop
 8000f1c:	372c      	adds	r7, #44	; 0x2c
 8000f1e:	46bd      	mov	sp, r7
 8000f20:	bc80      	pop	{r7}
 8000f22:	4770      	bx	lr
 8000f24:	40010400 	.word	0x40010400

08000f28 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000f28:	b580      	push	{r7, lr}
 8000f2a:	b086      	sub	sp, #24
 8000f2c:	af00      	add	r7, sp, #0
 8000f2e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8000f30:	687b      	ldr	r3, [r7, #4]
 8000f32:	2b00      	cmp	r3, #0
 8000f34:	d101      	bne.n	8000f3a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000f36:	2301      	movs	r3, #1
 8000f38:	e272      	b.n	8001420 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000f3a:	687b      	ldr	r3, [r7, #4]
 8000f3c:	681b      	ldr	r3, [r3, #0]
 8000f3e:	f003 0301 	and.w	r3, r3, #1
 8000f42:	2b00      	cmp	r3, #0
 8000f44:	f000 8087 	beq.w	8001056 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8000f48:	4b92      	ldr	r3, [pc, #584]	; (8001194 <HAL_RCC_OscConfig+0x26c>)
 8000f4a:	685b      	ldr	r3, [r3, #4]
 8000f4c:	f003 030c 	and.w	r3, r3, #12
 8000f50:	2b04      	cmp	r3, #4
 8000f52:	d00c      	beq.n	8000f6e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000f54:	4b8f      	ldr	r3, [pc, #572]	; (8001194 <HAL_RCC_OscConfig+0x26c>)
 8000f56:	685b      	ldr	r3, [r3, #4]
 8000f58:	f003 030c 	and.w	r3, r3, #12
 8000f5c:	2b08      	cmp	r3, #8
 8000f5e:	d112      	bne.n	8000f86 <HAL_RCC_OscConfig+0x5e>
 8000f60:	4b8c      	ldr	r3, [pc, #560]	; (8001194 <HAL_RCC_OscConfig+0x26c>)
 8000f62:	685b      	ldr	r3, [r3, #4]
 8000f64:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000f68:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000f6c:	d10b      	bne.n	8000f86 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000f6e:	4b89      	ldr	r3, [pc, #548]	; (8001194 <HAL_RCC_OscConfig+0x26c>)
 8000f70:	681b      	ldr	r3, [r3, #0]
 8000f72:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000f76:	2b00      	cmp	r3, #0
 8000f78:	d06c      	beq.n	8001054 <HAL_RCC_OscConfig+0x12c>
 8000f7a:	687b      	ldr	r3, [r7, #4]
 8000f7c:	685b      	ldr	r3, [r3, #4]
 8000f7e:	2b00      	cmp	r3, #0
 8000f80:	d168      	bne.n	8001054 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8000f82:	2301      	movs	r3, #1
 8000f84:	e24c      	b.n	8001420 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000f86:	687b      	ldr	r3, [r7, #4]
 8000f88:	685b      	ldr	r3, [r3, #4]
 8000f8a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000f8e:	d106      	bne.n	8000f9e <HAL_RCC_OscConfig+0x76>
 8000f90:	4b80      	ldr	r3, [pc, #512]	; (8001194 <HAL_RCC_OscConfig+0x26c>)
 8000f92:	681b      	ldr	r3, [r3, #0]
 8000f94:	4a7f      	ldr	r2, [pc, #508]	; (8001194 <HAL_RCC_OscConfig+0x26c>)
 8000f96:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000f9a:	6013      	str	r3, [r2, #0]
 8000f9c:	e02e      	b.n	8000ffc <HAL_RCC_OscConfig+0xd4>
 8000f9e:	687b      	ldr	r3, [r7, #4]
 8000fa0:	685b      	ldr	r3, [r3, #4]
 8000fa2:	2b00      	cmp	r3, #0
 8000fa4:	d10c      	bne.n	8000fc0 <HAL_RCC_OscConfig+0x98>
 8000fa6:	4b7b      	ldr	r3, [pc, #492]	; (8001194 <HAL_RCC_OscConfig+0x26c>)
 8000fa8:	681b      	ldr	r3, [r3, #0]
 8000faa:	4a7a      	ldr	r2, [pc, #488]	; (8001194 <HAL_RCC_OscConfig+0x26c>)
 8000fac:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000fb0:	6013      	str	r3, [r2, #0]
 8000fb2:	4b78      	ldr	r3, [pc, #480]	; (8001194 <HAL_RCC_OscConfig+0x26c>)
 8000fb4:	681b      	ldr	r3, [r3, #0]
 8000fb6:	4a77      	ldr	r2, [pc, #476]	; (8001194 <HAL_RCC_OscConfig+0x26c>)
 8000fb8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000fbc:	6013      	str	r3, [r2, #0]
 8000fbe:	e01d      	b.n	8000ffc <HAL_RCC_OscConfig+0xd4>
 8000fc0:	687b      	ldr	r3, [r7, #4]
 8000fc2:	685b      	ldr	r3, [r3, #4]
 8000fc4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000fc8:	d10c      	bne.n	8000fe4 <HAL_RCC_OscConfig+0xbc>
 8000fca:	4b72      	ldr	r3, [pc, #456]	; (8001194 <HAL_RCC_OscConfig+0x26c>)
 8000fcc:	681b      	ldr	r3, [r3, #0]
 8000fce:	4a71      	ldr	r2, [pc, #452]	; (8001194 <HAL_RCC_OscConfig+0x26c>)
 8000fd0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000fd4:	6013      	str	r3, [r2, #0]
 8000fd6:	4b6f      	ldr	r3, [pc, #444]	; (8001194 <HAL_RCC_OscConfig+0x26c>)
 8000fd8:	681b      	ldr	r3, [r3, #0]
 8000fda:	4a6e      	ldr	r2, [pc, #440]	; (8001194 <HAL_RCC_OscConfig+0x26c>)
 8000fdc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000fe0:	6013      	str	r3, [r2, #0]
 8000fe2:	e00b      	b.n	8000ffc <HAL_RCC_OscConfig+0xd4>
 8000fe4:	4b6b      	ldr	r3, [pc, #428]	; (8001194 <HAL_RCC_OscConfig+0x26c>)
 8000fe6:	681b      	ldr	r3, [r3, #0]
 8000fe8:	4a6a      	ldr	r2, [pc, #424]	; (8001194 <HAL_RCC_OscConfig+0x26c>)
 8000fea:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000fee:	6013      	str	r3, [r2, #0]
 8000ff0:	4b68      	ldr	r3, [pc, #416]	; (8001194 <HAL_RCC_OscConfig+0x26c>)
 8000ff2:	681b      	ldr	r3, [r3, #0]
 8000ff4:	4a67      	ldr	r2, [pc, #412]	; (8001194 <HAL_RCC_OscConfig+0x26c>)
 8000ff6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000ffa:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	685b      	ldr	r3, [r3, #4]
 8001000:	2b00      	cmp	r3, #0
 8001002:	d013      	beq.n	800102c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001004:	f7ff fcf4 	bl	80009f0 <HAL_GetTick>
 8001008:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800100a:	e008      	b.n	800101e <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800100c:	f7ff fcf0 	bl	80009f0 <HAL_GetTick>
 8001010:	4602      	mov	r2, r0
 8001012:	693b      	ldr	r3, [r7, #16]
 8001014:	1ad3      	subs	r3, r2, r3
 8001016:	2b64      	cmp	r3, #100	; 0x64
 8001018:	d901      	bls.n	800101e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800101a:	2303      	movs	r3, #3
 800101c:	e200      	b.n	8001420 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800101e:	4b5d      	ldr	r3, [pc, #372]	; (8001194 <HAL_RCC_OscConfig+0x26c>)
 8001020:	681b      	ldr	r3, [r3, #0]
 8001022:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001026:	2b00      	cmp	r3, #0
 8001028:	d0f0      	beq.n	800100c <HAL_RCC_OscConfig+0xe4>
 800102a:	e014      	b.n	8001056 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800102c:	f7ff fce0 	bl	80009f0 <HAL_GetTick>
 8001030:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001032:	e008      	b.n	8001046 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001034:	f7ff fcdc 	bl	80009f0 <HAL_GetTick>
 8001038:	4602      	mov	r2, r0
 800103a:	693b      	ldr	r3, [r7, #16]
 800103c:	1ad3      	subs	r3, r2, r3
 800103e:	2b64      	cmp	r3, #100	; 0x64
 8001040:	d901      	bls.n	8001046 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001042:	2303      	movs	r3, #3
 8001044:	e1ec      	b.n	8001420 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001046:	4b53      	ldr	r3, [pc, #332]	; (8001194 <HAL_RCC_OscConfig+0x26c>)
 8001048:	681b      	ldr	r3, [r3, #0]
 800104a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800104e:	2b00      	cmp	r3, #0
 8001050:	d1f0      	bne.n	8001034 <HAL_RCC_OscConfig+0x10c>
 8001052:	e000      	b.n	8001056 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001054:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001056:	687b      	ldr	r3, [r7, #4]
 8001058:	681b      	ldr	r3, [r3, #0]
 800105a:	f003 0302 	and.w	r3, r3, #2
 800105e:	2b00      	cmp	r3, #0
 8001060:	d063      	beq.n	800112a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001062:	4b4c      	ldr	r3, [pc, #304]	; (8001194 <HAL_RCC_OscConfig+0x26c>)
 8001064:	685b      	ldr	r3, [r3, #4]
 8001066:	f003 030c 	and.w	r3, r3, #12
 800106a:	2b00      	cmp	r3, #0
 800106c:	d00b      	beq.n	8001086 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800106e:	4b49      	ldr	r3, [pc, #292]	; (8001194 <HAL_RCC_OscConfig+0x26c>)
 8001070:	685b      	ldr	r3, [r3, #4]
 8001072:	f003 030c 	and.w	r3, r3, #12
 8001076:	2b08      	cmp	r3, #8
 8001078:	d11c      	bne.n	80010b4 <HAL_RCC_OscConfig+0x18c>
 800107a:	4b46      	ldr	r3, [pc, #280]	; (8001194 <HAL_RCC_OscConfig+0x26c>)
 800107c:	685b      	ldr	r3, [r3, #4]
 800107e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001082:	2b00      	cmp	r3, #0
 8001084:	d116      	bne.n	80010b4 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001086:	4b43      	ldr	r3, [pc, #268]	; (8001194 <HAL_RCC_OscConfig+0x26c>)
 8001088:	681b      	ldr	r3, [r3, #0]
 800108a:	f003 0302 	and.w	r3, r3, #2
 800108e:	2b00      	cmp	r3, #0
 8001090:	d005      	beq.n	800109e <HAL_RCC_OscConfig+0x176>
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	691b      	ldr	r3, [r3, #16]
 8001096:	2b01      	cmp	r3, #1
 8001098:	d001      	beq.n	800109e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800109a:	2301      	movs	r3, #1
 800109c:	e1c0      	b.n	8001420 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800109e:	4b3d      	ldr	r3, [pc, #244]	; (8001194 <HAL_RCC_OscConfig+0x26c>)
 80010a0:	681b      	ldr	r3, [r3, #0]
 80010a2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80010a6:	687b      	ldr	r3, [r7, #4]
 80010a8:	695b      	ldr	r3, [r3, #20]
 80010aa:	00db      	lsls	r3, r3, #3
 80010ac:	4939      	ldr	r1, [pc, #228]	; (8001194 <HAL_RCC_OscConfig+0x26c>)
 80010ae:	4313      	orrs	r3, r2
 80010b0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80010b2:	e03a      	b.n	800112a <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	691b      	ldr	r3, [r3, #16]
 80010b8:	2b00      	cmp	r3, #0
 80010ba:	d020      	beq.n	80010fe <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80010bc:	4b36      	ldr	r3, [pc, #216]	; (8001198 <HAL_RCC_OscConfig+0x270>)
 80010be:	2201      	movs	r2, #1
 80010c0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80010c2:	f7ff fc95 	bl	80009f0 <HAL_GetTick>
 80010c6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80010c8:	e008      	b.n	80010dc <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80010ca:	f7ff fc91 	bl	80009f0 <HAL_GetTick>
 80010ce:	4602      	mov	r2, r0
 80010d0:	693b      	ldr	r3, [r7, #16]
 80010d2:	1ad3      	subs	r3, r2, r3
 80010d4:	2b02      	cmp	r3, #2
 80010d6:	d901      	bls.n	80010dc <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80010d8:	2303      	movs	r3, #3
 80010da:	e1a1      	b.n	8001420 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80010dc:	4b2d      	ldr	r3, [pc, #180]	; (8001194 <HAL_RCC_OscConfig+0x26c>)
 80010de:	681b      	ldr	r3, [r3, #0]
 80010e0:	f003 0302 	and.w	r3, r3, #2
 80010e4:	2b00      	cmp	r3, #0
 80010e6:	d0f0      	beq.n	80010ca <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80010e8:	4b2a      	ldr	r3, [pc, #168]	; (8001194 <HAL_RCC_OscConfig+0x26c>)
 80010ea:	681b      	ldr	r3, [r3, #0]
 80010ec:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	695b      	ldr	r3, [r3, #20]
 80010f4:	00db      	lsls	r3, r3, #3
 80010f6:	4927      	ldr	r1, [pc, #156]	; (8001194 <HAL_RCC_OscConfig+0x26c>)
 80010f8:	4313      	orrs	r3, r2
 80010fa:	600b      	str	r3, [r1, #0]
 80010fc:	e015      	b.n	800112a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80010fe:	4b26      	ldr	r3, [pc, #152]	; (8001198 <HAL_RCC_OscConfig+0x270>)
 8001100:	2200      	movs	r2, #0
 8001102:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001104:	f7ff fc74 	bl	80009f0 <HAL_GetTick>
 8001108:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800110a:	e008      	b.n	800111e <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800110c:	f7ff fc70 	bl	80009f0 <HAL_GetTick>
 8001110:	4602      	mov	r2, r0
 8001112:	693b      	ldr	r3, [r7, #16]
 8001114:	1ad3      	subs	r3, r2, r3
 8001116:	2b02      	cmp	r3, #2
 8001118:	d901      	bls.n	800111e <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800111a:	2303      	movs	r3, #3
 800111c:	e180      	b.n	8001420 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800111e:	4b1d      	ldr	r3, [pc, #116]	; (8001194 <HAL_RCC_OscConfig+0x26c>)
 8001120:	681b      	ldr	r3, [r3, #0]
 8001122:	f003 0302 	and.w	r3, r3, #2
 8001126:	2b00      	cmp	r3, #0
 8001128:	d1f0      	bne.n	800110c <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	681b      	ldr	r3, [r3, #0]
 800112e:	f003 0308 	and.w	r3, r3, #8
 8001132:	2b00      	cmp	r3, #0
 8001134:	d03a      	beq.n	80011ac <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	699b      	ldr	r3, [r3, #24]
 800113a:	2b00      	cmp	r3, #0
 800113c:	d019      	beq.n	8001172 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800113e:	4b17      	ldr	r3, [pc, #92]	; (800119c <HAL_RCC_OscConfig+0x274>)
 8001140:	2201      	movs	r2, #1
 8001142:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001144:	f7ff fc54 	bl	80009f0 <HAL_GetTick>
 8001148:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800114a:	e008      	b.n	800115e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800114c:	f7ff fc50 	bl	80009f0 <HAL_GetTick>
 8001150:	4602      	mov	r2, r0
 8001152:	693b      	ldr	r3, [r7, #16]
 8001154:	1ad3      	subs	r3, r2, r3
 8001156:	2b02      	cmp	r3, #2
 8001158:	d901      	bls.n	800115e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800115a:	2303      	movs	r3, #3
 800115c:	e160      	b.n	8001420 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800115e:	4b0d      	ldr	r3, [pc, #52]	; (8001194 <HAL_RCC_OscConfig+0x26c>)
 8001160:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001162:	f003 0302 	and.w	r3, r3, #2
 8001166:	2b00      	cmp	r3, #0
 8001168:	d0f0      	beq.n	800114c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800116a:	2001      	movs	r0, #1
 800116c:	f000 fa9e 	bl	80016ac <RCC_Delay>
 8001170:	e01c      	b.n	80011ac <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001172:	4b0a      	ldr	r3, [pc, #40]	; (800119c <HAL_RCC_OscConfig+0x274>)
 8001174:	2200      	movs	r2, #0
 8001176:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001178:	f7ff fc3a 	bl	80009f0 <HAL_GetTick>
 800117c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800117e:	e00f      	b.n	80011a0 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001180:	f7ff fc36 	bl	80009f0 <HAL_GetTick>
 8001184:	4602      	mov	r2, r0
 8001186:	693b      	ldr	r3, [r7, #16]
 8001188:	1ad3      	subs	r3, r2, r3
 800118a:	2b02      	cmp	r3, #2
 800118c:	d908      	bls.n	80011a0 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800118e:	2303      	movs	r3, #3
 8001190:	e146      	b.n	8001420 <HAL_RCC_OscConfig+0x4f8>
 8001192:	bf00      	nop
 8001194:	40021000 	.word	0x40021000
 8001198:	42420000 	.word	0x42420000
 800119c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80011a0:	4b92      	ldr	r3, [pc, #584]	; (80013ec <HAL_RCC_OscConfig+0x4c4>)
 80011a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80011a4:	f003 0302 	and.w	r3, r3, #2
 80011a8:	2b00      	cmp	r3, #0
 80011aa:	d1e9      	bne.n	8001180 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	681b      	ldr	r3, [r3, #0]
 80011b0:	f003 0304 	and.w	r3, r3, #4
 80011b4:	2b00      	cmp	r3, #0
 80011b6:	f000 80a6 	beq.w	8001306 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80011ba:	2300      	movs	r3, #0
 80011bc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80011be:	4b8b      	ldr	r3, [pc, #556]	; (80013ec <HAL_RCC_OscConfig+0x4c4>)
 80011c0:	69db      	ldr	r3, [r3, #28]
 80011c2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80011c6:	2b00      	cmp	r3, #0
 80011c8:	d10d      	bne.n	80011e6 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80011ca:	4b88      	ldr	r3, [pc, #544]	; (80013ec <HAL_RCC_OscConfig+0x4c4>)
 80011cc:	69db      	ldr	r3, [r3, #28]
 80011ce:	4a87      	ldr	r2, [pc, #540]	; (80013ec <HAL_RCC_OscConfig+0x4c4>)
 80011d0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80011d4:	61d3      	str	r3, [r2, #28]
 80011d6:	4b85      	ldr	r3, [pc, #532]	; (80013ec <HAL_RCC_OscConfig+0x4c4>)
 80011d8:	69db      	ldr	r3, [r3, #28]
 80011da:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80011de:	60bb      	str	r3, [r7, #8]
 80011e0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80011e2:	2301      	movs	r3, #1
 80011e4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80011e6:	4b82      	ldr	r3, [pc, #520]	; (80013f0 <HAL_RCC_OscConfig+0x4c8>)
 80011e8:	681b      	ldr	r3, [r3, #0]
 80011ea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80011ee:	2b00      	cmp	r3, #0
 80011f0:	d118      	bne.n	8001224 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80011f2:	4b7f      	ldr	r3, [pc, #508]	; (80013f0 <HAL_RCC_OscConfig+0x4c8>)
 80011f4:	681b      	ldr	r3, [r3, #0]
 80011f6:	4a7e      	ldr	r2, [pc, #504]	; (80013f0 <HAL_RCC_OscConfig+0x4c8>)
 80011f8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80011fc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80011fe:	f7ff fbf7 	bl	80009f0 <HAL_GetTick>
 8001202:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001204:	e008      	b.n	8001218 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001206:	f7ff fbf3 	bl	80009f0 <HAL_GetTick>
 800120a:	4602      	mov	r2, r0
 800120c:	693b      	ldr	r3, [r7, #16]
 800120e:	1ad3      	subs	r3, r2, r3
 8001210:	2b64      	cmp	r3, #100	; 0x64
 8001212:	d901      	bls.n	8001218 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001214:	2303      	movs	r3, #3
 8001216:	e103      	b.n	8001420 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001218:	4b75      	ldr	r3, [pc, #468]	; (80013f0 <HAL_RCC_OscConfig+0x4c8>)
 800121a:	681b      	ldr	r3, [r3, #0]
 800121c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001220:	2b00      	cmp	r3, #0
 8001222:	d0f0      	beq.n	8001206 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	68db      	ldr	r3, [r3, #12]
 8001228:	2b01      	cmp	r3, #1
 800122a:	d106      	bne.n	800123a <HAL_RCC_OscConfig+0x312>
 800122c:	4b6f      	ldr	r3, [pc, #444]	; (80013ec <HAL_RCC_OscConfig+0x4c4>)
 800122e:	6a1b      	ldr	r3, [r3, #32]
 8001230:	4a6e      	ldr	r2, [pc, #440]	; (80013ec <HAL_RCC_OscConfig+0x4c4>)
 8001232:	f043 0301 	orr.w	r3, r3, #1
 8001236:	6213      	str	r3, [r2, #32]
 8001238:	e02d      	b.n	8001296 <HAL_RCC_OscConfig+0x36e>
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	68db      	ldr	r3, [r3, #12]
 800123e:	2b00      	cmp	r3, #0
 8001240:	d10c      	bne.n	800125c <HAL_RCC_OscConfig+0x334>
 8001242:	4b6a      	ldr	r3, [pc, #424]	; (80013ec <HAL_RCC_OscConfig+0x4c4>)
 8001244:	6a1b      	ldr	r3, [r3, #32]
 8001246:	4a69      	ldr	r2, [pc, #420]	; (80013ec <HAL_RCC_OscConfig+0x4c4>)
 8001248:	f023 0301 	bic.w	r3, r3, #1
 800124c:	6213      	str	r3, [r2, #32]
 800124e:	4b67      	ldr	r3, [pc, #412]	; (80013ec <HAL_RCC_OscConfig+0x4c4>)
 8001250:	6a1b      	ldr	r3, [r3, #32]
 8001252:	4a66      	ldr	r2, [pc, #408]	; (80013ec <HAL_RCC_OscConfig+0x4c4>)
 8001254:	f023 0304 	bic.w	r3, r3, #4
 8001258:	6213      	str	r3, [r2, #32]
 800125a:	e01c      	b.n	8001296 <HAL_RCC_OscConfig+0x36e>
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	68db      	ldr	r3, [r3, #12]
 8001260:	2b05      	cmp	r3, #5
 8001262:	d10c      	bne.n	800127e <HAL_RCC_OscConfig+0x356>
 8001264:	4b61      	ldr	r3, [pc, #388]	; (80013ec <HAL_RCC_OscConfig+0x4c4>)
 8001266:	6a1b      	ldr	r3, [r3, #32]
 8001268:	4a60      	ldr	r2, [pc, #384]	; (80013ec <HAL_RCC_OscConfig+0x4c4>)
 800126a:	f043 0304 	orr.w	r3, r3, #4
 800126e:	6213      	str	r3, [r2, #32]
 8001270:	4b5e      	ldr	r3, [pc, #376]	; (80013ec <HAL_RCC_OscConfig+0x4c4>)
 8001272:	6a1b      	ldr	r3, [r3, #32]
 8001274:	4a5d      	ldr	r2, [pc, #372]	; (80013ec <HAL_RCC_OscConfig+0x4c4>)
 8001276:	f043 0301 	orr.w	r3, r3, #1
 800127a:	6213      	str	r3, [r2, #32]
 800127c:	e00b      	b.n	8001296 <HAL_RCC_OscConfig+0x36e>
 800127e:	4b5b      	ldr	r3, [pc, #364]	; (80013ec <HAL_RCC_OscConfig+0x4c4>)
 8001280:	6a1b      	ldr	r3, [r3, #32]
 8001282:	4a5a      	ldr	r2, [pc, #360]	; (80013ec <HAL_RCC_OscConfig+0x4c4>)
 8001284:	f023 0301 	bic.w	r3, r3, #1
 8001288:	6213      	str	r3, [r2, #32]
 800128a:	4b58      	ldr	r3, [pc, #352]	; (80013ec <HAL_RCC_OscConfig+0x4c4>)
 800128c:	6a1b      	ldr	r3, [r3, #32]
 800128e:	4a57      	ldr	r2, [pc, #348]	; (80013ec <HAL_RCC_OscConfig+0x4c4>)
 8001290:	f023 0304 	bic.w	r3, r3, #4
 8001294:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	68db      	ldr	r3, [r3, #12]
 800129a:	2b00      	cmp	r3, #0
 800129c:	d015      	beq.n	80012ca <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800129e:	f7ff fba7 	bl	80009f0 <HAL_GetTick>
 80012a2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80012a4:	e00a      	b.n	80012bc <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80012a6:	f7ff fba3 	bl	80009f0 <HAL_GetTick>
 80012aa:	4602      	mov	r2, r0
 80012ac:	693b      	ldr	r3, [r7, #16]
 80012ae:	1ad3      	subs	r3, r2, r3
 80012b0:	f241 3288 	movw	r2, #5000	; 0x1388
 80012b4:	4293      	cmp	r3, r2
 80012b6:	d901      	bls.n	80012bc <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80012b8:	2303      	movs	r3, #3
 80012ba:	e0b1      	b.n	8001420 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80012bc:	4b4b      	ldr	r3, [pc, #300]	; (80013ec <HAL_RCC_OscConfig+0x4c4>)
 80012be:	6a1b      	ldr	r3, [r3, #32]
 80012c0:	f003 0302 	and.w	r3, r3, #2
 80012c4:	2b00      	cmp	r3, #0
 80012c6:	d0ee      	beq.n	80012a6 <HAL_RCC_OscConfig+0x37e>
 80012c8:	e014      	b.n	80012f4 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80012ca:	f7ff fb91 	bl	80009f0 <HAL_GetTick>
 80012ce:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80012d0:	e00a      	b.n	80012e8 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80012d2:	f7ff fb8d 	bl	80009f0 <HAL_GetTick>
 80012d6:	4602      	mov	r2, r0
 80012d8:	693b      	ldr	r3, [r7, #16]
 80012da:	1ad3      	subs	r3, r2, r3
 80012dc:	f241 3288 	movw	r2, #5000	; 0x1388
 80012e0:	4293      	cmp	r3, r2
 80012e2:	d901      	bls.n	80012e8 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80012e4:	2303      	movs	r3, #3
 80012e6:	e09b      	b.n	8001420 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80012e8:	4b40      	ldr	r3, [pc, #256]	; (80013ec <HAL_RCC_OscConfig+0x4c4>)
 80012ea:	6a1b      	ldr	r3, [r3, #32]
 80012ec:	f003 0302 	and.w	r3, r3, #2
 80012f0:	2b00      	cmp	r3, #0
 80012f2:	d1ee      	bne.n	80012d2 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80012f4:	7dfb      	ldrb	r3, [r7, #23]
 80012f6:	2b01      	cmp	r3, #1
 80012f8:	d105      	bne.n	8001306 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80012fa:	4b3c      	ldr	r3, [pc, #240]	; (80013ec <HAL_RCC_OscConfig+0x4c4>)
 80012fc:	69db      	ldr	r3, [r3, #28]
 80012fe:	4a3b      	ldr	r2, [pc, #236]	; (80013ec <HAL_RCC_OscConfig+0x4c4>)
 8001300:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001304:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	69db      	ldr	r3, [r3, #28]
 800130a:	2b00      	cmp	r3, #0
 800130c:	f000 8087 	beq.w	800141e <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001310:	4b36      	ldr	r3, [pc, #216]	; (80013ec <HAL_RCC_OscConfig+0x4c4>)
 8001312:	685b      	ldr	r3, [r3, #4]
 8001314:	f003 030c 	and.w	r3, r3, #12
 8001318:	2b08      	cmp	r3, #8
 800131a:	d061      	beq.n	80013e0 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	69db      	ldr	r3, [r3, #28]
 8001320:	2b02      	cmp	r3, #2
 8001322:	d146      	bne.n	80013b2 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001324:	4b33      	ldr	r3, [pc, #204]	; (80013f4 <HAL_RCC_OscConfig+0x4cc>)
 8001326:	2200      	movs	r2, #0
 8001328:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800132a:	f7ff fb61 	bl	80009f0 <HAL_GetTick>
 800132e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001330:	e008      	b.n	8001344 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001332:	f7ff fb5d 	bl	80009f0 <HAL_GetTick>
 8001336:	4602      	mov	r2, r0
 8001338:	693b      	ldr	r3, [r7, #16]
 800133a:	1ad3      	subs	r3, r2, r3
 800133c:	2b02      	cmp	r3, #2
 800133e:	d901      	bls.n	8001344 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001340:	2303      	movs	r3, #3
 8001342:	e06d      	b.n	8001420 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001344:	4b29      	ldr	r3, [pc, #164]	; (80013ec <HAL_RCC_OscConfig+0x4c4>)
 8001346:	681b      	ldr	r3, [r3, #0]
 8001348:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800134c:	2b00      	cmp	r3, #0
 800134e:	d1f0      	bne.n	8001332 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	6a1b      	ldr	r3, [r3, #32]
 8001354:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001358:	d108      	bne.n	800136c <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800135a:	4b24      	ldr	r3, [pc, #144]	; (80013ec <HAL_RCC_OscConfig+0x4c4>)
 800135c:	685b      	ldr	r3, [r3, #4]
 800135e:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	689b      	ldr	r3, [r3, #8]
 8001366:	4921      	ldr	r1, [pc, #132]	; (80013ec <HAL_RCC_OscConfig+0x4c4>)
 8001368:	4313      	orrs	r3, r2
 800136a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800136c:	4b1f      	ldr	r3, [pc, #124]	; (80013ec <HAL_RCC_OscConfig+0x4c4>)
 800136e:	685b      	ldr	r3, [r3, #4]
 8001370:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	6a19      	ldr	r1, [r3, #32]
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800137c:	430b      	orrs	r3, r1
 800137e:	491b      	ldr	r1, [pc, #108]	; (80013ec <HAL_RCC_OscConfig+0x4c4>)
 8001380:	4313      	orrs	r3, r2
 8001382:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001384:	4b1b      	ldr	r3, [pc, #108]	; (80013f4 <HAL_RCC_OscConfig+0x4cc>)
 8001386:	2201      	movs	r2, #1
 8001388:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800138a:	f7ff fb31 	bl	80009f0 <HAL_GetTick>
 800138e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001390:	e008      	b.n	80013a4 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001392:	f7ff fb2d 	bl	80009f0 <HAL_GetTick>
 8001396:	4602      	mov	r2, r0
 8001398:	693b      	ldr	r3, [r7, #16]
 800139a:	1ad3      	subs	r3, r2, r3
 800139c:	2b02      	cmp	r3, #2
 800139e:	d901      	bls.n	80013a4 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80013a0:	2303      	movs	r3, #3
 80013a2:	e03d      	b.n	8001420 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80013a4:	4b11      	ldr	r3, [pc, #68]	; (80013ec <HAL_RCC_OscConfig+0x4c4>)
 80013a6:	681b      	ldr	r3, [r3, #0]
 80013a8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80013ac:	2b00      	cmp	r3, #0
 80013ae:	d0f0      	beq.n	8001392 <HAL_RCC_OscConfig+0x46a>
 80013b0:	e035      	b.n	800141e <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80013b2:	4b10      	ldr	r3, [pc, #64]	; (80013f4 <HAL_RCC_OscConfig+0x4cc>)
 80013b4:	2200      	movs	r2, #0
 80013b6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80013b8:	f7ff fb1a 	bl	80009f0 <HAL_GetTick>
 80013bc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80013be:	e008      	b.n	80013d2 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80013c0:	f7ff fb16 	bl	80009f0 <HAL_GetTick>
 80013c4:	4602      	mov	r2, r0
 80013c6:	693b      	ldr	r3, [r7, #16]
 80013c8:	1ad3      	subs	r3, r2, r3
 80013ca:	2b02      	cmp	r3, #2
 80013cc:	d901      	bls.n	80013d2 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80013ce:	2303      	movs	r3, #3
 80013d0:	e026      	b.n	8001420 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80013d2:	4b06      	ldr	r3, [pc, #24]	; (80013ec <HAL_RCC_OscConfig+0x4c4>)
 80013d4:	681b      	ldr	r3, [r3, #0]
 80013d6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80013da:	2b00      	cmp	r3, #0
 80013dc:	d1f0      	bne.n	80013c0 <HAL_RCC_OscConfig+0x498>
 80013de:	e01e      	b.n	800141e <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	69db      	ldr	r3, [r3, #28]
 80013e4:	2b01      	cmp	r3, #1
 80013e6:	d107      	bne.n	80013f8 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 80013e8:	2301      	movs	r3, #1
 80013ea:	e019      	b.n	8001420 <HAL_RCC_OscConfig+0x4f8>
 80013ec:	40021000 	.word	0x40021000
 80013f0:	40007000 	.word	0x40007000
 80013f4:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80013f8:	4b0b      	ldr	r3, [pc, #44]	; (8001428 <HAL_RCC_OscConfig+0x500>)
 80013fa:	685b      	ldr	r3, [r3, #4]
 80013fc:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80013fe:	68fb      	ldr	r3, [r7, #12]
 8001400:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	6a1b      	ldr	r3, [r3, #32]
 8001408:	429a      	cmp	r2, r3
 800140a:	d106      	bne.n	800141a <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 800140c:	68fb      	ldr	r3, [r7, #12]
 800140e:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001416:	429a      	cmp	r2, r3
 8001418:	d001      	beq.n	800141e <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 800141a:	2301      	movs	r3, #1
 800141c:	e000      	b.n	8001420 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 800141e:	2300      	movs	r3, #0
}
 8001420:	4618      	mov	r0, r3
 8001422:	3718      	adds	r7, #24
 8001424:	46bd      	mov	sp, r7
 8001426:	bd80      	pop	{r7, pc}
 8001428:	40021000 	.word	0x40021000

0800142c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800142c:	b580      	push	{r7, lr}
 800142e:	b084      	sub	sp, #16
 8001430:	af00      	add	r7, sp, #0
 8001432:	6078      	str	r0, [r7, #4]
 8001434:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	2b00      	cmp	r3, #0
 800143a:	d101      	bne.n	8001440 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800143c:	2301      	movs	r3, #1
 800143e:	e0d0      	b.n	80015e2 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001440:	4b6a      	ldr	r3, [pc, #424]	; (80015ec <HAL_RCC_ClockConfig+0x1c0>)
 8001442:	681b      	ldr	r3, [r3, #0]
 8001444:	f003 0307 	and.w	r3, r3, #7
 8001448:	683a      	ldr	r2, [r7, #0]
 800144a:	429a      	cmp	r2, r3
 800144c:	d910      	bls.n	8001470 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800144e:	4b67      	ldr	r3, [pc, #412]	; (80015ec <HAL_RCC_ClockConfig+0x1c0>)
 8001450:	681b      	ldr	r3, [r3, #0]
 8001452:	f023 0207 	bic.w	r2, r3, #7
 8001456:	4965      	ldr	r1, [pc, #404]	; (80015ec <HAL_RCC_ClockConfig+0x1c0>)
 8001458:	683b      	ldr	r3, [r7, #0]
 800145a:	4313      	orrs	r3, r2
 800145c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800145e:	4b63      	ldr	r3, [pc, #396]	; (80015ec <HAL_RCC_ClockConfig+0x1c0>)
 8001460:	681b      	ldr	r3, [r3, #0]
 8001462:	f003 0307 	and.w	r3, r3, #7
 8001466:	683a      	ldr	r2, [r7, #0]
 8001468:	429a      	cmp	r2, r3
 800146a:	d001      	beq.n	8001470 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 800146c:	2301      	movs	r3, #1
 800146e:	e0b8      	b.n	80015e2 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	681b      	ldr	r3, [r3, #0]
 8001474:	f003 0302 	and.w	r3, r3, #2
 8001478:	2b00      	cmp	r3, #0
 800147a:	d020      	beq.n	80014be <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	681b      	ldr	r3, [r3, #0]
 8001480:	f003 0304 	and.w	r3, r3, #4
 8001484:	2b00      	cmp	r3, #0
 8001486:	d005      	beq.n	8001494 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001488:	4b59      	ldr	r3, [pc, #356]	; (80015f0 <HAL_RCC_ClockConfig+0x1c4>)
 800148a:	685b      	ldr	r3, [r3, #4]
 800148c:	4a58      	ldr	r2, [pc, #352]	; (80015f0 <HAL_RCC_ClockConfig+0x1c4>)
 800148e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001492:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	681b      	ldr	r3, [r3, #0]
 8001498:	f003 0308 	and.w	r3, r3, #8
 800149c:	2b00      	cmp	r3, #0
 800149e:	d005      	beq.n	80014ac <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80014a0:	4b53      	ldr	r3, [pc, #332]	; (80015f0 <HAL_RCC_ClockConfig+0x1c4>)
 80014a2:	685b      	ldr	r3, [r3, #4]
 80014a4:	4a52      	ldr	r2, [pc, #328]	; (80015f0 <HAL_RCC_ClockConfig+0x1c4>)
 80014a6:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80014aa:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80014ac:	4b50      	ldr	r3, [pc, #320]	; (80015f0 <HAL_RCC_ClockConfig+0x1c4>)
 80014ae:	685b      	ldr	r3, [r3, #4]
 80014b0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	689b      	ldr	r3, [r3, #8]
 80014b8:	494d      	ldr	r1, [pc, #308]	; (80015f0 <HAL_RCC_ClockConfig+0x1c4>)
 80014ba:	4313      	orrs	r3, r2
 80014bc:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	681b      	ldr	r3, [r3, #0]
 80014c2:	f003 0301 	and.w	r3, r3, #1
 80014c6:	2b00      	cmp	r3, #0
 80014c8:	d040      	beq.n	800154c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	685b      	ldr	r3, [r3, #4]
 80014ce:	2b01      	cmp	r3, #1
 80014d0:	d107      	bne.n	80014e2 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80014d2:	4b47      	ldr	r3, [pc, #284]	; (80015f0 <HAL_RCC_ClockConfig+0x1c4>)
 80014d4:	681b      	ldr	r3, [r3, #0]
 80014d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80014da:	2b00      	cmp	r3, #0
 80014dc:	d115      	bne.n	800150a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80014de:	2301      	movs	r3, #1
 80014e0:	e07f      	b.n	80015e2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	685b      	ldr	r3, [r3, #4]
 80014e6:	2b02      	cmp	r3, #2
 80014e8:	d107      	bne.n	80014fa <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80014ea:	4b41      	ldr	r3, [pc, #260]	; (80015f0 <HAL_RCC_ClockConfig+0x1c4>)
 80014ec:	681b      	ldr	r3, [r3, #0]
 80014ee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80014f2:	2b00      	cmp	r3, #0
 80014f4:	d109      	bne.n	800150a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80014f6:	2301      	movs	r3, #1
 80014f8:	e073      	b.n	80015e2 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80014fa:	4b3d      	ldr	r3, [pc, #244]	; (80015f0 <HAL_RCC_ClockConfig+0x1c4>)
 80014fc:	681b      	ldr	r3, [r3, #0]
 80014fe:	f003 0302 	and.w	r3, r3, #2
 8001502:	2b00      	cmp	r3, #0
 8001504:	d101      	bne.n	800150a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001506:	2301      	movs	r3, #1
 8001508:	e06b      	b.n	80015e2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800150a:	4b39      	ldr	r3, [pc, #228]	; (80015f0 <HAL_RCC_ClockConfig+0x1c4>)
 800150c:	685b      	ldr	r3, [r3, #4]
 800150e:	f023 0203 	bic.w	r2, r3, #3
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	685b      	ldr	r3, [r3, #4]
 8001516:	4936      	ldr	r1, [pc, #216]	; (80015f0 <HAL_RCC_ClockConfig+0x1c4>)
 8001518:	4313      	orrs	r3, r2
 800151a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800151c:	f7ff fa68 	bl	80009f0 <HAL_GetTick>
 8001520:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001522:	e00a      	b.n	800153a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001524:	f7ff fa64 	bl	80009f0 <HAL_GetTick>
 8001528:	4602      	mov	r2, r0
 800152a:	68fb      	ldr	r3, [r7, #12]
 800152c:	1ad3      	subs	r3, r2, r3
 800152e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001532:	4293      	cmp	r3, r2
 8001534:	d901      	bls.n	800153a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001536:	2303      	movs	r3, #3
 8001538:	e053      	b.n	80015e2 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800153a:	4b2d      	ldr	r3, [pc, #180]	; (80015f0 <HAL_RCC_ClockConfig+0x1c4>)
 800153c:	685b      	ldr	r3, [r3, #4]
 800153e:	f003 020c 	and.w	r2, r3, #12
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	685b      	ldr	r3, [r3, #4]
 8001546:	009b      	lsls	r3, r3, #2
 8001548:	429a      	cmp	r2, r3
 800154a:	d1eb      	bne.n	8001524 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800154c:	4b27      	ldr	r3, [pc, #156]	; (80015ec <HAL_RCC_ClockConfig+0x1c0>)
 800154e:	681b      	ldr	r3, [r3, #0]
 8001550:	f003 0307 	and.w	r3, r3, #7
 8001554:	683a      	ldr	r2, [r7, #0]
 8001556:	429a      	cmp	r2, r3
 8001558:	d210      	bcs.n	800157c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800155a:	4b24      	ldr	r3, [pc, #144]	; (80015ec <HAL_RCC_ClockConfig+0x1c0>)
 800155c:	681b      	ldr	r3, [r3, #0]
 800155e:	f023 0207 	bic.w	r2, r3, #7
 8001562:	4922      	ldr	r1, [pc, #136]	; (80015ec <HAL_RCC_ClockConfig+0x1c0>)
 8001564:	683b      	ldr	r3, [r7, #0]
 8001566:	4313      	orrs	r3, r2
 8001568:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800156a:	4b20      	ldr	r3, [pc, #128]	; (80015ec <HAL_RCC_ClockConfig+0x1c0>)
 800156c:	681b      	ldr	r3, [r3, #0]
 800156e:	f003 0307 	and.w	r3, r3, #7
 8001572:	683a      	ldr	r2, [r7, #0]
 8001574:	429a      	cmp	r2, r3
 8001576:	d001      	beq.n	800157c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001578:	2301      	movs	r3, #1
 800157a:	e032      	b.n	80015e2 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	681b      	ldr	r3, [r3, #0]
 8001580:	f003 0304 	and.w	r3, r3, #4
 8001584:	2b00      	cmp	r3, #0
 8001586:	d008      	beq.n	800159a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001588:	4b19      	ldr	r3, [pc, #100]	; (80015f0 <HAL_RCC_ClockConfig+0x1c4>)
 800158a:	685b      	ldr	r3, [r3, #4]
 800158c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	68db      	ldr	r3, [r3, #12]
 8001594:	4916      	ldr	r1, [pc, #88]	; (80015f0 <HAL_RCC_ClockConfig+0x1c4>)
 8001596:	4313      	orrs	r3, r2
 8001598:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	681b      	ldr	r3, [r3, #0]
 800159e:	f003 0308 	and.w	r3, r3, #8
 80015a2:	2b00      	cmp	r3, #0
 80015a4:	d009      	beq.n	80015ba <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80015a6:	4b12      	ldr	r3, [pc, #72]	; (80015f0 <HAL_RCC_ClockConfig+0x1c4>)
 80015a8:	685b      	ldr	r3, [r3, #4]
 80015aa:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	691b      	ldr	r3, [r3, #16]
 80015b2:	00db      	lsls	r3, r3, #3
 80015b4:	490e      	ldr	r1, [pc, #56]	; (80015f0 <HAL_RCC_ClockConfig+0x1c4>)
 80015b6:	4313      	orrs	r3, r2
 80015b8:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80015ba:	f000 f821 	bl	8001600 <HAL_RCC_GetSysClockFreq>
 80015be:	4602      	mov	r2, r0
 80015c0:	4b0b      	ldr	r3, [pc, #44]	; (80015f0 <HAL_RCC_ClockConfig+0x1c4>)
 80015c2:	685b      	ldr	r3, [r3, #4]
 80015c4:	091b      	lsrs	r3, r3, #4
 80015c6:	f003 030f 	and.w	r3, r3, #15
 80015ca:	490a      	ldr	r1, [pc, #40]	; (80015f4 <HAL_RCC_ClockConfig+0x1c8>)
 80015cc:	5ccb      	ldrb	r3, [r1, r3]
 80015ce:	fa22 f303 	lsr.w	r3, r2, r3
 80015d2:	4a09      	ldr	r2, [pc, #36]	; (80015f8 <HAL_RCC_ClockConfig+0x1cc>)
 80015d4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80015d6:	4b09      	ldr	r3, [pc, #36]	; (80015fc <HAL_RCC_ClockConfig+0x1d0>)
 80015d8:	681b      	ldr	r3, [r3, #0]
 80015da:	4618      	mov	r0, r3
 80015dc:	f7ff f9c6 	bl	800096c <HAL_InitTick>

  return HAL_OK;
 80015e0:	2300      	movs	r3, #0
}
 80015e2:	4618      	mov	r0, r3
 80015e4:	3710      	adds	r7, #16
 80015e6:	46bd      	mov	sp, r7
 80015e8:	bd80      	pop	{r7, pc}
 80015ea:	bf00      	nop
 80015ec:	40022000 	.word	0x40022000
 80015f0:	40021000 	.word	0x40021000
 80015f4:	080024b0 	.word	0x080024b0
 80015f8:	20000010 	.word	0x20000010
 80015fc:	20000014 	.word	0x20000014

08001600 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001600:	b480      	push	{r7}
 8001602:	b087      	sub	sp, #28
 8001604:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001606:	2300      	movs	r3, #0
 8001608:	60fb      	str	r3, [r7, #12]
 800160a:	2300      	movs	r3, #0
 800160c:	60bb      	str	r3, [r7, #8]
 800160e:	2300      	movs	r3, #0
 8001610:	617b      	str	r3, [r7, #20]
 8001612:	2300      	movs	r3, #0
 8001614:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8001616:	2300      	movs	r3, #0
 8001618:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800161a:	4b1e      	ldr	r3, [pc, #120]	; (8001694 <HAL_RCC_GetSysClockFreq+0x94>)
 800161c:	685b      	ldr	r3, [r3, #4]
 800161e:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001620:	68fb      	ldr	r3, [r7, #12]
 8001622:	f003 030c 	and.w	r3, r3, #12
 8001626:	2b04      	cmp	r3, #4
 8001628:	d002      	beq.n	8001630 <HAL_RCC_GetSysClockFreq+0x30>
 800162a:	2b08      	cmp	r3, #8
 800162c:	d003      	beq.n	8001636 <HAL_RCC_GetSysClockFreq+0x36>
 800162e:	e027      	b.n	8001680 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001630:	4b19      	ldr	r3, [pc, #100]	; (8001698 <HAL_RCC_GetSysClockFreq+0x98>)
 8001632:	613b      	str	r3, [r7, #16]
      break;
 8001634:	e027      	b.n	8001686 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001636:	68fb      	ldr	r3, [r7, #12]
 8001638:	0c9b      	lsrs	r3, r3, #18
 800163a:	f003 030f 	and.w	r3, r3, #15
 800163e:	4a17      	ldr	r2, [pc, #92]	; (800169c <HAL_RCC_GetSysClockFreq+0x9c>)
 8001640:	5cd3      	ldrb	r3, [r2, r3]
 8001642:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001644:	68fb      	ldr	r3, [r7, #12]
 8001646:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800164a:	2b00      	cmp	r3, #0
 800164c:	d010      	beq.n	8001670 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800164e:	4b11      	ldr	r3, [pc, #68]	; (8001694 <HAL_RCC_GetSysClockFreq+0x94>)
 8001650:	685b      	ldr	r3, [r3, #4]
 8001652:	0c5b      	lsrs	r3, r3, #17
 8001654:	f003 0301 	and.w	r3, r3, #1
 8001658:	4a11      	ldr	r2, [pc, #68]	; (80016a0 <HAL_RCC_GetSysClockFreq+0xa0>)
 800165a:	5cd3      	ldrb	r3, [r2, r3]
 800165c:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	4a0d      	ldr	r2, [pc, #52]	; (8001698 <HAL_RCC_GetSysClockFreq+0x98>)
 8001662:	fb03 f202 	mul.w	r2, r3, r2
 8001666:	68bb      	ldr	r3, [r7, #8]
 8001668:	fbb2 f3f3 	udiv	r3, r2, r3
 800166c:	617b      	str	r3, [r7, #20]
 800166e:	e004      	b.n	800167a <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	4a0c      	ldr	r2, [pc, #48]	; (80016a4 <HAL_RCC_GetSysClockFreq+0xa4>)
 8001674:	fb02 f303 	mul.w	r3, r2, r3
 8001678:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 800167a:	697b      	ldr	r3, [r7, #20]
 800167c:	613b      	str	r3, [r7, #16]
      break;
 800167e:	e002      	b.n	8001686 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001680:	4b09      	ldr	r3, [pc, #36]	; (80016a8 <HAL_RCC_GetSysClockFreq+0xa8>)
 8001682:	613b      	str	r3, [r7, #16]
      break;
 8001684:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001686:	693b      	ldr	r3, [r7, #16]
}
 8001688:	4618      	mov	r0, r3
 800168a:	371c      	adds	r7, #28
 800168c:	46bd      	mov	sp, r7
 800168e:	bc80      	pop	{r7}
 8001690:	4770      	bx	lr
 8001692:	bf00      	nop
 8001694:	40021000 	.word	0x40021000
 8001698:	00f42400 	.word	0x00f42400
 800169c:	080024c0 	.word	0x080024c0
 80016a0:	080024d0 	.word	0x080024d0
 80016a4:	003d0900 	.word	0x003d0900
 80016a8:	007a1200 	.word	0x007a1200

080016ac <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80016ac:	b480      	push	{r7}
 80016ae:	b085      	sub	sp, #20
 80016b0:	af00      	add	r7, sp, #0
 80016b2:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80016b4:	4b0a      	ldr	r3, [pc, #40]	; (80016e0 <RCC_Delay+0x34>)
 80016b6:	681b      	ldr	r3, [r3, #0]
 80016b8:	4a0a      	ldr	r2, [pc, #40]	; (80016e4 <RCC_Delay+0x38>)
 80016ba:	fba2 2303 	umull	r2, r3, r2, r3
 80016be:	0a5b      	lsrs	r3, r3, #9
 80016c0:	687a      	ldr	r2, [r7, #4]
 80016c2:	fb02 f303 	mul.w	r3, r2, r3
 80016c6:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80016c8:	bf00      	nop
  }
  while (Delay --);
 80016ca:	68fb      	ldr	r3, [r7, #12]
 80016cc:	1e5a      	subs	r2, r3, #1
 80016ce:	60fa      	str	r2, [r7, #12]
 80016d0:	2b00      	cmp	r3, #0
 80016d2:	d1f9      	bne.n	80016c8 <RCC_Delay+0x1c>
}
 80016d4:	bf00      	nop
 80016d6:	bf00      	nop
 80016d8:	3714      	adds	r7, #20
 80016da:	46bd      	mov	sp, r7
 80016dc:	bc80      	pop	{r7}
 80016de:	4770      	bx	lr
 80016e0:	20000010 	.word	0x20000010
 80016e4:	10624dd3 	.word	0x10624dd3

080016e8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80016e8:	b580      	push	{r7, lr}
 80016ea:	b082      	sub	sp, #8
 80016ec:	af00      	add	r7, sp, #0
 80016ee:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	2b00      	cmp	r3, #0
 80016f4:	d101      	bne.n	80016fa <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80016f6:	2301      	movs	r3, #1
 80016f8:	e041      	b.n	800177e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001700:	b2db      	uxtb	r3, r3
 8001702:	2b00      	cmp	r3, #0
 8001704:	d106      	bne.n	8001714 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	2200      	movs	r2, #0
 800170a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800170e:	6878      	ldr	r0, [r7, #4]
 8001710:	f7ff f830 	bl	8000774 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	2202      	movs	r2, #2
 8001718:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	681a      	ldr	r2, [r3, #0]
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	3304      	adds	r3, #4
 8001724:	4619      	mov	r1, r3
 8001726:	4610      	mov	r0, r2
 8001728:	f000 fa9e 	bl	8001c68 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	2201      	movs	r2, #1
 8001730:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	2201      	movs	r2, #1
 8001738:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	2201      	movs	r2, #1
 8001740:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	2201      	movs	r2, #1
 8001748:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	2201      	movs	r2, #1
 8001750:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	2201      	movs	r2, #1
 8001758:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	2201      	movs	r2, #1
 8001760:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	2201      	movs	r2, #1
 8001768:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	2201      	movs	r2, #1
 8001770:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	2201      	movs	r2, #1
 8001778:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800177c:	2300      	movs	r3, #0
}
 800177e:	4618      	mov	r0, r3
 8001780:	3708      	adds	r7, #8
 8001782:	46bd      	mov	sp, r7
 8001784:	bd80      	pop	{r7, pc}

08001786 <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 8001786:	b580      	push	{r7, lr}
 8001788:	b082      	sub	sp, #8
 800178a:	af00      	add	r7, sp, #0
 800178c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	2b00      	cmp	r3, #0
 8001792:	d101      	bne.n	8001798 <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 8001794:	2301      	movs	r3, #1
 8001796:	e041      	b.n	800181c <HAL_TIM_OC_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800179e:	b2db      	uxtb	r3, r3
 80017a0:	2b00      	cmp	r3, #0
 80017a2:	d106      	bne.n	80017b2 <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	2200      	movs	r2, #0
 80017a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 80017ac:	6878      	ldr	r0, [r7, #4]
 80017ae:	f000 f839 	bl	8001824 <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	2202      	movs	r2, #2
 80017b6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	681a      	ldr	r2, [r3, #0]
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	3304      	adds	r3, #4
 80017c2:	4619      	mov	r1, r3
 80017c4:	4610      	mov	r0, r2
 80017c6:	f000 fa4f 	bl	8001c68 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	2201      	movs	r2, #1
 80017ce:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	2201      	movs	r2, #1
 80017d6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	2201      	movs	r2, #1
 80017de:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	2201      	movs	r2, #1
 80017e6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	2201      	movs	r2, #1
 80017ee:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	2201      	movs	r2, #1
 80017f6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	2201      	movs	r2, #1
 80017fe:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	2201      	movs	r2, #1
 8001806:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	2201      	movs	r2, #1
 800180e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	2201      	movs	r2, #1
 8001816:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800181a:	2300      	movs	r3, #0
}
 800181c:	4618      	mov	r0, r3
 800181e:	3708      	adds	r7, #8
 8001820:	46bd      	mov	sp, r7
 8001822:	bd80      	pop	{r7, pc}

08001824 <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 8001824:	b480      	push	{r7}
 8001826:	b083      	sub	sp, #12
 8001828:	af00      	add	r7, sp, #0
 800182a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 800182c:	bf00      	nop
 800182e:	370c      	adds	r7, #12
 8001830:	46bd      	mov	sp, r7
 8001832:	bc80      	pop	{r7}
 8001834:	4770      	bx	lr

08001836 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8001836:	b580      	push	{r7, lr}
 8001838:	b082      	sub	sp, #8
 800183a:	af00      	add	r7, sp, #0
 800183c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	2b00      	cmp	r3, #0
 8001842:	d101      	bne.n	8001848 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8001844:	2301      	movs	r3, #1
 8001846:	e041      	b.n	80018cc <HAL_TIM_IC_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800184e:	b2db      	uxtb	r3, r3
 8001850:	2b00      	cmp	r3, #0
 8001852:	d106      	bne.n	8001862 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	2200      	movs	r2, #0
 8001858:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 800185c:	6878      	ldr	r0, [r7, #4]
 800185e:	f000 f839 	bl	80018d4 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	2202      	movs	r2, #2
 8001866:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	681a      	ldr	r2, [r3, #0]
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	3304      	adds	r3, #4
 8001872:	4619      	mov	r1, r3
 8001874:	4610      	mov	r0, r2
 8001876:	f000 f9f7 	bl	8001c68 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	2201      	movs	r2, #1
 800187e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	2201      	movs	r2, #1
 8001886:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	2201      	movs	r2, #1
 800188e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	2201      	movs	r2, #1
 8001896:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	2201      	movs	r2, #1
 800189e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	2201      	movs	r2, #1
 80018a6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	2201      	movs	r2, #1
 80018ae:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	2201      	movs	r2, #1
 80018b6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	2201      	movs	r2, #1
 80018be:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	2201      	movs	r2, #1
 80018c6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80018ca:	2300      	movs	r3, #0
}
 80018cc:	4618      	mov	r0, r3
 80018ce:	3708      	adds	r7, #8
 80018d0:	46bd      	mov	sp, r7
 80018d2:	bd80      	pop	{r7, pc}

080018d4 <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 80018d4:	b480      	push	{r7}
 80018d6:	b083      	sub	sp, #12
 80018d8:	af00      	add	r7, sp, #0
 80018da:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 80018dc:	bf00      	nop
 80018de:	370c      	adds	r7, #12
 80018e0:	46bd      	mov	sp, r7
 80018e2:	bc80      	pop	{r7}
 80018e4:	4770      	bx	lr
	...

080018e8 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           const TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 80018e8:	b580      	push	{r7, lr}
 80018ea:	b086      	sub	sp, #24
 80018ec:	af00      	add	r7, sp, #0
 80018ee:	60f8      	str	r0, [r7, #12]
 80018f0:	60b9      	str	r1, [r7, #8]
 80018f2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80018f4:	2300      	movs	r3, #0
 80018f6:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 80018f8:	68fb      	ldr	r3, [r7, #12]
 80018fa:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80018fe:	2b01      	cmp	r3, #1
 8001900:	d101      	bne.n	8001906 <HAL_TIM_OC_ConfigChannel+0x1e>
 8001902:	2302      	movs	r3, #2
 8001904:	e048      	b.n	8001998 <HAL_TIM_OC_ConfigChannel+0xb0>
 8001906:	68fb      	ldr	r3, [r7, #12]
 8001908:	2201      	movs	r2, #1
 800190a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	2b0c      	cmp	r3, #12
 8001912:	d839      	bhi.n	8001988 <HAL_TIM_OC_ConfigChannel+0xa0>
 8001914:	a201      	add	r2, pc, #4	; (adr r2, 800191c <HAL_TIM_OC_ConfigChannel+0x34>)
 8001916:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800191a:	bf00      	nop
 800191c:	08001951 	.word	0x08001951
 8001920:	08001989 	.word	0x08001989
 8001924:	08001989 	.word	0x08001989
 8001928:	08001989 	.word	0x08001989
 800192c:	0800195f 	.word	0x0800195f
 8001930:	08001989 	.word	0x08001989
 8001934:	08001989 	.word	0x08001989
 8001938:	08001989 	.word	0x08001989
 800193c:	0800196d 	.word	0x0800196d
 8001940:	08001989 	.word	0x08001989
 8001944:	08001989 	.word	0x08001989
 8001948:	08001989 	.word	0x08001989
 800194c:	0800197b 	.word	0x0800197b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8001950:	68fb      	ldr	r3, [r7, #12]
 8001952:	681b      	ldr	r3, [r3, #0]
 8001954:	68b9      	ldr	r1, [r7, #8]
 8001956:	4618      	mov	r0, r3
 8001958:	f000 f9e8 	bl	8001d2c <TIM_OC1_SetConfig>
      break;
 800195c:	e017      	b.n	800198e <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800195e:	68fb      	ldr	r3, [r7, #12]
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	68b9      	ldr	r1, [r7, #8]
 8001964:	4618      	mov	r0, r3
 8001966:	f000 fa47 	bl	8001df8 <TIM_OC2_SetConfig>
      break;
 800196a:	e010      	b.n	800198e <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800196c:	68fb      	ldr	r3, [r7, #12]
 800196e:	681b      	ldr	r3, [r3, #0]
 8001970:	68b9      	ldr	r1, [r7, #8]
 8001972:	4618      	mov	r0, r3
 8001974:	f000 faaa 	bl	8001ecc <TIM_OC3_SetConfig>
      break;
 8001978:	e009      	b.n	800198e <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800197a:	68fb      	ldr	r3, [r7, #12]
 800197c:	681b      	ldr	r3, [r3, #0]
 800197e:	68b9      	ldr	r1, [r7, #8]
 8001980:	4618      	mov	r0, r3
 8001982:	f000 fb0d 	bl	8001fa0 <TIM_OC4_SetConfig>
      break;
 8001986:	e002      	b.n	800198e <HAL_TIM_OC_ConfigChannel+0xa6>
    }

    default:
      status = HAL_ERROR;
 8001988:	2301      	movs	r3, #1
 800198a:	75fb      	strb	r3, [r7, #23]
      break;
 800198c:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800198e:	68fb      	ldr	r3, [r7, #12]
 8001990:	2200      	movs	r2, #0
 8001992:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8001996:	7dfb      	ldrb	r3, [r7, #23]
}
 8001998:	4618      	mov	r0, r3
 800199a:	3718      	adds	r7, #24
 800199c:	46bd      	mov	sp, r7
 800199e:	bd80      	pop	{r7, pc}

080019a0 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, const TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 80019a0:	b580      	push	{r7, lr}
 80019a2:	b086      	sub	sp, #24
 80019a4:	af00      	add	r7, sp, #0
 80019a6:	60f8      	str	r0, [r7, #12]
 80019a8:	60b9      	str	r1, [r7, #8]
 80019aa:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80019ac:	2300      	movs	r3, #0
 80019ae:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 80019b0:	68fb      	ldr	r3, [r7, #12]
 80019b2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80019b6:	2b01      	cmp	r3, #1
 80019b8:	d101      	bne.n	80019be <HAL_TIM_IC_ConfigChannel+0x1e>
 80019ba:	2302      	movs	r3, #2
 80019bc:	e088      	b.n	8001ad0 <HAL_TIM_IC_ConfigChannel+0x130>
 80019be:	68fb      	ldr	r3, [r7, #12]
 80019c0:	2201      	movs	r2, #1
 80019c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	2b00      	cmp	r3, #0
 80019ca:	d11b      	bne.n	8001a04 <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 80019cc:	68fb      	ldr	r3, [r7, #12]
 80019ce:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 80019d0:	68bb      	ldr	r3, [r7, #8]
 80019d2:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 80019d4:	68bb      	ldr	r3, [r7, #8]
 80019d6:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 80019d8:	68bb      	ldr	r3, [r7, #8]
 80019da:	68db      	ldr	r3, [r3, #12]
    TIM_TI1_SetConfig(htim->Instance,
 80019dc:	f000 fb2e 	bl	800203c <TIM_TI1_SetConfig>

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 80019e0:	68fb      	ldr	r3, [r7, #12]
 80019e2:	681b      	ldr	r3, [r3, #0]
 80019e4:	699a      	ldr	r2, [r3, #24]
 80019e6:	68fb      	ldr	r3, [r7, #12]
 80019e8:	681b      	ldr	r3, [r3, #0]
 80019ea:	f022 020c 	bic.w	r2, r2, #12
 80019ee:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 80019f0:	68fb      	ldr	r3, [r7, #12]
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	6999      	ldr	r1, [r3, #24]
 80019f6:	68bb      	ldr	r3, [r7, #8]
 80019f8:	689a      	ldr	r2, [r3, #8]
 80019fa:	68fb      	ldr	r3, [r7, #12]
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	430a      	orrs	r2, r1
 8001a00:	619a      	str	r2, [r3, #24]
 8001a02:	e060      	b.n	8001ac6 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	2b04      	cmp	r3, #4
 8001a08:	d11c      	bne.n	8001a44 <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8001a0a:	68fb      	ldr	r3, [r7, #12]
 8001a0c:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8001a0e:	68bb      	ldr	r3, [r7, #8]
 8001a10:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8001a12:	68bb      	ldr	r3, [r7, #8]
 8001a14:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8001a16:	68bb      	ldr	r3, [r7, #8]
 8001a18:	68db      	ldr	r3, [r3, #12]
    TIM_TI2_SetConfig(htim->Instance,
 8001a1a:	f000 fb97 	bl	800214c <TIM_TI2_SetConfig>

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8001a1e:	68fb      	ldr	r3, [r7, #12]
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	699a      	ldr	r2, [r3, #24]
 8001a24:	68fb      	ldr	r3, [r7, #12]
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8001a2c:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8001a2e:	68fb      	ldr	r3, [r7, #12]
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	6999      	ldr	r1, [r3, #24]
 8001a34:	68bb      	ldr	r3, [r7, #8]
 8001a36:	689b      	ldr	r3, [r3, #8]
 8001a38:	021a      	lsls	r2, r3, #8
 8001a3a:	68fb      	ldr	r3, [r7, #12]
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	430a      	orrs	r2, r1
 8001a40:	619a      	str	r2, [r3, #24]
 8001a42:	e040      	b.n	8001ac6 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	2b08      	cmp	r3, #8
 8001a48:	d11b      	bne.n	8001a82 <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8001a4a:	68fb      	ldr	r3, [r7, #12]
 8001a4c:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8001a4e:	68bb      	ldr	r3, [r7, #8]
 8001a50:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8001a52:	68bb      	ldr	r3, [r7, #8]
 8001a54:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8001a56:	68bb      	ldr	r3, [r7, #8]
 8001a58:	68db      	ldr	r3, [r3, #12]
    TIM_TI3_SetConfig(htim->Instance,
 8001a5a:	f000 fbe2 	bl	8002222 <TIM_TI3_SetConfig>

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8001a5e:	68fb      	ldr	r3, [r7, #12]
 8001a60:	681b      	ldr	r3, [r3, #0]
 8001a62:	69da      	ldr	r2, [r3, #28]
 8001a64:	68fb      	ldr	r3, [r7, #12]
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	f022 020c 	bic.w	r2, r2, #12
 8001a6c:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8001a6e:	68fb      	ldr	r3, [r7, #12]
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	69d9      	ldr	r1, [r3, #28]
 8001a74:	68bb      	ldr	r3, [r7, #8]
 8001a76:	689a      	ldr	r2, [r3, #8]
 8001a78:	68fb      	ldr	r3, [r7, #12]
 8001a7a:	681b      	ldr	r3, [r3, #0]
 8001a7c:	430a      	orrs	r2, r1
 8001a7e:	61da      	str	r2, [r3, #28]
 8001a80:	e021      	b.n	8001ac6 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	2b0c      	cmp	r3, #12
 8001a86:	d11c      	bne.n	8001ac2 <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8001a88:	68fb      	ldr	r3, [r7, #12]
 8001a8a:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8001a8c:	68bb      	ldr	r3, [r7, #8]
 8001a8e:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8001a90:	68bb      	ldr	r3, [r7, #8]
 8001a92:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8001a94:	68bb      	ldr	r3, [r7, #8]
 8001a96:	68db      	ldr	r3, [r3, #12]
    TIM_TI4_SetConfig(htim->Instance,
 8001a98:	f000 fbfe 	bl	8002298 <TIM_TI4_SetConfig>

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8001a9c:	68fb      	ldr	r3, [r7, #12]
 8001a9e:	681b      	ldr	r3, [r3, #0]
 8001aa0:	69da      	ldr	r2, [r3, #28]
 8001aa2:	68fb      	ldr	r3, [r7, #12]
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8001aaa:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8001aac:	68fb      	ldr	r3, [r7, #12]
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	69d9      	ldr	r1, [r3, #28]
 8001ab2:	68bb      	ldr	r3, [r7, #8]
 8001ab4:	689b      	ldr	r3, [r3, #8]
 8001ab6:	021a      	lsls	r2, r3, #8
 8001ab8:	68fb      	ldr	r3, [r7, #12]
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	430a      	orrs	r2, r1
 8001abe:	61da      	str	r2, [r3, #28]
 8001ac0:	e001      	b.n	8001ac6 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 8001ac2:	2301      	movs	r3, #1
 8001ac4:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 8001ac6:	68fb      	ldr	r3, [r7, #12]
 8001ac8:	2200      	movs	r2, #0
 8001aca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8001ace:	7dfb      	ldrb	r3, [r7, #23]
}
 8001ad0:	4618      	mov	r0, r3
 8001ad2:	3718      	adds	r7, #24
 8001ad4:	46bd      	mov	sp, r7
 8001ad6:	bd80      	pop	{r7, pc}

08001ad8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8001ad8:	b580      	push	{r7, lr}
 8001ada:	b084      	sub	sp, #16
 8001adc:	af00      	add	r7, sp, #0
 8001ade:	6078      	str	r0, [r7, #4]
 8001ae0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001ae2:	2300      	movs	r3, #0
 8001ae4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001aec:	2b01      	cmp	r3, #1
 8001aee:	d101      	bne.n	8001af4 <HAL_TIM_ConfigClockSource+0x1c>
 8001af0:	2302      	movs	r3, #2
 8001af2:	e0b4      	b.n	8001c5e <HAL_TIM_ConfigClockSource+0x186>
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	2201      	movs	r2, #1
 8001af8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	2202      	movs	r2, #2
 8001b00:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	689b      	ldr	r3, [r3, #8]
 8001b0a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8001b0c:	68bb      	ldr	r3, [r7, #8]
 8001b0e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8001b12:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8001b14:	68bb      	ldr	r3, [r7, #8]
 8001b16:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8001b1a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	68ba      	ldr	r2, [r7, #8]
 8001b22:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8001b24:	683b      	ldr	r3, [r7, #0]
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001b2c:	d03e      	beq.n	8001bac <HAL_TIM_ConfigClockSource+0xd4>
 8001b2e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001b32:	f200 8087 	bhi.w	8001c44 <HAL_TIM_ConfigClockSource+0x16c>
 8001b36:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001b3a:	f000 8086 	beq.w	8001c4a <HAL_TIM_ConfigClockSource+0x172>
 8001b3e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001b42:	d87f      	bhi.n	8001c44 <HAL_TIM_ConfigClockSource+0x16c>
 8001b44:	2b70      	cmp	r3, #112	; 0x70
 8001b46:	d01a      	beq.n	8001b7e <HAL_TIM_ConfigClockSource+0xa6>
 8001b48:	2b70      	cmp	r3, #112	; 0x70
 8001b4a:	d87b      	bhi.n	8001c44 <HAL_TIM_ConfigClockSource+0x16c>
 8001b4c:	2b60      	cmp	r3, #96	; 0x60
 8001b4e:	d050      	beq.n	8001bf2 <HAL_TIM_ConfigClockSource+0x11a>
 8001b50:	2b60      	cmp	r3, #96	; 0x60
 8001b52:	d877      	bhi.n	8001c44 <HAL_TIM_ConfigClockSource+0x16c>
 8001b54:	2b50      	cmp	r3, #80	; 0x50
 8001b56:	d03c      	beq.n	8001bd2 <HAL_TIM_ConfigClockSource+0xfa>
 8001b58:	2b50      	cmp	r3, #80	; 0x50
 8001b5a:	d873      	bhi.n	8001c44 <HAL_TIM_ConfigClockSource+0x16c>
 8001b5c:	2b40      	cmp	r3, #64	; 0x40
 8001b5e:	d058      	beq.n	8001c12 <HAL_TIM_ConfigClockSource+0x13a>
 8001b60:	2b40      	cmp	r3, #64	; 0x40
 8001b62:	d86f      	bhi.n	8001c44 <HAL_TIM_ConfigClockSource+0x16c>
 8001b64:	2b30      	cmp	r3, #48	; 0x30
 8001b66:	d064      	beq.n	8001c32 <HAL_TIM_ConfigClockSource+0x15a>
 8001b68:	2b30      	cmp	r3, #48	; 0x30
 8001b6a:	d86b      	bhi.n	8001c44 <HAL_TIM_ConfigClockSource+0x16c>
 8001b6c:	2b20      	cmp	r3, #32
 8001b6e:	d060      	beq.n	8001c32 <HAL_TIM_ConfigClockSource+0x15a>
 8001b70:	2b20      	cmp	r3, #32
 8001b72:	d867      	bhi.n	8001c44 <HAL_TIM_ConfigClockSource+0x16c>
 8001b74:	2b00      	cmp	r3, #0
 8001b76:	d05c      	beq.n	8001c32 <HAL_TIM_ConfigClockSource+0x15a>
 8001b78:	2b10      	cmp	r3, #16
 8001b7a:	d05a      	beq.n	8001c32 <HAL_TIM_ConfigClockSource+0x15a>
 8001b7c:	e062      	b.n	8001c44 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8001b82:	683b      	ldr	r3, [r7, #0]
 8001b84:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8001b86:	683b      	ldr	r3, [r7, #0]
 8001b88:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8001b8a:	683b      	ldr	r3, [r7, #0]
 8001b8c:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8001b8e:	f000 fbd9 	bl	8002344 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	689b      	ldr	r3, [r3, #8]
 8001b98:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8001b9a:	68bb      	ldr	r3, [r7, #8]
 8001b9c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8001ba0:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	68ba      	ldr	r2, [r7, #8]
 8001ba8:	609a      	str	r2, [r3, #8]
      break;
 8001baa:	e04f      	b.n	8001c4c <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8001bb0:	683b      	ldr	r3, [r7, #0]
 8001bb2:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8001bb4:	683b      	ldr	r3, [r7, #0]
 8001bb6:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8001bb8:	683b      	ldr	r3, [r7, #0]
 8001bba:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8001bbc:	f000 fbc2 	bl	8002344 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	689a      	ldr	r2, [r3, #8]
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001bce:	609a      	str	r2, [r3, #8]
      break;
 8001bd0:	e03c      	b.n	8001c4c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8001bd6:	683b      	ldr	r3, [r7, #0]
 8001bd8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8001bda:	683b      	ldr	r3, [r7, #0]
 8001bdc:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8001bde:	461a      	mov	r2, r3
 8001be0:	f000 fa86 	bl	80020f0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	2150      	movs	r1, #80	; 0x50
 8001bea:	4618      	mov	r0, r3
 8001bec:	f000 fb90 	bl	8002310 <TIM_ITRx_SetConfig>
      break;
 8001bf0:	e02c      	b.n	8001c4c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8001bf6:	683b      	ldr	r3, [r7, #0]
 8001bf8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8001bfa:	683b      	ldr	r3, [r7, #0]
 8001bfc:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8001bfe:	461a      	mov	r2, r3
 8001c00:	f000 fae0 	bl	80021c4 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	2160      	movs	r1, #96	; 0x60
 8001c0a:	4618      	mov	r0, r3
 8001c0c:	f000 fb80 	bl	8002310 <TIM_ITRx_SetConfig>
      break;
 8001c10:	e01c      	b.n	8001c4c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8001c16:	683b      	ldr	r3, [r7, #0]
 8001c18:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8001c1a:	683b      	ldr	r3, [r7, #0]
 8001c1c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8001c1e:	461a      	mov	r2, r3
 8001c20:	f000 fa66 	bl	80020f0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	2140      	movs	r1, #64	; 0x40
 8001c2a:	4618      	mov	r0, r3
 8001c2c:	f000 fb70 	bl	8002310 <TIM_ITRx_SetConfig>
      break;
 8001c30:	e00c      	b.n	8001c4c <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	681a      	ldr	r2, [r3, #0]
 8001c36:	683b      	ldr	r3, [r7, #0]
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	4619      	mov	r1, r3
 8001c3c:	4610      	mov	r0, r2
 8001c3e:	f000 fb67 	bl	8002310 <TIM_ITRx_SetConfig>
      break;
 8001c42:	e003      	b.n	8001c4c <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8001c44:	2301      	movs	r3, #1
 8001c46:	73fb      	strb	r3, [r7, #15]
      break;
 8001c48:	e000      	b.n	8001c4c <HAL_TIM_ConfigClockSource+0x174>
      break;
 8001c4a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	2201      	movs	r2, #1
 8001c50:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	2200      	movs	r2, #0
 8001c58:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8001c5c:	7bfb      	ldrb	r3, [r7, #15]
}
 8001c5e:	4618      	mov	r0, r3
 8001c60:	3710      	adds	r7, #16
 8001c62:	46bd      	mov	sp, r7
 8001c64:	bd80      	pop	{r7, pc}
	...

08001c68 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8001c68:	b480      	push	{r7}
 8001c6a:	b085      	sub	sp, #20
 8001c6c:	af00      	add	r7, sp, #0
 8001c6e:	6078      	str	r0, [r7, #4]
 8001c70:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	4a29      	ldr	r2, [pc, #164]	; (8001d20 <TIM_Base_SetConfig+0xb8>)
 8001c7c:	4293      	cmp	r3, r2
 8001c7e:	d00b      	beq.n	8001c98 <TIM_Base_SetConfig+0x30>
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001c86:	d007      	beq.n	8001c98 <TIM_Base_SetConfig+0x30>
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	4a26      	ldr	r2, [pc, #152]	; (8001d24 <TIM_Base_SetConfig+0xbc>)
 8001c8c:	4293      	cmp	r3, r2
 8001c8e:	d003      	beq.n	8001c98 <TIM_Base_SetConfig+0x30>
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	4a25      	ldr	r2, [pc, #148]	; (8001d28 <TIM_Base_SetConfig+0xc0>)
 8001c94:	4293      	cmp	r3, r2
 8001c96:	d108      	bne.n	8001caa <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001c98:	68fb      	ldr	r3, [r7, #12]
 8001c9a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001c9e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8001ca0:	683b      	ldr	r3, [r7, #0]
 8001ca2:	685b      	ldr	r3, [r3, #4]
 8001ca4:	68fa      	ldr	r2, [r7, #12]
 8001ca6:	4313      	orrs	r3, r2
 8001ca8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	4a1c      	ldr	r2, [pc, #112]	; (8001d20 <TIM_Base_SetConfig+0xb8>)
 8001cae:	4293      	cmp	r3, r2
 8001cb0:	d00b      	beq.n	8001cca <TIM_Base_SetConfig+0x62>
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001cb8:	d007      	beq.n	8001cca <TIM_Base_SetConfig+0x62>
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	4a19      	ldr	r2, [pc, #100]	; (8001d24 <TIM_Base_SetConfig+0xbc>)
 8001cbe:	4293      	cmp	r3, r2
 8001cc0:	d003      	beq.n	8001cca <TIM_Base_SetConfig+0x62>
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	4a18      	ldr	r2, [pc, #96]	; (8001d28 <TIM_Base_SetConfig+0xc0>)
 8001cc6:	4293      	cmp	r3, r2
 8001cc8:	d108      	bne.n	8001cdc <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8001cca:	68fb      	ldr	r3, [r7, #12]
 8001ccc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001cd0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001cd2:	683b      	ldr	r3, [r7, #0]
 8001cd4:	68db      	ldr	r3, [r3, #12]
 8001cd6:	68fa      	ldr	r2, [r7, #12]
 8001cd8:	4313      	orrs	r3, r2
 8001cda:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001cdc:	68fb      	ldr	r3, [r7, #12]
 8001cde:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8001ce2:	683b      	ldr	r3, [r7, #0]
 8001ce4:	695b      	ldr	r3, [r3, #20]
 8001ce6:	4313      	orrs	r3, r2
 8001ce8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	68fa      	ldr	r2, [r7, #12]
 8001cee:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001cf0:	683b      	ldr	r3, [r7, #0]
 8001cf2:	689a      	ldr	r2, [r3, #8]
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8001cf8:	683b      	ldr	r3, [r7, #0]
 8001cfa:	681a      	ldr	r2, [r3, #0]
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	4a07      	ldr	r2, [pc, #28]	; (8001d20 <TIM_Base_SetConfig+0xb8>)
 8001d04:	4293      	cmp	r3, r2
 8001d06:	d103      	bne.n	8001d10 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8001d08:	683b      	ldr	r3, [r7, #0]
 8001d0a:	691a      	ldr	r2, [r3, #16]
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	2201      	movs	r2, #1
 8001d14:	615a      	str	r2, [r3, #20]
}
 8001d16:	bf00      	nop
 8001d18:	3714      	adds	r7, #20
 8001d1a:	46bd      	mov	sp, r7
 8001d1c:	bc80      	pop	{r7}
 8001d1e:	4770      	bx	lr
 8001d20:	40012c00 	.word	0x40012c00
 8001d24:	40000400 	.word	0x40000400
 8001d28:	40000800 	.word	0x40000800

08001d2c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8001d2c:	b480      	push	{r7}
 8001d2e:	b087      	sub	sp, #28
 8001d30:	af00      	add	r7, sp, #0
 8001d32:	6078      	str	r0, [r7, #4]
 8001d34:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	6a1b      	ldr	r3, [r3, #32]
 8001d3a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	6a1b      	ldr	r3, [r3, #32]
 8001d40:	f023 0201 	bic.w	r2, r3, #1
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	685b      	ldr	r3, [r3, #4]
 8001d4c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	699b      	ldr	r3, [r3, #24]
 8001d52:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8001d54:	68fb      	ldr	r3, [r7, #12]
 8001d56:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001d5a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8001d5c:	68fb      	ldr	r3, [r7, #12]
 8001d5e:	f023 0303 	bic.w	r3, r3, #3
 8001d62:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8001d64:	683b      	ldr	r3, [r7, #0]
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	68fa      	ldr	r2, [r7, #12]
 8001d6a:	4313      	orrs	r3, r2
 8001d6c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8001d6e:	697b      	ldr	r3, [r7, #20]
 8001d70:	f023 0302 	bic.w	r3, r3, #2
 8001d74:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8001d76:	683b      	ldr	r3, [r7, #0]
 8001d78:	689b      	ldr	r3, [r3, #8]
 8001d7a:	697a      	ldr	r2, [r7, #20]
 8001d7c:	4313      	orrs	r3, r2
 8001d7e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	4a1c      	ldr	r2, [pc, #112]	; (8001df4 <TIM_OC1_SetConfig+0xc8>)
 8001d84:	4293      	cmp	r3, r2
 8001d86:	d10c      	bne.n	8001da2 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8001d88:	697b      	ldr	r3, [r7, #20]
 8001d8a:	f023 0308 	bic.w	r3, r3, #8
 8001d8e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8001d90:	683b      	ldr	r3, [r7, #0]
 8001d92:	68db      	ldr	r3, [r3, #12]
 8001d94:	697a      	ldr	r2, [r7, #20]
 8001d96:	4313      	orrs	r3, r2
 8001d98:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8001d9a:	697b      	ldr	r3, [r7, #20]
 8001d9c:	f023 0304 	bic.w	r3, r3, #4
 8001da0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	4a13      	ldr	r2, [pc, #76]	; (8001df4 <TIM_OC1_SetConfig+0xc8>)
 8001da6:	4293      	cmp	r3, r2
 8001da8:	d111      	bne.n	8001dce <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8001daa:	693b      	ldr	r3, [r7, #16]
 8001dac:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001db0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8001db2:	693b      	ldr	r3, [r7, #16]
 8001db4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8001db8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8001dba:	683b      	ldr	r3, [r7, #0]
 8001dbc:	695b      	ldr	r3, [r3, #20]
 8001dbe:	693a      	ldr	r2, [r7, #16]
 8001dc0:	4313      	orrs	r3, r2
 8001dc2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8001dc4:	683b      	ldr	r3, [r7, #0]
 8001dc6:	699b      	ldr	r3, [r3, #24]
 8001dc8:	693a      	ldr	r2, [r7, #16]
 8001dca:	4313      	orrs	r3, r2
 8001dcc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	693a      	ldr	r2, [r7, #16]
 8001dd2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	68fa      	ldr	r2, [r7, #12]
 8001dd8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8001dda:	683b      	ldr	r3, [r7, #0]
 8001ddc:	685a      	ldr	r2, [r3, #4]
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	697a      	ldr	r2, [r7, #20]
 8001de6:	621a      	str	r2, [r3, #32]
}
 8001de8:	bf00      	nop
 8001dea:	371c      	adds	r7, #28
 8001dec:	46bd      	mov	sp, r7
 8001dee:	bc80      	pop	{r7}
 8001df0:	4770      	bx	lr
 8001df2:	bf00      	nop
 8001df4:	40012c00 	.word	0x40012c00

08001df8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8001df8:	b480      	push	{r7}
 8001dfa:	b087      	sub	sp, #28
 8001dfc:	af00      	add	r7, sp, #0
 8001dfe:	6078      	str	r0, [r7, #4]
 8001e00:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	6a1b      	ldr	r3, [r3, #32]
 8001e06:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	6a1b      	ldr	r3, [r3, #32]
 8001e0c:	f023 0210 	bic.w	r2, r3, #16
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	685b      	ldr	r3, [r3, #4]
 8001e18:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	699b      	ldr	r3, [r3, #24]
 8001e1e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8001e20:	68fb      	ldr	r3, [r7, #12]
 8001e22:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8001e26:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8001e28:	68fb      	ldr	r3, [r7, #12]
 8001e2a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001e2e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8001e30:	683b      	ldr	r3, [r7, #0]
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	021b      	lsls	r3, r3, #8
 8001e36:	68fa      	ldr	r2, [r7, #12]
 8001e38:	4313      	orrs	r3, r2
 8001e3a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8001e3c:	697b      	ldr	r3, [r7, #20]
 8001e3e:	f023 0320 	bic.w	r3, r3, #32
 8001e42:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8001e44:	683b      	ldr	r3, [r7, #0]
 8001e46:	689b      	ldr	r3, [r3, #8]
 8001e48:	011b      	lsls	r3, r3, #4
 8001e4a:	697a      	ldr	r2, [r7, #20]
 8001e4c:	4313      	orrs	r3, r2
 8001e4e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	4a1d      	ldr	r2, [pc, #116]	; (8001ec8 <TIM_OC2_SetConfig+0xd0>)
 8001e54:	4293      	cmp	r3, r2
 8001e56:	d10d      	bne.n	8001e74 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8001e58:	697b      	ldr	r3, [r7, #20]
 8001e5a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001e5e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8001e60:	683b      	ldr	r3, [r7, #0]
 8001e62:	68db      	ldr	r3, [r3, #12]
 8001e64:	011b      	lsls	r3, r3, #4
 8001e66:	697a      	ldr	r2, [r7, #20]
 8001e68:	4313      	orrs	r3, r2
 8001e6a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8001e6c:	697b      	ldr	r3, [r7, #20]
 8001e6e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8001e72:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	4a14      	ldr	r2, [pc, #80]	; (8001ec8 <TIM_OC2_SetConfig+0xd0>)
 8001e78:	4293      	cmp	r3, r2
 8001e7a:	d113      	bne.n	8001ea4 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8001e7c:	693b      	ldr	r3, [r7, #16]
 8001e7e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8001e82:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8001e84:	693b      	ldr	r3, [r7, #16]
 8001e86:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8001e8a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8001e8c:	683b      	ldr	r3, [r7, #0]
 8001e8e:	695b      	ldr	r3, [r3, #20]
 8001e90:	009b      	lsls	r3, r3, #2
 8001e92:	693a      	ldr	r2, [r7, #16]
 8001e94:	4313      	orrs	r3, r2
 8001e96:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8001e98:	683b      	ldr	r3, [r7, #0]
 8001e9a:	699b      	ldr	r3, [r3, #24]
 8001e9c:	009b      	lsls	r3, r3, #2
 8001e9e:	693a      	ldr	r2, [r7, #16]
 8001ea0:	4313      	orrs	r3, r2
 8001ea2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	693a      	ldr	r2, [r7, #16]
 8001ea8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	68fa      	ldr	r2, [r7, #12]
 8001eae:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8001eb0:	683b      	ldr	r3, [r7, #0]
 8001eb2:	685a      	ldr	r2, [r3, #4]
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	697a      	ldr	r2, [r7, #20]
 8001ebc:	621a      	str	r2, [r3, #32]
}
 8001ebe:	bf00      	nop
 8001ec0:	371c      	adds	r7, #28
 8001ec2:	46bd      	mov	sp, r7
 8001ec4:	bc80      	pop	{r7}
 8001ec6:	4770      	bx	lr
 8001ec8:	40012c00 	.word	0x40012c00

08001ecc <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8001ecc:	b480      	push	{r7}
 8001ece:	b087      	sub	sp, #28
 8001ed0:	af00      	add	r7, sp, #0
 8001ed2:	6078      	str	r0, [r7, #4]
 8001ed4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	6a1b      	ldr	r3, [r3, #32]
 8001eda:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	6a1b      	ldr	r3, [r3, #32]
 8001ee0:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	685b      	ldr	r3, [r3, #4]
 8001eec:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	69db      	ldr	r3, [r3, #28]
 8001ef2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8001ef4:	68fb      	ldr	r3, [r7, #12]
 8001ef6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001efa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8001efc:	68fb      	ldr	r3, [r7, #12]
 8001efe:	f023 0303 	bic.w	r3, r3, #3
 8001f02:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8001f04:	683b      	ldr	r3, [r7, #0]
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	68fa      	ldr	r2, [r7, #12]
 8001f0a:	4313      	orrs	r3, r2
 8001f0c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8001f0e:	697b      	ldr	r3, [r7, #20]
 8001f10:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8001f14:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8001f16:	683b      	ldr	r3, [r7, #0]
 8001f18:	689b      	ldr	r3, [r3, #8]
 8001f1a:	021b      	lsls	r3, r3, #8
 8001f1c:	697a      	ldr	r2, [r7, #20]
 8001f1e:	4313      	orrs	r3, r2
 8001f20:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	4a1d      	ldr	r2, [pc, #116]	; (8001f9c <TIM_OC3_SetConfig+0xd0>)
 8001f26:	4293      	cmp	r3, r2
 8001f28:	d10d      	bne.n	8001f46 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8001f2a:	697b      	ldr	r3, [r7, #20]
 8001f2c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8001f30:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8001f32:	683b      	ldr	r3, [r7, #0]
 8001f34:	68db      	ldr	r3, [r3, #12]
 8001f36:	021b      	lsls	r3, r3, #8
 8001f38:	697a      	ldr	r2, [r7, #20]
 8001f3a:	4313      	orrs	r3, r2
 8001f3c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8001f3e:	697b      	ldr	r3, [r7, #20]
 8001f40:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8001f44:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	4a14      	ldr	r2, [pc, #80]	; (8001f9c <TIM_OC3_SetConfig+0xd0>)
 8001f4a:	4293      	cmp	r3, r2
 8001f4c:	d113      	bne.n	8001f76 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8001f4e:	693b      	ldr	r3, [r7, #16]
 8001f50:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8001f54:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8001f56:	693b      	ldr	r3, [r7, #16]
 8001f58:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8001f5c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8001f5e:	683b      	ldr	r3, [r7, #0]
 8001f60:	695b      	ldr	r3, [r3, #20]
 8001f62:	011b      	lsls	r3, r3, #4
 8001f64:	693a      	ldr	r2, [r7, #16]
 8001f66:	4313      	orrs	r3, r2
 8001f68:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8001f6a:	683b      	ldr	r3, [r7, #0]
 8001f6c:	699b      	ldr	r3, [r3, #24]
 8001f6e:	011b      	lsls	r3, r3, #4
 8001f70:	693a      	ldr	r2, [r7, #16]
 8001f72:	4313      	orrs	r3, r2
 8001f74:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	693a      	ldr	r2, [r7, #16]
 8001f7a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	68fa      	ldr	r2, [r7, #12]
 8001f80:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8001f82:	683b      	ldr	r3, [r7, #0]
 8001f84:	685a      	ldr	r2, [r3, #4]
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	697a      	ldr	r2, [r7, #20]
 8001f8e:	621a      	str	r2, [r3, #32]
}
 8001f90:	bf00      	nop
 8001f92:	371c      	adds	r7, #28
 8001f94:	46bd      	mov	sp, r7
 8001f96:	bc80      	pop	{r7}
 8001f98:	4770      	bx	lr
 8001f9a:	bf00      	nop
 8001f9c:	40012c00 	.word	0x40012c00

08001fa0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8001fa0:	b480      	push	{r7}
 8001fa2:	b087      	sub	sp, #28
 8001fa4:	af00      	add	r7, sp, #0
 8001fa6:	6078      	str	r0, [r7, #4]
 8001fa8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	6a1b      	ldr	r3, [r3, #32]
 8001fae:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	6a1b      	ldr	r3, [r3, #32]
 8001fb4:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	685b      	ldr	r3, [r3, #4]
 8001fc0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	69db      	ldr	r3, [r3, #28]
 8001fc6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8001fc8:	68fb      	ldr	r3, [r7, #12]
 8001fca:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8001fce:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8001fd0:	68fb      	ldr	r3, [r7, #12]
 8001fd2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001fd6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8001fd8:	683b      	ldr	r3, [r7, #0]
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	021b      	lsls	r3, r3, #8
 8001fde:	68fa      	ldr	r2, [r7, #12]
 8001fe0:	4313      	orrs	r3, r2
 8001fe2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8001fe4:	693b      	ldr	r3, [r7, #16]
 8001fe6:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8001fea:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8001fec:	683b      	ldr	r3, [r7, #0]
 8001fee:	689b      	ldr	r3, [r3, #8]
 8001ff0:	031b      	lsls	r3, r3, #12
 8001ff2:	693a      	ldr	r2, [r7, #16]
 8001ff4:	4313      	orrs	r3, r2
 8001ff6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	4a0f      	ldr	r2, [pc, #60]	; (8002038 <TIM_OC4_SetConfig+0x98>)
 8001ffc:	4293      	cmp	r3, r2
 8001ffe:	d109      	bne.n	8002014 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8002000:	697b      	ldr	r3, [r7, #20]
 8002002:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002006:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8002008:	683b      	ldr	r3, [r7, #0]
 800200a:	695b      	ldr	r3, [r3, #20]
 800200c:	019b      	lsls	r3, r3, #6
 800200e:	697a      	ldr	r2, [r7, #20]
 8002010:	4313      	orrs	r3, r2
 8002012:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	697a      	ldr	r2, [r7, #20]
 8002018:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	68fa      	ldr	r2, [r7, #12]
 800201e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8002020:	683b      	ldr	r3, [r7, #0]
 8002022:	685a      	ldr	r2, [r3, #4]
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	693a      	ldr	r2, [r7, #16]
 800202c:	621a      	str	r2, [r3, #32]
}
 800202e:	bf00      	nop
 8002030:	371c      	adds	r7, #28
 8002032:	46bd      	mov	sp, r7
 8002034:	bc80      	pop	{r7}
 8002036:	4770      	bx	lr
 8002038:	40012c00 	.word	0x40012c00

0800203c <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 800203c:	b480      	push	{r7}
 800203e:	b087      	sub	sp, #28
 8002040:	af00      	add	r7, sp, #0
 8002042:	60f8      	str	r0, [r7, #12]
 8002044:	60b9      	str	r1, [r7, #8]
 8002046:	607a      	str	r2, [r7, #4]
 8002048:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800204a:	68fb      	ldr	r3, [r7, #12]
 800204c:	6a1b      	ldr	r3, [r3, #32]
 800204e:	613b      	str	r3, [r7, #16]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002050:	68fb      	ldr	r3, [r7, #12]
 8002052:	6a1b      	ldr	r3, [r3, #32]
 8002054:	f023 0201 	bic.w	r2, r3, #1
 8002058:	68fb      	ldr	r3, [r7, #12]
 800205a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800205c:	68fb      	ldr	r3, [r7, #12]
 800205e:	699b      	ldr	r3, [r3, #24]
 8002060:	617b      	str	r3, [r7, #20]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8002062:	68fb      	ldr	r3, [r7, #12]
 8002064:	4a1f      	ldr	r2, [pc, #124]	; (80020e4 <TIM_TI1_SetConfig+0xa8>)
 8002066:	4293      	cmp	r3, r2
 8002068:	d00b      	beq.n	8002082 <TIM_TI1_SetConfig+0x46>
 800206a:	68fb      	ldr	r3, [r7, #12]
 800206c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002070:	d007      	beq.n	8002082 <TIM_TI1_SetConfig+0x46>
 8002072:	68fb      	ldr	r3, [r7, #12]
 8002074:	4a1c      	ldr	r2, [pc, #112]	; (80020e8 <TIM_TI1_SetConfig+0xac>)
 8002076:	4293      	cmp	r3, r2
 8002078:	d003      	beq.n	8002082 <TIM_TI1_SetConfig+0x46>
 800207a:	68fb      	ldr	r3, [r7, #12]
 800207c:	4a1b      	ldr	r2, [pc, #108]	; (80020ec <TIM_TI1_SetConfig+0xb0>)
 800207e:	4293      	cmp	r3, r2
 8002080:	d101      	bne.n	8002086 <TIM_TI1_SetConfig+0x4a>
 8002082:	2301      	movs	r3, #1
 8002084:	e000      	b.n	8002088 <TIM_TI1_SetConfig+0x4c>
 8002086:	2300      	movs	r3, #0
 8002088:	2b00      	cmp	r3, #0
 800208a:	d008      	beq.n	800209e <TIM_TI1_SetConfig+0x62>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 800208c:	697b      	ldr	r3, [r7, #20]
 800208e:	f023 0303 	bic.w	r3, r3, #3
 8002092:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8002094:	697a      	ldr	r2, [r7, #20]
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	4313      	orrs	r3, r2
 800209a:	617b      	str	r3, [r7, #20]
 800209c:	e003      	b.n	80020a6 <TIM_TI1_SetConfig+0x6a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 800209e:	697b      	ldr	r3, [r7, #20]
 80020a0:	f043 0301 	orr.w	r3, r3, #1
 80020a4:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80020a6:	697b      	ldr	r3, [r7, #20]
 80020a8:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80020ac:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 80020ae:	683b      	ldr	r3, [r7, #0]
 80020b0:	011b      	lsls	r3, r3, #4
 80020b2:	b2db      	uxtb	r3, r3
 80020b4:	697a      	ldr	r2, [r7, #20]
 80020b6:	4313      	orrs	r3, r2
 80020b8:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80020ba:	693b      	ldr	r3, [r7, #16]
 80020bc:	f023 030a 	bic.w	r3, r3, #10
 80020c0:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 80020c2:	68bb      	ldr	r3, [r7, #8]
 80020c4:	f003 030a 	and.w	r3, r3, #10
 80020c8:	693a      	ldr	r2, [r7, #16]
 80020ca:	4313      	orrs	r3, r2
 80020cc:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80020ce:	68fb      	ldr	r3, [r7, #12]
 80020d0:	697a      	ldr	r2, [r7, #20]
 80020d2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80020d4:	68fb      	ldr	r3, [r7, #12]
 80020d6:	693a      	ldr	r2, [r7, #16]
 80020d8:	621a      	str	r2, [r3, #32]
}
 80020da:	bf00      	nop
 80020dc:	371c      	adds	r7, #28
 80020de:	46bd      	mov	sp, r7
 80020e0:	bc80      	pop	{r7}
 80020e2:	4770      	bx	lr
 80020e4:	40012c00 	.word	0x40012c00
 80020e8:	40000400 	.word	0x40000400
 80020ec:	40000800 	.word	0x40000800

080020f0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80020f0:	b480      	push	{r7}
 80020f2:	b087      	sub	sp, #28
 80020f4:	af00      	add	r7, sp, #0
 80020f6:	60f8      	str	r0, [r7, #12]
 80020f8:	60b9      	str	r1, [r7, #8]
 80020fa:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80020fc:	68fb      	ldr	r3, [r7, #12]
 80020fe:	6a1b      	ldr	r3, [r3, #32]
 8002100:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002102:	68fb      	ldr	r3, [r7, #12]
 8002104:	6a1b      	ldr	r3, [r3, #32]
 8002106:	f023 0201 	bic.w	r2, r3, #1
 800210a:	68fb      	ldr	r3, [r7, #12]
 800210c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800210e:	68fb      	ldr	r3, [r7, #12]
 8002110:	699b      	ldr	r3, [r3, #24]
 8002112:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002114:	693b      	ldr	r3, [r7, #16]
 8002116:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800211a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	011b      	lsls	r3, r3, #4
 8002120:	693a      	ldr	r2, [r7, #16]
 8002122:	4313      	orrs	r3, r2
 8002124:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002126:	697b      	ldr	r3, [r7, #20]
 8002128:	f023 030a 	bic.w	r3, r3, #10
 800212c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800212e:	697a      	ldr	r2, [r7, #20]
 8002130:	68bb      	ldr	r3, [r7, #8]
 8002132:	4313      	orrs	r3, r2
 8002134:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002136:	68fb      	ldr	r3, [r7, #12]
 8002138:	693a      	ldr	r2, [r7, #16]
 800213a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800213c:	68fb      	ldr	r3, [r7, #12]
 800213e:	697a      	ldr	r2, [r7, #20]
 8002140:	621a      	str	r2, [r3, #32]
}
 8002142:	bf00      	nop
 8002144:	371c      	adds	r7, #28
 8002146:	46bd      	mov	sp, r7
 8002148:	bc80      	pop	{r7}
 800214a:	4770      	bx	lr

0800214c <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800214c:	b480      	push	{r7}
 800214e:	b087      	sub	sp, #28
 8002150:	af00      	add	r7, sp, #0
 8002152:	60f8      	str	r0, [r7, #12]
 8002154:	60b9      	str	r1, [r7, #8]
 8002156:	607a      	str	r2, [r7, #4]
 8002158:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800215a:	68fb      	ldr	r3, [r7, #12]
 800215c:	6a1b      	ldr	r3, [r3, #32]
 800215e:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002160:	68fb      	ldr	r3, [r7, #12]
 8002162:	6a1b      	ldr	r3, [r3, #32]
 8002164:	f023 0210 	bic.w	r2, r3, #16
 8002168:	68fb      	ldr	r3, [r7, #12]
 800216a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800216c:	68fb      	ldr	r3, [r7, #12]
 800216e:	699b      	ldr	r3, [r3, #24]
 8002170:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8002172:	693b      	ldr	r3, [r7, #16]
 8002174:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002178:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	021b      	lsls	r3, r3, #8
 800217e:	693a      	ldr	r2, [r7, #16]
 8002180:	4313      	orrs	r3, r2
 8002182:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002184:	693b      	ldr	r3, [r7, #16]
 8002186:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800218a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 800218c:	683b      	ldr	r3, [r7, #0]
 800218e:	031b      	lsls	r3, r3, #12
 8002190:	b29b      	uxth	r3, r3
 8002192:	693a      	ldr	r2, [r7, #16]
 8002194:	4313      	orrs	r3, r2
 8002196:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002198:	697b      	ldr	r3, [r7, #20]
 800219a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800219e:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 80021a0:	68bb      	ldr	r3, [r7, #8]
 80021a2:	011b      	lsls	r3, r3, #4
 80021a4:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 80021a8:	697a      	ldr	r2, [r7, #20]
 80021aa:	4313      	orrs	r3, r2
 80021ac:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80021ae:	68fb      	ldr	r3, [r7, #12]
 80021b0:	693a      	ldr	r2, [r7, #16]
 80021b2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80021b4:	68fb      	ldr	r3, [r7, #12]
 80021b6:	697a      	ldr	r2, [r7, #20]
 80021b8:	621a      	str	r2, [r3, #32]
}
 80021ba:	bf00      	nop
 80021bc:	371c      	adds	r7, #28
 80021be:	46bd      	mov	sp, r7
 80021c0:	bc80      	pop	{r7}
 80021c2:	4770      	bx	lr

080021c4 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80021c4:	b480      	push	{r7}
 80021c6:	b087      	sub	sp, #28
 80021c8:	af00      	add	r7, sp, #0
 80021ca:	60f8      	str	r0, [r7, #12]
 80021cc:	60b9      	str	r1, [r7, #8]
 80021ce:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80021d0:	68fb      	ldr	r3, [r7, #12]
 80021d2:	6a1b      	ldr	r3, [r3, #32]
 80021d4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80021d6:	68fb      	ldr	r3, [r7, #12]
 80021d8:	6a1b      	ldr	r3, [r3, #32]
 80021da:	f023 0210 	bic.w	r2, r3, #16
 80021de:	68fb      	ldr	r3, [r7, #12]
 80021e0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80021e2:	68fb      	ldr	r3, [r7, #12]
 80021e4:	699b      	ldr	r3, [r3, #24]
 80021e6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80021e8:	693b      	ldr	r3, [r7, #16]
 80021ea:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80021ee:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	031b      	lsls	r3, r3, #12
 80021f4:	693a      	ldr	r2, [r7, #16]
 80021f6:	4313      	orrs	r3, r2
 80021f8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80021fa:	697b      	ldr	r3, [r7, #20]
 80021fc:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8002200:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002202:	68bb      	ldr	r3, [r7, #8]
 8002204:	011b      	lsls	r3, r3, #4
 8002206:	697a      	ldr	r2, [r7, #20]
 8002208:	4313      	orrs	r3, r2
 800220a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800220c:	68fb      	ldr	r3, [r7, #12]
 800220e:	693a      	ldr	r2, [r7, #16]
 8002210:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002212:	68fb      	ldr	r3, [r7, #12]
 8002214:	697a      	ldr	r2, [r7, #20]
 8002216:	621a      	str	r2, [r3, #32]
}
 8002218:	bf00      	nop
 800221a:	371c      	adds	r7, #28
 800221c:	46bd      	mov	sp, r7
 800221e:	bc80      	pop	{r7}
 8002220:	4770      	bx	lr

08002222 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8002222:	b480      	push	{r7}
 8002224:	b087      	sub	sp, #28
 8002226:	af00      	add	r7, sp, #0
 8002228:	60f8      	str	r0, [r7, #12]
 800222a:	60b9      	str	r1, [r7, #8]
 800222c:	607a      	str	r2, [r7, #4]
 800222e:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  tmpccer = TIMx->CCER;
 8002230:	68fb      	ldr	r3, [r7, #12]
 8002232:	6a1b      	ldr	r3, [r3, #32]
 8002234:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8002236:	68fb      	ldr	r3, [r7, #12]
 8002238:	6a1b      	ldr	r3, [r3, #32]
 800223a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800223e:	68fb      	ldr	r3, [r7, #12]
 8002240:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8002242:	68fb      	ldr	r3, [r7, #12]
 8002244:	69db      	ldr	r3, [r3, #28]
 8002246:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8002248:	693b      	ldr	r3, [r7, #16]
 800224a:	f023 0303 	bic.w	r3, r3, #3
 800224e:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= TIM_ICSelection;
 8002250:	693a      	ldr	r2, [r7, #16]
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	4313      	orrs	r3, r2
 8002256:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8002258:	693b      	ldr	r3, [r7, #16]
 800225a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800225e:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8002260:	683b      	ldr	r3, [r7, #0]
 8002262:	011b      	lsls	r3, r3, #4
 8002264:	b2db      	uxtb	r3, r3
 8002266:	693a      	ldr	r2, [r7, #16]
 8002268:	4313      	orrs	r3, r2
 800226a:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P);
 800226c:	697b      	ldr	r3, [r7, #20]
 800226e:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002272:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 8U) & TIM_CCER_CC3P);
 8002274:	68bb      	ldr	r3, [r7, #8]
 8002276:	021b      	lsls	r3, r3, #8
 8002278:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800227c:	697a      	ldr	r2, [r7, #20]
 800227e:	4313      	orrs	r3, r2
 8002280:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8002282:	68fb      	ldr	r3, [r7, #12]
 8002284:	693a      	ldr	r2, [r7, #16]
 8002286:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8002288:	68fb      	ldr	r3, [r7, #12]
 800228a:	697a      	ldr	r2, [r7, #20]
 800228c:	621a      	str	r2, [r3, #32]
}
 800228e:	bf00      	nop
 8002290:	371c      	adds	r7, #28
 8002292:	46bd      	mov	sp, r7
 8002294:	bc80      	pop	{r7}
 8002296:	4770      	bx	lr

08002298 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8002298:	b480      	push	{r7}
 800229a:	b087      	sub	sp, #28
 800229c:	af00      	add	r7, sp, #0
 800229e:	60f8      	str	r0, [r7, #12]
 80022a0:	60b9      	str	r1, [r7, #8]
 80022a2:	607a      	str	r2, [r7, #4]
 80022a4:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  tmpccer = TIMx->CCER;
 80022a6:	68fb      	ldr	r3, [r7, #12]
 80022a8:	6a1b      	ldr	r3, [r3, #32]
 80022aa:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80022ac:	68fb      	ldr	r3, [r7, #12]
 80022ae:	6a1b      	ldr	r3, [r3, #32]
 80022b0:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80022b4:	68fb      	ldr	r3, [r7, #12]
 80022b6:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 80022b8:	68fb      	ldr	r3, [r7, #12]
 80022ba:	69db      	ldr	r3, [r3, #28]
 80022bc:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 80022be:	693b      	ldr	r3, [r7, #16]
 80022c0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80022c4:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	021b      	lsls	r3, r3, #8
 80022ca:	693a      	ldr	r2, [r7, #16]
 80022cc:	4313      	orrs	r3, r2
 80022ce:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 80022d0:	693b      	ldr	r3, [r7, #16]
 80022d2:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80022d6:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 80022d8:	683b      	ldr	r3, [r7, #0]
 80022da:	031b      	lsls	r3, r3, #12
 80022dc:	b29b      	uxth	r3, r3
 80022de:	693a      	ldr	r2, [r7, #16]
 80022e0:	4313      	orrs	r3, r2
 80022e2:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P);
 80022e4:	697b      	ldr	r3, [r7, #20]
 80022e6:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80022ea:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 12U) & TIM_CCER_CC4P);
 80022ec:	68bb      	ldr	r3, [r7, #8]
 80022ee:	031b      	lsls	r3, r3, #12
 80022f0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80022f4:	697a      	ldr	r2, [r7, #20]
 80022f6:	4313      	orrs	r3, r2
 80022f8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 80022fa:	68fb      	ldr	r3, [r7, #12]
 80022fc:	693a      	ldr	r2, [r7, #16]
 80022fe:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8002300:	68fb      	ldr	r3, [r7, #12]
 8002302:	697a      	ldr	r2, [r7, #20]
 8002304:	621a      	str	r2, [r3, #32]
}
 8002306:	bf00      	nop
 8002308:	371c      	adds	r7, #28
 800230a:	46bd      	mov	sp, r7
 800230c:	bc80      	pop	{r7}
 800230e:	4770      	bx	lr

08002310 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002310:	b480      	push	{r7}
 8002312:	b085      	sub	sp, #20
 8002314:	af00      	add	r7, sp, #0
 8002316:	6078      	str	r0, [r7, #4]
 8002318:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	689b      	ldr	r3, [r3, #8]
 800231e:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002320:	68fb      	ldr	r3, [r7, #12]
 8002322:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002326:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002328:	683a      	ldr	r2, [r7, #0]
 800232a:	68fb      	ldr	r3, [r7, #12]
 800232c:	4313      	orrs	r3, r2
 800232e:	f043 0307 	orr.w	r3, r3, #7
 8002332:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	68fa      	ldr	r2, [r7, #12]
 8002338:	609a      	str	r2, [r3, #8]
}
 800233a:	bf00      	nop
 800233c:	3714      	adds	r7, #20
 800233e:	46bd      	mov	sp, r7
 8002340:	bc80      	pop	{r7}
 8002342:	4770      	bx	lr

08002344 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002344:	b480      	push	{r7}
 8002346:	b087      	sub	sp, #28
 8002348:	af00      	add	r7, sp, #0
 800234a:	60f8      	str	r0, [r7, #12]
 800234c:	60b9      	str	r1, [r7, #8]
 800234e:	607a      	str	r2, [r7, #4]
 8002350:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002352:	68fb      	ldr	r3, [r7, #12]
 8002354:	689b      	ldr	r3, [r3, #8]
 8002356:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002358:	697b      	ldr	r3, [r7, #20]
 800235a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800235e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002360:	683b      	ldr	r3, [r7, #0]
 8002362:	021a      	lsls	r2, r3, #8
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	431a      	orrs	r2, r3
 8002368:	68bb      	ldr	r3, [r7, #8]
 800236a:	4313      	orrs	r3, r2
 800236c:	697a      	ldr	r2, [r7, #20]
 800236e:	4313      	orrs	r3, r2
 8002370:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002372:	68fb      	ldr	r3, [r7, #12]
 8002374:	697a      	ldr	r2, [r7, #20]
 8002376:	609a      	str	r2, [r3, #8]
}
 8002378:	bf00      	nop
 800237a:	371c      	adds	r7, #28
 800237c:	46bd      	mov	sp, r7
 800237e:	bc80      	pop	{r7}
 8002380:	4770      	bx	lr
	...

08002384 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002384:	b480      	push	{r7}
 8002386:	b085      	sub	sp, #20
 8002388:	af00      	add	r7, sp, #0
 800238a:	6078      	str	r0, [r7, #4]
 800238c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002394:	2b01      	cmp	r3, #1
 8002396:	d101      	bne.n	800239c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002398:	2302      	movs	r3, #2
 800239a:	e046      	b.n	800242a <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	2201      	movs	r2, #1
 80023a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	2202      	movs	r2, #2
 80023a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	685b      	ldr	r3, [r3, #4]
 80023b2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	689b      	ldr	r3, [r3, #8]
 80023ba:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80023bc:	68fb      	ldr	r3, [r7, #12]
 80023be:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80023c2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80023c4:	683b      	ldr	r3, [r7, #0]
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	68fa      	ldr	r2, [r7, #12]
 80023ca:	4313      	orrs	r3, r2
 80023cc:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	68fa      	ldr	r2, [r7, #12]
 80023d4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	4a16      	ldr	r2, [pc, #88]	; (8002434 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 80023dc:	4293      	cmp	r3, r2
 80023de:	d00e      	beq.n	80023fe <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80023e8:	d009      	beq.n	80023fe <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	4a12      	ldr	r2, [pc, #72]	; (8002438 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 80023f0:	4293      	cmp	r3, r2
 80023f2:	d004      	beq.n	80023fe <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	4a10      	ldr	r2, [pc, #64]	; (800243c <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 80023fa:	4293      	cmp	r3, r2
 80023fc:	d10c      	bne.n	8002418 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80023fe:	68bb      	ldr	r3, [r7, #8]
 8002400:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002404:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002406:	683b      	ldr	r3, [r7, #0]
 8002408:	685b      	ldr	r3, [r3, #4]
 800240a:	68ba      	ldr	r2, [r7, #8]
 800240c:	4313      	orrs	r3, r2
 800240e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	68ba      	ldr	r2, [r7, #8]
 8002416:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	2201      	movs	r2, #1
 800241c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	2200      	movs	r2, #0
 8002424:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002428:	2300      	movs	r3, #0
}
 800242a:	4618      	mov	r0, r3
 800242c:	3714      	adds	r7, #20
 800242e:	46bd      	mov	sp, r7
 8002430:	bc80      	pop	{r7}
 8002432:	4770      	bx	lr
 8002434:	40012c00 	.word	0x40012c00
 8002438:	40000400 	.word	0x40000400
 800243c:	40000800 	.word	0x40000800

08002440 <memset>:
 8002440:	4603      	mov	r3, r0
 8002442:	4402      	add	r2, r0
 8002444:	4293      	cmp	r3, r2
 8002446:	d100      	bne.n	800244a <memset+0xa>
 8002448:	4770      	bx	lr
 800244a:	f803 1b01 	strb.w	r1, [r3], #1
 800244e:	e7f9      	b.n	8002444 <memset+0x4>

08002450 <__libc_init_array>:
 8002450:	b570      	push	{r4, r5, r6, lr}
 8002452:	2600      	movs	r6, #0
 8002454:	4d0c      	ldr	r5, [pc, #48]	; (8002488 <__libc_init_array+0x38>)
 8002456:	4c0d      	ldr	r4, [pc, #52]	; (800248c <__libc_init_array+0x3c>)
 8002458:	1b64      	subs	r4, r4, r5
 800245a:	10a4      	asrs	r4, r4, #2
 800245c:	42a6      	cmp	r6, r4
 800245e:	d109      	bne.n	8002474 <__libc_init_array+0x24>
 8002460:	f000 f81a 	bl	8002498 <_init>
 8002464:	2600      	movs	r6, #0
 8002466:	4d0a      	ldr	r5, [pc, #40]	; (8002490 <__libc_init_array+0x40>)
 8002468:	4c0a      	ldr	r4, [pc, #40]	; (8002494 <__libc_init_array+0x44>)
 800246a:	1b64      	subs	r4, r4, r5
 800246c:	10a4      	asrs	r4, r4, #2
 800246e:	42a6      	cmp	r6, r4
 8002470:	d105      	bne.n	800247e <__libc_init_array+0x2e>
 8002472:	bd70      	pop	{r4, r5, r6, pc}
 8002474:	f855 3b04 	ldr.w	r3, [r5], #4
 8002478:	4798      	blx	r3
 800247a:	3601      	adds	r6, #1
 800247c:	e7ee      	b.n	800245c <__libc_init_array+0xc>
 800247e:	f855 3b04 	ldr.w	r3, [r5], #4
 8002482:	4798      	blx	r3
 8002484:	3601      	adds	r6, #1
 8002486:	e7f2      	b.n	800246e <__libc_init_array+0x1e>
 8002488:	080024d4 	.word	0x080024d4
 800248c:	080024d4 	.word	0x080024d4
 8002490:	080024d4 	.word	0x080024d4
 8002494:	080024d8 	.word	0x080024d8

08002498 <_init>:
 8002498:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800249a:	bf00      	nop
 800249c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800249e:	bc08      	pop	{r3}
 80024a0:	469e      	mov	lr, r3
 80024a2:	4770      	bx	lr

080024a4 <_fini>:
 80024a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80024a6:	bf00      	nop
 80024a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80024aa:	bc08      	pop	{r3}
 80024ac:	469e      	mov	lr, r3
 80024ae:	4770      	bx	lr
