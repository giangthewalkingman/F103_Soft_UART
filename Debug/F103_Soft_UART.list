
F103_Soft_UART.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002804  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000024  08002910  08002910  00012910  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002934  08002934  00020024  2**0
                  CONTENTS
  4 .ARM          00000000  08002934  08002934  00020024  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002934  08002934  00020024  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002934  08002934  00012934  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002938  08002938  00012938  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000024  20000000  0800293c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000198  20000024  08002960  00020024  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200001bc  08002960  000201bc  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020024  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002004d  2**0
                  CONTENTS, READONLY
 13 .debug_info   00008e1b  00000000  00000000  00020090  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000016e2  00000000  00000000  00028eab  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000970  00000000  00000000  0002a590  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000746  00000000  00000000  0002af00  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00016959  00000000  00000000  0002b646  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000a2eb  00000000  00000000  00041f9f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00085737  00000000  00000000  0004c28a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000026a0  00000000  00000000  000d19c4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000008b  00000000  00000000  000d4064  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000024 	.word	0x20000024
 8000128:	00000000 	.word	0x00000000
 800012c:	080028f8 	.word	0x080028f8

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000028 	.word	0x20000028
 8000148:	080028f8 	.word	0x080028f8

0800014c <ssInit>:
 * 						(9600, 19200, 38400, 57600, 74880, 115200)
 * 						to have more stable full-duplex communication,
 * 						avoid using baud rate of 115200
 * @retval None
 */
void ssInit(uint32_t baudrate) {
 800014c:	b480      	push	{r7}
 800014e:	b085      	sub	sp, #20
 8000150:	af00      	add	r7, sp, #0
 8000152:	6078      	str	r0, [r7, #4]
	tx_buff_byte.pos = tx_byte.pos = curr_rbyte.pos = rx_byte.pos = 0;
 8000154:	2300      	movs	r3, #0
 8000156:	496f      	ldr	r1, [pc, #444]	; (8000314 <ssInit+0x1c8>)
 8000158:	780a      	ldrb	r2, [r1, #0]
 800015a:	f363 0206 	bfi	r2, r3, #0, #7
 800015e:	700a      	strb	r2, [r1, #0]
 8000160:	496d      	ldr	r1, [pc, #436]	; (8000318 <ssInit+0x1cc>)
 8000162:	780a      	ldrb	r2, [r1, #0]
 8000164:	f363 0206 	bfi	r2, r3, #0, #7
 8000168:	700a      	strb	r2, [r1, #0]
 800016a:	496c      	ldr	r1, [pc, #432]	; (800031c <ssInit+0x1d0>)
 800016c:	780a      	ldrb	r2, [r1, #0]
 800016e:	f363 0206 	bfi	r2, r3, #0, #7
 8000172:	700a      	strb	r2, [r1, #0]
 8000174:	496a      	ldr	r1, [pc, #424]	; (8000320 <ssInit+0x1d4>)
 8000176:	780a      	ldrb	r2, [r1, #0]
 8000178:	f363 0206 	bfi	r2, r3, #0, #7
 800017c:	700a      	strb	r2, [r1, #0]
	tx_data[8] = 1;
 800017e:	4b69      	ldr	r3, [pc, #420]	; (8000324 <ssInit+0x1d8>)
 8000180:	2201      	movs	r2, #1
 8000182:	721a      	strb	r2, [r3, #8]
	cnt_per_bit = F_CPU / baudrate;
 8000184:	4b68      	ldr	r3, [pc, #416]	; (8000328 <ssInit+0x1dc>)
 8000186:	681a      	ldr	r2, [r3, #0]
 8000188:	687b      	ldr	r3, [r7, #4]
 800018a:	fbb2 f3f3 	udiv	r3, r2, r3
 800018e:	4a67      	ldr	r2, [pc, #412]	; (800032c <ssInit+0x1e0>)
 8000190:	6013      	str	r3, [r2, #0]
	uint16_t prescaler = 1;
 8000192:	2301      	movs	r3, #1
 8000194:	81fb      	strh	r3, [r7, #14]

	while((cnt_per_bit / prescaler) > MAX_TIM_CNT_PER_BIT) {
 8000196:	e002      	b.n	800019e <ssInit+0x52>
		prescaler++;
 8000198:	89fb      	ldrh	r3, [r7, #14]
 800019a:	3301      	adds	r3, #1
 800019c:	81fb      	strh	r3, [r7, #14]
	while((cnt_per_bit / prescaler) > MAX_TIM_CNT_PER_BIT) {
 800019e:	4b63      	ldr	r3, [pc, #396]	; (800032c <ssInit+0x1e0>)
 80001a0:	681a      	ldr	r2, [r3, #0]
 80001a2:	89fb      	ldrh	r3, [r7, #14]
 80001a4:	fbb2 f3f3 	udiv	r3, r2, r3
 80001a8:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80001ac:	d2f4      	bcs.n	8000198 <ssInit+0x4c>
	}
	cnt_per_bit /= prescaler;
 80001ae:	4b5f      	ldr	r3, [pc, #380]	; (800032c <ssInit+0x1e0>)
 80001b0:	681a      	ldr	r2, [r3, #0]
 80001b2:	89fb      	ldrh	r3, [r7, #14]
 80001b4:	fbb2 f3f3 	udiv	r3, r2, r3
 80001b8:	4a5c      	ldr	r2, [pc, #368]	; (800032c <ssInit+0x1e0>)
 80001ba:	6013      	str	r3, [r2, #0]
	if(cnt_per_bit > MAX_TIM_CNT_PER_BIT)
 80001bc:	4b5b      	ldr	r3, [pc, #364]	; (800032c <ssInit+0x1e0>)
 80001be:	681b      	ldr	r3, [r3, #0]
 80001c0:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80001c4:	f080 80a0 	bcs.w	8000308 <ssInit+0x1bc>
		return;

	one_and_half_bit_time = cnt_per_bit / 2 + cnt_per_bit;
 80001c8:	4b58      	ldr	r3, [pc, #352]	; (800032c <ssInit+0x1e0>)
 80001ca:	681b      	ldr	r3, [r3, #0]
 80001cc:	085a      	lsrs	r2, r3, #1
 80001ce:	4b57      	ldr	r3, [pc, #348]	; (800032c <ssInit+0x1e0>)
 80001d0:	681b      	ldr	r3, [r3, #0]
 80001d2:	4413      	add	r3, r2
 80001d4:	4a56      	ldr	r2, [pc, #344]	; (8000330 <ssInit+0x1e4>)
 80001d6:	6013      	str	r3, [r2, #0]
	ENABLE_GPIOA_CLOCK();
 80001d8:	4b56      	ldr	r3, [pc, #344]	; (8000334 <ssInit+0x1e8>)
 80001da:	699b      	ldr	r3, [r3, #24]
 80001dc:	4a55      	ldr	r2, [pc, #340]	; (8000334 <ssInit+0x1e8>)
 80001de:	f043 0304 	orr.w	r3, r3, #4
 80001e2:	6193      	str	r3, [r2, #24]
	CONFIG_GPIOA6_MODE();
 80001e4:	4a54      	ldr	r2, [pc, #336]	; (8000338 <ssInit+0x1ec>)
 80001e6:	6813      	ldr	r3, [r2, #0]
 80001e8:	2102      	movs	r1, #2
 80001ea:	f361 330d 	bfi	r3, r1, #12, #2
 80001ee:	6013      	str	r3, [r2, #0]
 80001f0:	4a51      	ldr	r2, [pc, #324]	; (8000338 <ssInit+0x1ec>)
 80001f2:	6893      	ldr	r3, [r2, #8]
 80001f4:	f443 5340 	orr.w	r3, r3, #12288	; 0x3000
 80001f8:	6093      	str	r3, [r2, #8]
 80001fa:	4a4f      	ldr	r2, [pc, #316]	; (8000338 <ssInit+0x1ec>)
 80001fc:	6a13      	ldr	r3, [r2, #32]
 80001fe:	2102      	movs	r1, #2
 8000200:	f361 631b 	bfi	r3, r1, #24, #4
 8000204:	6213      	str	r3, [r2, #32]
	CONFIG_GPIOA7_MODE();
 8000206:	4a4c      	ldr	r2, [pc, #304]	; (8000338 <ssInit+0x1ec>)
 8000208:	6813      	ldr	r3, [r2, #0]
 800020a:	2102      	movs	r1, #2
 800020c:	f361 338f 	bfi	r3, r1, #14, #2
 8000210:	6013      	str	r3, [r2, #0]
 8000212:	4a49      	ldr	r2, [pc, #292]	; (8000338 <ssInit+0x1ec>)
 8000214:	6893      	ldr	r3, [r2, #8]
 8000216:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800021a:	6093      	str	r3, [r2, #8]
 800021c:	4a46      	ldr	r2, [pc, #280]	; (8000338 <ssInit+0x1ec>)
 800021e:	6a13      	ldr	r3, [r2, #32]
 8000220:	2102      	movs	r1, #2
 8000222:	f361 731f 	bfi	r3, r1, #28, #4
 8000226:	6213      	str	r3, [r2, #32]
 8000228:	4a43      	ldr	r2, [pc, #268]	; (8000338 <ssInit+0x1ec>)
 800022a:	68d3      	ldr	r3, [r2, #12]
 800022c:	2101      	movs	r1, #1
 800022e:	f361 338f 	bfi	r3, r1, #14, #2
 8000232:	60d3      	str	r3, [r2, #12]

	ENABLE_TIM3_CLOCK();
 8000234:	4b3f      	ldr	r3, [pc, #252]	; (8000334 <ssInit+0x1e8>)
 8000236:	69db      	ldr	r3, [r3, #28]
 8000238:	4a3e      	ldr	r2, [pc, #248]	; (8000334 <ssInit+0x1e8>)
 800023a:	f043 0302 	orr.w	r3, r3, #2
 800023e:	61d3      	str	r3, [r2, #28]
	CONFIG_TIM3_PSC(prescaler);
 8000240:	89fb      	ldrh	r3, [r7, #14]
 8000242:	1e5a      	subs	r2, r3, #1
 8000244:	4b3d      	ldr	r3, [pc, #244]	; (800033c <ssInit+0x1f0>)
 8000246:	629a      	str	r2, [r3, #40]	; 0x28
	FORCE_OC1REF_HIGH();
 8000248:	4b3d      	ldr	r3, [pc, #244]	; (8000340 <ssInit+0x1f4>)
 800024a:	681a      	ldr	r2, [r3, #0]
 800024c:	6813      	ldr	r3, [r2, #0]
 800024e:	2105      	movs	r1, #5
 8000250:	f361 1306 	bfi	r3, r1, #4, #3
 8000254:	6013      	str	r3, [r2, #0]
	CONFIG_TIM3_CC1_OUT_MODE(0);		/* start bit */
 8000256:	4b3a      	ldr	r3, [pc, #232]	; (8000340 <ssInit+0x1f4>)
 8000258:	681a      	ldr	r2, [r3, #0]
 800025a:	6813      	ldr	r3, [r2, #0]
 800025c:	2102      	movs	r1, #2
 800025e:	f361 1306 	bfi	r3, r1, #4, #3
 8000262:	6013      	str	r3, [r2, #0]
	CONFIG_TIM3_CC1_DIR();
 8000264:	4b36      	ldr	r3, [pc, #216]	; (8000340 <ssInit+0x1f4>)
 8000266:	681a      	ldr	r2, [r3, #0]
 8000268:	6813      	ldr	r3, [r2, #0]
 800026a:	f36f 0301 	bfc	r3, #0, #2
 800026e:	6013      	str	r3, [r2, #0]
 8000270:	4b33      	ldr	r3, [pc, #204]	; (8000340 <ssInit+0x1f4>)
 8000272:	681a      	ldr	r2, [r3, #0]
 8000274:	6813      	ldr	r3, [r2, #0]
 8000276:	f36f 4310 	bfc	r3, #16, #1
 800027a:	6013      	str	r3, [r2, #0]
	CONFIG_TIM3_CC2_DIR();
 800027c:	4b30      	ldr	r3, [pc, #192]	; (8000340 <ssInit+0x1f4>)
 800027e:	681a      	ldr	r2, [r3, #0]
 8000280:	6813      	ldr	r3, [r2, #0]
 8000282:	2101      	movs	r1, #1
 8000284:	f361 2309 	bfi	r3, r1, #8, #2
 8000288:	6013      	str	r3, [r2, #0]
	CONFIG_TIM3_CC3_DIR();
 800028a:	4b2e      	ldr	r3, [pc, #184]	; (8000344 <ssInit+0x1f8>)
 800028c:	681a      	ldr	r2, [r3, #0]
 800028e:	6813      	ldr	r3, [r2, #0]
 8000290:	f36f 0301 	bfc	r3, #0, #2
 8000294:	6013      	str	r3, [r2, #0]
	ENABLE_TIM3_INTERRUPT();
 8000296:	4b2c      	ldr	r3, [pc, #176]	; (8000348 <ssInit+0x1fc>)
 8000298:	681b      	ldr	r3, [r3, #0]
 800029a:	4a2b      	ldr	r2, [pc, #172]	; (8000348 <ssInit+0x1fc>)
 800029c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80002a0:	6013      	str	r3, [r2, #0]
	ENABLE_TIM3_CC2_INT();
 80002a2:	4b2a      	ldr	r3, [pc, #168]	; (800034c <ssInit+0x200>)
 80002a4:	681a      	ldr	r2, [r3, #0]
 80002a6:	8813      	ldrh	r3, [r2, #0]
 80002a8:	f043 0304 	orr.w	r3, r3, #4
 80002ac:	8013      	strh	r3, [r2, #0]
	CONFIG_TIM3_CC2_CAP_TRIGGER(FALLING_EDGE);
 80002ae:	4b28      	ldr	r3, [pc, #160]	; (8000350 <ssInit+0x204>)
 80002b0:	681b      	ldr	r3, [r3, #0]
 80002b2:	681b      	ldr	r3, [r3, #0]
 80002b4:	f3c3 1303 	ubfx	r3, r3, #4, #4
 80002b8:	b2db      	uxtb	r3, r3
 80002ba:	b25b      	sxtb	r3, r3
 80002bc:	f003 0301 	and.w	r3, r3, #1
 80002c0:	b25b      	sxtb	r3, r3
 80002c2:	f043 0302 	orr.w	r3, r3, #2
 80002c6:	b259      	sxtb	r1, r3
 80002c8:	4b21      	ldr	r3, [pc, #132]	; (8000350 <ssInit+0x204>)
 80002ca:	681a      	ldr	r2, [r3, #0]
 80002cc:	460b      	mov	r3, r1
 80002ce:	f003 030f 	and.w	r3, r3, #15
 80002d2:	b2d9      	uxtb	r1, r3
 80002d4:	8813      	ldrh	r3, [r2, #0]
 80002d6:	f361 1307 	bfi	r3, r1, #4, #4
 80002da:	8013      	strh	r3, [r2, #0]
	ENABLE_TIM3_INPUT_CAP2();
 80002dc:	4b1c      	ldr	r3, [pc, #112]	; (8000350 <ssInit+0x204>)
 80002de:	681b      	ldr	r3, [r3, #0]
 80002e0:	681b      	ldr	r3, [r3, #0]
 80002e2:	f3c3 1303 	ubfx	r3, r3, #4, #4
 80002e6:	b2db      	uxtb	r3, r3
 80002e8:	4a19      	ldr	r2, [pc, #100]	; (8000350 <ssInit+0x204>)
 80002ea:	6812      	ldr	r2, [r2, #0]
 80002ec:	f043 0301 	orr.w	r3, r3, #1
 80002f0:	b2d9      	uxtb	r1, r3
 80002f2:	8813      	ldrh	r3, [r2, #0]
 80002f4:	f361 1307 	bfi	r3, r1, #4, #4
 80002f8:	8013      	strh	r3, [r2, #0]
	ENABLE_TIM3_COUNTER();
 80002fa:	4b16      	ldr	r3, [pc, #88]	; (8000354 <ssInit+0x208>)
 80002fc:	681a      	ldr	r2, [r3, #0]
 80002fe:	8813      	ldrh	r3, [r2, #0]
 8000300:	f043 0301 	orr.w	r3, r3, #1
 8000304:	8013      	strh	r3, [r2, #0]
 8000306:	e000      	b.n	800030a <ssInit+0x1be>
		return;
 8000308:	bf00      	nop
}
 800030a:	3714      	adds	r7, #20
 800030c:	46bd      	mov	sp, r7
 800030e:	bc80      	pop	{r7}
 8000310:	4770      	bx	lr
 8000312:	bf00      	nop
 8000314:	20000168 	.word	0x20000168
 8000318:	20000164 	.word	0x20000164
 800031c:	20000160 	.word	0x20000160
 8000320:	2000015c 	.word	0x2000015c
 8000324:	2000014c 	.word	0x2000014c
 8000328:	20000018 	.word	0x20000018
 800032c:	20000040 	.word	0x20000040
 8000330:	20000158 	.word	0x20000158
 8000334:	40021000 	.word	0x40021000
 8000338:	40010800 	.word	0x40010800
 800033c:	40000400 	.word	0x40000400
 8000340:	20000008 	.word	0x20000008
 8000344:	2000000c 	.word	0x2000000c
 8000348:	e000e100 	.word	0xe000e100
 800034c:	20000004 	.word	0x20000004
 8000350:	20000010 	.word	0x20000010
 8000354:	20000014 	.word	0x20000014

08000358 <ssWriteByte>:
/**
 * @brief  Write a byte of data into the transmission buffer
 * @param  byte: data to be transmitted
 * @retval None
 */
void ssWriteByte(char byte) {
 8000358:	b480      	push	{r7}
 800035a:	b083      	sub	sp, #12
 800035c:	af00      	add	r7, sp, #0
 800035e:	4603      	mov	r3, r0
 8000360:	71fb      	strb	r3, [r7, #7]
	while(pend_tx_byte == SS_MAX_TX_BUFF);
 8000362:	bf00      	nop
 8000364:	4b47      	ldr	r3, [pc, #284]	; (8000484 <ssWriteByte+0x12c>)
 8000366:	781b      	ldrb	r3, [r3, #0]
 8000368:	b2db      	uxtb	r3, r3
 800036a:	2b80      	cmp	r3, #128	; 0x80
 800036c:	d0fa      	beq.n	8000364 <ssWriteByte+0xc>
	DISABLE_TIM3_INTERRUPT();
 800036e:	4b46      	ldr	r3, [pc, #280]	; (8000488 <ssWriteByte+0x130>)
 8000370:	681b      	ldr	r3, [r3, #0]
 8000372:	4a45      	ldr	r2, [pc, #276]	; (8000488 <ssWriteByte+0x130>)
 8000374:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8000378:	6013      	str	r3, [r2, #0]
	tx_buff_byte.pos = tx_byte.pos + pend_tx_byte;
 800037a:	4b44      	ldr	r3, [pc, #272]	; (800048c <ssWriteByte+0x134>)
 800037c:	781b      	ldrb	r3, [r3, #0]
 800037e:	f3c3 0306 	ubfx	r3, r3, #0, #7
 8000382:	b2db      	uxtb	r3, r3
 8000384:	461a      	mov	r2, r3
 8000386:	4b3f      	ldr	r3, [pc, #252]	; (8000484 <ssWriteByte+0x12c>)
 8000388:	781b      	ldrb	r3, [r3, #0]
 800038a:	b2db      	uxtb	r3, r3
 800038c:	4413      	add	r3, r2
 800038e:	b2db      	uxtb	r3, r3
 8000390:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8000394:	b2d9      	uxtb	r1, r3
 8000396:	4a3e      	ldr	r2, [pc, #248]	; (8000490 <ssWriteByte+0x138>)
 8000398:	7813      	ldrb	r3, [r2, #0]
 800039a:	f361 0306 	bfi	r3, r1, #0, #7
 800039e:	7013      	strb	r3, [r2, #0]
	tx_buff[tx_buff_byte.pos] = byte;
 80003a0:	4b3b      	ldr	r3, [pc, #236]	; (8000490 <ssWriteByte+0x138>)
 80003a2:	781b      	ldrb	r3, [r3, #0]
 80003a4:	f3c3 0306 	ubfx	r3, r3, #0, #7
 80003a8:	b2db      	uxtb	r3, r3
 80003aa:	4619      	mov	r1, r3
 80003ac:	4a39      	ldr	r2, [pc, #228]	; (8000494 <ssWriteByte+0x13c>)
 80003ae:	79fb      	ldrb	r3, [r7, #7]
 80003b0:	5453      	strb	r3, [r2, r1]
	pend_tx_byte++;
 80003b2:	4b34      	ldr	r3, [pc, #208]	; (8000484 <ssWriteByte+0x12c>)
 80003b4:	781b      	ldrb	r3, [r3, #0]
 80003b6:	b2db      	uxtb	r3, r3
 80003b8:	3301      	adds	r3, #1
 80003ba:	b2da      	uxtb	r2, r3
 80003bc:	4b31      	ldr	r3, [pc, #196]	; (8000484 <ssWriteByte+0x12c>)
 80003be:	701a      	strb	r2, [r3, #0]
	if(!TIM3_DIER->CC1IE) {
 80003c0:	4b35      	ldr	r3, [pc, #212]	; (8000498 <ssWriteByte+0x140>)
 80003c2:	681b      	ldr	r3, [r3, #0]
 80003c4:	681b      	ldr	r3, [r3, #0]
 80003c6:	f3c3 0340 	ubfx	r3, r3, #1, #1
 80003ca:	b2db      	uxtb	r3, r3
 80003cc:	2b00      	cmp	r3, #0
 80003ce:	d14e      	bne.n	800046e <ssWriteByte+0x116>
		/* Note: avoid looping here to improve the execution speed */
		tx_data[0] = (byte >> 0) & 0x01;
 80003d0:	79fb      	ldrb	r3, [r7, #7]
 80003d2:	f003 0301 	and.w	r3, r3, #1
 80003d6:	b2da      	uxtb	r2, r3
 80003d8:	4b30      	ldr	r3, [pc, #192]	; (800049c <ssWriteByte+0x144>)
 80003da:	701a      	strb	r2, [r3, #0]
		tx_data[1] = (byte >> 1) & 0x01;
 80003dc:	79fb      	ldrb	r3, [r7, #7]
 80003de:	085b      	lsrs	r3, r3, #1
 80003e0:	b2db      	uxtb	r3, r3
 80003e2:	f003 0301 	and.w	r3, r3, #1
 80003e6:	b2da      	uxtb	r2, r3
 80003e8:	4b2c      	ldr	r3, [pc, #176]	; (800049c <ssWriteByte+0x144>)
 80003ea:	705a      	strb	r2, [r3, #1]
		tx_data[2] = (byte >> 2) & 0x01;
 80003ec:	79fb      	ldrb	r3, [r7, #7]
 80003ee:	089b      	lsrs	r3, r3, #2
 80003f0:	b2db      	uxtb	r3, r3
 80003f2:	f003 0301 	and.w	r3, r3, #1
 80003f6:	b2da      	uxtb	r2, r3
 80003f8:	4b28      	ldr	r3, [pc, #160]	; (800049c <ssWriteByte+0x144>)
 80003fa:	709a      	strb	r2, [r3, #2]
		tx_data[3] = (byte >> 3) & 0x01;
 80003fc:	79fb      	ldrb	r3, [r7, #7]
 80003fe:	08db      	lsrs	r3, r3, #3
 8000400:	b2db      	uxtb	r3, r3
 8000402:	f003 0301 	and.w	r3, r3, #1
 8000406:	b2da      	uxtb	r2, r3
 8000408:	4b24      	ldr	r3, [pc, #144]	; (800049c <ssWriteByte+0x144>)
 800040a:	70da      	strb	r2, [r3, #3]
		tx_data[4] = (byte >> 4) & 0x01;
 800040c:	79fb      	ldrb	r3, [r7, #7]
 800040e:	091b      	lsrs	r3, r3, #4
 8000410:	b2db      	uxtb	r3, r3
 8000412:	f003 0301 	and.w	r3, r3, #1
 8000416:	b2da      	uxtb	r2, r3
 8000418:	4b20      	ldr	r3, [pc, #128]	; (800049c <ssWriteByte+0x144>)
 800041a:	711a      	strb	r2, [r3, #4]
		tx_data[5] = (byte >> 5) & 0x01;
 800041c:	79fb      	ldrb	r3, [r7, #7]
 800041e:	095b      	lsrs	r3, r3, #5
 8000420:	b2db      	uxtb	r3, r3
 8000422:	f003 0301 	and.w	r3, r3, #1
 8000426:	b2da      	uxtb	r2, r3
 8000428:	4b1c      	ldr	r3, [pc, #112]	; (800049c <ssWriteByte+0x144>)
 800042a:	715a      	strb	r2, [r3, #5]
		tx_data[6] = (byte >> 6) & 0x01;
 800042c:	79fb      	ldrb	r3, [r7, #7]
 800042e:	099b      	lsrs	r3, r3, #6
 8000430:	b2db      	uxtb	r3, r3
 8000432:	f003 0301 	and.w	r3, r3, #1
 8000436:	b2da      	uxtb	r2, r3
 8000438:	4b18      	ldr	r3, [pc, #96]	; (800049c <ssWriteByte+0x144>)
 800043a:	719a      	strb	r2, [r3, #6]
		tx_data[7] = (byte >> 7) & 0x01;
 800043c:	79fb      	ldrb	r3, [r7, #7]
 800043e:	09db      	lsrs	r3, r3, #7
 8000440:	b2da      	uxtb	r2, r3
 8000442:	4b16      	ldr	r3, [pc, #88]	; (800049c <ssWriteByte+0x144>)
 8000444:	71da      	strb	r2, [r3, #7]
		ENABLE_TIM3_CC1_INT();
 8000446:	4b14      	ldr	r3, [pc, #80]	; (8000498 <ssWriteByte+0x140>)
 8000448:	681a      	ldr	r2, [r3, #0]
 800044a:	8813      	ldrh	r3, [r2, #0]
 800044c:	f043 0302 	orr.w	r3, r3, #2
 8000450:	8013      	strh	r3, [r2, #0]
		ENABLE_TIM3_OUTPUT_COMP1();
 8000452:	4b13      	ldr	r3, [pc, #76]	; (80004a0 <ssWriteByte+0x148>)
 8000454:	681a      	ldr	r2, [r3, #0]
 8000456:	8813      	ldrh	r3, [r2, #0]
 8000458:	2101      	movs	r1, #1
 800045a:	f361 0303 	bfi	r3, r1, #0, #4
 800045e:	8013      	strh	r3, [r2, #0]
		TIM3->CCR1 = TIM3->CNT + cnt_per_bit;
 8000460:	4b10      	ldr	r3, [pc, #64]	; (80004a4 <ssWriteByte+0x14c>)
 8000462:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000464:	4b10      	ldr	r3, [pc, #64]	; (80004a8 <ssWriteByte+0x150>)
 8000466:	681b      	ldr	r3, [r3, #0]
 8000468:	490e      	ldr	r1, [pc, #56]	; (80004a4 <ssWriteByte+0x14c>)
 800046a:	4413      	add	r3, r2
 800046c:	634b      	str	r3, [r1, #52]	; 0x34
	}
	ENABLE_TIM3_INTERRUPT();
 800046e:	4b06      	ldr	r3, [pc, #24]	; (8000488 <ssWriteByte+0x130>)
 8000470:	681b      	ldr	r3, [r3, #0]
 8000472:	4a05      	ldr	r2, [pc, #20]	; (8000488 <ssWriteByte+0x130>)
 8000474:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8000478:	6013      	str	r3, [r2, #0]
}
 800047a:	bf00      	nop
 800047c:	370c      	adds	r7, #12
 800047e:	46bd      	mov	sp, r7
 8000480:	bc80      	pop	{r7}
 8000482:	4770      	bx	lr
 8000484:	20000144 	.word	0x20000144
 8000488:	e000e100 	.word	0xe000e100
 800048c:	20000160 	.word	0x20000160
 8000490:	2000015c 	.word	0x2000015c
 8000494:	20000044 	.word	0x20000044
 8000498:	20000004 	.word	0x20000004
 800049c:	2000014c 	.word	0x2000014c
 80004a0:	20000010 	.word	0x20000010
 80004a4:	40000400 	.word	0x40000400
 80004a8:	20000040 	.word	0x20000040

080004ac <isRxAvailable>:
/**
 * @brief  Check for the availability of data in reception buffer
 * @param  None
 * @retval Number of data in the buffer
 */
uint8_t isRxAvailable() {
 80004ac:	b480      	push	{r7}
 80004ae:	af00      	add	r7, sp, #0
	return available_rx_byte;
 80004b0:	4b03      	ldr	r3, [pc, #12]	; (80004c0 <isRxAvailable+0x14>)
 80004b2:	781b      	ldrb	r3, [r3, #0]
 80004b4:	b2db      	uxtb	r3, r3
}
 80004b6:	4618      	mov	r0, r3
 80004b8:	46bd      	mov	sp, r7
 80004ba:	bc80      	pop	{r7}
 80004bc:	4770      	bx	lr
 80004be:	bf00      	nop
 80004c0:	20000145 	.word	0x20000145

080004c4 <ssReadByte>:
/**
 * @brief  Read a byte of data from the reception buffer
 * @param  None
 * @retval First available byte of data in the buffer
 */
char ssReadByte() {
 80004c4:	b480      	push	{r7}
 80004c6:	af00      	add	r7, sp, #0
	if(available_rx_byte) {
 80004c8:	4b15      	ldr	r3, [pc, #84]	; (8000520 <ssReadByte+0x5c>)
 80004ca:	781b      	ldrb	r3, [r3, #0]
 80004cc:	b2db      	uxtb	r3, r3
 80004ce:	2b00      	cmp	r3, #0
 80004d0:	d020      	beq.n	8000514 <ssReadByte+0x50>
		curr_rbyte.pos = rx_byte.pos - available_rx_byte--;
 80004d2:	4b14      	ldr	r3, [pc, #80]	; (8000524 <ssReadByte+0x60>)
 80004d4:	781b      	ldrb	r3, [r3, #0]
 80004d6:	f3c3 0306 	ubfx	r3, r3, #0, #7
 80004da:	b2db      	uxtb	r3, r3
 80004dc:	4619      	mov	r1, r3
 80004de:	4b10      	ldr	r3, [pc, #64]	; (8000520 <ssReadByte+0x5c>)
 80004e0:	781b      	ldrb	r3, [r3, #0]
 80004e2:	b2db      	uxtb	r3, r3
 80004e4:	1e5a      	subs	r2, r3, #1
 80004e6:	b2d0      	uxtb	r0, r2
 80004e8:	4a0d      	ldr	r2, [pc, #52]	; (8000520 <ssReadByte+0x5c>)
 80004ea:	7010      	strb	r0, [r2, #0]
 80004ec:	1acb      	subs	r3, r1, r3
 80004ee:	b2db      	uxtb	r3, r3
 80004f0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80004f4:	b2d9      	uxtb	r1, r3
 80004f6:	4a0c      	ldr	r2, [pc, #48]	; (8000528 <ssReadByte+0x64>)
 80004f8:	7813      	ldrb	r3, [r2, #0]
 80004fa:	f361 0306 	bfi	r3, r1, #0, #7
 80004fe:	7013      	strb	r3, [r2, #0]
		return rx_buff[curr_rbyte.pos];
 8000500:	4b09      	ldr	r3, [pc, #36]	; (8000528 <ssReadByte+0x64>)
 8000502:	781b      	ldrb	r3, [r3, #0]
 8000504:	f3c3 0306 	ubfx	r3, r3, #0, #7
 8000508:	b2db      	uxtb	r3, r3
 800050a:	461a      	mov	r2, r3
 800050c:	4b07      	ldr	r3, [pc, #28]	; (800052c <ssReadByte+0x68>)
 800050e:	5c9b      	ldrb	r3, [r3, r2]
 8000510:	b2db      	uxtb	r3, r3
 8000512:	e000      	b.n	8000516 <ssReadByte+0x52>
	}

	else
		return -1;
 8000514:	23ff      	movs	r3, #255	; 0xff
}
 8000516:	4618      	mov	r0, r3
 8000518:	46bd      	mov	sp, r7
 800051a:	bc80      	pop	{r7}
 800051c:	4770      	bx	lr
 800051e:	bf00      	nop
 8000520:	20000145 	.word	0x20000145
 8000524:	20000168 	.word	0x20000168
 8000528:	20000164 	.word	0x20000164
 800052c:	200000c4 	.word	0x200000c4

08000530 <TIM3_IRQHandler>:
/**
 * @brief  Interrupt service routine for data reception and transmission
 * @param  None
 * @retval None
 */
void TIM3_IRQHandler() {
 8000530:	b480      	push	{r7}
 8000532:	b083      	sub	sp, #12
 8000534:	af00      	add	r7, sp, #0
	/* Falling edge (start bit) detection */
	if(TIM3_SR->CC2IF) {
 8000536:	4b8c      	ldr	r3, [pc, #560]	; (8000768 <TIM3_IRQHandler+0x238>)
 8000538:	681b      	ldr	r3, [r3, #0]
 800053a:	681b      	ldr	r3, [r3, #0]
 800053c:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8000540:	b2db      	uxtb	r3, r3
 8000542:	2b00      	cmp	r3, #0
 8000544:	d043      	beq.n	80005ce <TIM3_IRQHandler+0x9e>
		uint32_t cap_cnt = TIM3->CCR2;
 8000546:	4b89      	ldr	r3, [pc, #548]	; (800076c <TIM3_IRQHandler+0x23c>)
 8000548:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800054a:	607b      	str	r3, [r7, #4]
		if(!is_receiving && !RX_DATA) {	/* start bit */
 800054c:	4b88      	ldr	r3, [pc, #544]	; (8000770 <TIM3_IRQHandler+0x240>)
 800054e:	781b      	ldrb	r3, [r3, #0]
 8000550:	b2db      	uxtb	r3, r3
 8000552:	2b00      	cmp	r3, #0
 8000554:	d13b      	bne.n	80005ce <TIM3_IRQHandler+0x9e>
 8000556:	4b87      	ldr	r3, [pc, #540]	; (8000774 <TIM3_IRQHandler+0x244>)
 8000558:	691b      	ldr	r3, [r3, #16]
 800055a:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 800055e:	b2db      	uxtb	r3, r3
 8000560:	2b00      	cmp	r3, #0
 8000562:	d134      	bne.n	80005ce <TIM3_IRQHandler+0x9e>
			TIM3->CCR3 = cap_cnt + one_and_half_bit_time;
 8000564:	4b84      	ldr	r3, [pc, #528]	; (8000778 <TIM3_IRQHandler+0x248>)
 8000566:	681a      	ldr	r2, [r3, #0]
 8000568:	4980      	ldr	r1, [pc, #512]	; (800076c <TIM3_IRQHandler+0x23c>)
 800056a:	687b      	ldr	r3, [r7, #4]
 800056c:	4413      	add	r3, r2
 800056e:	63cb      	str	r3, [r1, #60]	; 0x3c
			TIM3_SR->CC3IF = 0;
 8000570:	4b7d      	ldr	r3, [pc, #500]	; (8000768 <TIM3_IRQHandler+0x238>)
 8000572:	681a      	ldr	r2, [r3, #0]
 8000574:	8813      	ldrh	r3, [r2, #0]
 8000576:	f36f 03c3 	bfc	r3, #3, #1
 800057a:	8013      	strh	r3, [r2, #0]
			is_receiving = 1;
 800057c:	4b7c      	ldr	r3, [pc, #496]	; (8000770 <TIM3_IRQHandler+0x240>)
 800057e:	2201      	movs	r2, #1
 8000580:	701a      	strb	r2, [r3, #0]
			is_rx_buff_available = (available_rx_byte < SS_MAX_RX_BUFF);
 8000582:	4b7e      	ldr	r3, [pc, #504]	; (800077c <TIM3_IRQHandler+0x24c>)
 8000584:	781b      	ldrb	r3, [r3, #0]
 8000586:	b2db      	uxtb	r3, r3
 8000588:	b25b      	sxtb	r3, r3
 800058a:	43db      	mvns	r3, r3
 800058c:	b2db      	uxtb	r3, r3
 800058e:	09db      	lsrs	r3, r3, #7
 8000590:	b2db      	uxtb	r3, r3
 8000592:	461a      	mov	r2, r3
 8000594:	4b7a      	ldr	r3, [pc, #488]	; (8000780 <TIM3_IRQHandler+0x250>)
 8000596:	701a      	strb	r2, [r3, #0]
			ENABLE_TIM3_CC3_INT();
 8000598:	4b7a      	ldr	r3, [pc, #488]	; (8000784 <TIM3_IRQHandler+0x254>)
 800059a:	681a      	ldr	r2, [r3, #0]
 800059c:	8813      	ldrh	r3, [r2, #0]
 800059e:	f043 0308 	orr.w	r3, r3, #8
 80005a2:	8013      	strh	r3, [r2, #0]
			DISABLE_TIM3_INPUT_CAP2();
 80005a4:	4b78      	ldr	r3, [pc, #480]	; (8000788 <TIM3_IRQHandler+0x258>)
 80005a6:	681b      	ldr	r3, [r3, #0]
 80005a8:	681b      	ldr	r3, [r3, #0]
 80005aa:	f3c3 1303 	ubfx	r3, r3, #4, #4
 80005ae:	b2db      	uxtb	r3, r3
 80005b0:	4a75      	ldr	r2, [pc, #468]	; (8000788 <TIM3_IRQHandler+0x258>)
 80005b2:	6812      	ldr	r2, [r2, #0]
 80005b4:	f003 030e 	and.w	r3, r3, #14
 80005b8:	b2d9      	uxtb	r1, r3
 80005ba:	8813      	ldrh	r3, [r2, #0]
 80005bc:	f361 1307 	bfi	r3, r1, #4, #4
 80005c0:	8013      	strh	r3, [r2, #0]
			DISABLE_TIM3_CC2_INT();
 80005c2:	4b70      	ldr	r3, [pc, #448]	; (8000784 <TIM3_IRQHandler+0x254>)
 80005c4:	681a      	ldr	r2, [r3, #0]
 80005c6:	8813      	ldrh	r3, [r2, #0]
 80005c8:	f36f 0382 	bfc	r3, #2, #1
 80005cc:	8013      	strh	r3, [r2, #0]
		}
	}

	/* Reception */
	if(is_receiving && TIM3_SR->CC3IF) {
 80005ce:	4b68      	ldr	r3, [pc, #416]	; (8000770 <TIM3_IRQHandler+0x240>)
 80005d0:	781b      	ldrb	r3, [r3, #0]
 80005d2:	b2db      	uxtb	r3, r3
 80005d4:	2b00      	cmp	r3, #0
 80005d6:	f000 808b 	beq.w	80006f0 <TIM3_IRQHandler+0x1c0>
 80005da:	4b63      	ldr	r3, [pc, #396]	; (8000768 <TIM3_IRQHandler+0x238>)
 80005dc:	681b      	ldr	r3, [r3, #0]
 80005de:	681b      	ldr	r3, [r3, #0]
 80005e0:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 80005e4:	b2db      	uxtb	r3, r3
 80005e6:	2b00      	cmp	r3, #0
 80005e8:	f000 8082 	beq.w	80006f0 <TIM3_IRQHandler+0x1c0>
		TIM3_SR->CC3IF = 0;
 80005ec:	4b5e      	ldr	r3, [pc, #376]	; (8000768 <TIM3_IRQHandler+0x238>)
 80005ee:	681a      	ldr	r2, [r3, #0]
 80005f0:	8813      	ldrh	r3, [r2, #0]
 80005f2:	f36f 03c3 	bfc	r3, #3, #1
 80005f6:	8013      	strh	r3, [r2, #0]
		TIM3->CCR3 += cnt_per_bit;
 80005f8:	4b64      	ldr	r3, [pc, #400]	; (800078c <TIM3_IRQHandler+0x25c>)
 80005fa:	681a      	ldr	r2, [r3, #0]
 80005fc:	4b5b      	ldr	r3, [pc, #364]	; (800076c <TIM3_IRQHandler+0x23c>)
 80005fe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000600:	495a      	ldr	r1, [pc, #360]	; (800076c <TIM3_IRQHandler+0x23c>)
 8000602:	4413      	add	r3, r2
 8000604:	63cb      	str	r3, [r1, #60]	; 0x3c
		if(rx_bit < 8) {
 8000606:	4b62      	ldr	r3, [pc, #392]	; (8000790 <TIM3_IRQHandler+0x260>)
 8000608:	781b      	ldrb	r3, [r3, #0]
 800060a:	b2db      	uxtb	r3, r3
 800060c:	2b07      	cmp	r3, #7
 800060e:	d81c      	bhi.n	800064a <TIM3_IRQHandler+0x11a>
			rx_data |= RX_DATA << rx_bit;
 8000610:	4b58      	ldr	r3, [pc, #352]	; (8000774 <TIM3_IRQHandler+0x244>)
 8000612:	691b      	ldr	r3, [r3, #16]
 8000614:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 8000618:	b2db      	uxtb	r3, r3
 800061a:	461a      	mov	r2, r3
 800061c:	4b5c      	ldr	r3, [pc, #368]	; (8000790 <TIM3_IRQHandler+0x260>)
 800061e:	781b      	ldrb	r3, [r3, #0]
 8000620:	b2db      	uxtb	r3, r3
 8000622:	fa02 f303 	lsl.w	r3, r2, r3
 8000626:	b25a      	sxtb	r2, r3
 8000628:	4b5a      	ldr	r3, [pc, #360]	; (8000794 <TIM3_IRQHandler+0x264>)
 800062a:	781b      	ldrb	r3, [r3, #0]
 800062c:	b2db      	uxtb	r3, r3
 800062e:	b25b      	sxtb	r3, r3
 8000630:	4313      	orrs	r3, r2
 8000632:	b25b      	sxtb	r3, r3
 8000634:	b2da      	uxtb	r2, r3
 8000636:	4b57      	ldr	r3, [pc, #348]	; (8000794 <TIM3_IRQHandler+0x264>)
 8000638:	701a      	strb	r2, [r3, #0]
			rx_bit++;
 800063a:	4b55      	ldr	r3, [pc, #340]	; (8000790 <TIM3_IRQHandler+0x260>)
 800063c:	781b      	ldrb	r3, [r3, #0]
 800063e:	b2db      	uxtb	r3, r3
 8000640:	3301      	adds	r3, #1
 8000642:	b2da      	uxtb	r2, r3
 8000644:	4b52      	ldr	r3, [pc, #328]	; (8000790 <TIM3_IRQHandler+0x260>)
 8000646:	701a      	strb	r2, [r3, #0]
 8000648:	e052      	b.n	80006f0 <TIM3_IRQHandler+0x1c0>
		} else {
			if(RX_DATA) {	/* stop bit */
 800064a:	4b4a      	ldr	r3, [pc, #296]	; (8000774 <TIM3_IRQHandler+0x244>)
 800064c:	691b      	ldr	r3, [r3, #16]
 800064e:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 8000652:	b2db      	uxtb	r3, r3
 8000654:	2b00      	cmp	r3, #0
 8000656:	d024      	beq.n	80006a2 <TIM3_IRQHandler+0x172>
				if(is_rx_buff_available) {
 8000658:	4b49      	ldr	r3, [pc, #292]	; (8000780 <TIM3_IRQHandler+0x250>)
 800065a:	781b      	ldrb	r3, [r3, #0]
 800065c:	b2db      	uxtb	r3, r3
 800065e:	2b00      	cmp	r3, #0
 8000660:	d01f      	beq.n	80006a2 <TIM3_IRQHandler+0x172>
					rx_buff[rx_byte.pos] = rx_data;
 8000662:	4b4d      	ldr	r3, [pc, #308]	; (8000798 <TIM3_IRQHandler+0x268>)
 8000664:	781b      	ldrb	r3, [r3, #0]
 8000666:	f3c3 0306 	ubfx	r3, r3, #0, #7
 800066a:	b2db      	uxtb	r3, r3
 800066c:	461a      	mov	r2, r3
 800066e:	4b49      	ldr	r3, [pc, #292]	; (8000794 <TIM3_IRQHandler+0x264>)
 8000670:	781b      	ldrb	r3, [r3, #0]
 8000672:	b2d9      	uxtb	r1, r3
 8000674:	4b49      	ldr	r3, [pc, #292]	; (800079c <TIM3_IRQHandler+0x26c>)
 8000676:	5499      	strb	r1, [r3, r2]
					available_rx_byte++;
 8000678:	4b40      	ldr	r3, [pc, #256]	; (800077c <TIM3_IRQHandler+0x24c>)
 800067a:	781b      	ldrb	r3, [r3, #0]
 800067c:	b2db      	uxtb	r3, r3
 800067e:	3301      	adds	r3, #1
 8000680:	b2da      	uxtb	r2, r3
 8000682:	4b3e      	ldr	r3, [pc, #248]	; (800077c <TIM3_IRQHandler+0x24c>)
 8000684:	701a      	strb	r2, [r3, #0]
					rx_byte.pos++;
 8000686:	4b44      	ldr	r3, [pc, #272]	; (8000798 <TIM3_IRQHandler+0x268>)
 8000688:	781b      	ldrb	r3, [r3, #0]
 800068a:	f3c3 0306 	ubfx	r3, r3, #0, #7
 800068e:	b2db      	uxtb	r3, r3
 8000690:	3301      	adds	r3, #1
 8000692:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8000696:	b2d9      	uxtb	r1, r3
 8000698:	4a3f      	ldr	r2, [pc, #252]	; (8000798 <TIM3_IRQHandler+0x268>)
 800069a:	7813      	ldrb	r3, [r2, #0]
 800069c:	f361 0306 	bfi	r3, r1, #0, #7
 80006a0:	7013      	strb	r3, [r2, #0]
				}
			} else {		/* framing error */
				//TODO:	Handle framing error
			}

			rx_data = 0;
 80006a2:	4b3c      	ldr	r3, [pc, #240]	; (8000794 <TIM3_IRQHandler+0x264>)
 80006a4:	2200      	movs	r2, #0
 80006a6:	701a      	strb	r2, [r3, #0]
			is_receiving = 0;
 80006a8:	4b31      	ldr	r3, [pc, #196]	; (8000770 <TIM3_IRQHandler+0x240>)
 80006aa:	2200      	movs	r2, #0
 80006ac:	701a      	strb	r2, [r3, #0]
			rx_bit = 0;
 80006ae:	4b38      	ldr	r3, [pc, #224]	; (8000790 <TIM3_IRQHandler+0x260>)
 80006b0:	2200      	movs	r2, #0
 80006b2:	701a      	strb	r2, [r3, #0]
			is_rx_buff_available = 0;
 80006b4:	4b32      	ldr	r3, [pc, #200]	; (8000780 <TIM3_IRQHandler+0x250>)
 80006b6:	2200      	movs	r2, #0
 80006b8:	701a      	strb	r2, [r3, #0]
			ENABLE_TIM3_INPUT_CAP2();
 80006ba:	4b33      	ldr	r3, [pc, #204]	; (8000788 <TIM3_IRQHandler+0x258>)
 80006bc:	681b      	ldr	r3, [r3, #0]
 80006be:	681b      	ldr	r3, [r3, #0]
 80006c0:	f3c3 1303 	ubfx	r3, r3, #4, #4
 80006c4:	b2db      	uxtb	r3, r3
 80006c6:	4a30      	ldr	r2, [pc, #192]	; (8000788 <TIM3_IRQHandler+0x258>)
 80006c8:	6812      	ldr	r2, [r2, #0]
 80006ca:	f043 0301 	orr.w	r3, r3, #1
 80006ce:	b2d9      	uxtb	r1, r3
 80006d0:	8813      	ldrh	r3, [r2, #0]
 80006d2:	f361 1307 	bfi	r3, r1, #4, #4
 80006d6:	8013      	strh	r3, [r2, #0]
			ENABLE_TIM3_CC2_INT();
 80006d8:	4b2a      	ldr	r3, [pc, #168]	; (8000784 <TIM3_IRQHandler+0x254>)
 80006da:	681a      	ldr	r2, [r3, #0]
 80006dc:	8813      	ldrh	r3, [r2, #0]
 80006de:	f043 0304 	orr.w	r3, r3, #4
 80006e2:	8013      	strh	r3, [r2, #0]
			DISABLE_TIM3_CC3_INT();
 80006e4:	4b27      	ldr	r3, [pc, #156]	; (8000784 <TIM3_IRQHandler+0x254>)
 80006e6:	681a      	ldr	r2, [r3, #0]
 80006e8:	8813      	ldrh	r3, [r2, #0]
 80006ea:	f36f 03c3 	bfc	r3, #3, #1
 80006ee:	8013      	strh	r3, [r2, #0]
		}
	}

	/* Transmission */
	if(pend_tx_byte && TIM3_SR->CC1IF) {
 80006f0:	4b2b      	ldr	r3, [pc, #172]	; (80007a0 <TIM3_IRQHandler+0x270>)
 80006f2:	781b      	ldrb	r3, [r3, #0]
 80006f4:	b2db      	uxtb	r3, r3
 80006f6:	2b00      	cmp	r3, #0
 80006f8:	f000 80ee 	beq.w	80008d8 <TIM3_IRQHandler+0x3a8>
 80006fc:	4b1a      	ldr	r3, [pc, #104]	; (8000768 <TIM3_IRQHandler+0x238>)
 80006fe:	681b      	ldr	r3, [r3, #0]
 8000700:	681b      	ldr	r3, [r3, #0]
 8000702:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8000706:	b2db      	uxtb	r3, r3
 8000708:	2b00      	cmp	r3, #0
 800070a:	f000 80e5 	beq.w	80008d8 <TIM3_IRQHandler+0x3a8>
		TIM3_SR->CC1IF = 0;
 800070e:	4b16      	ldr	r3, [pc, #88]	; (8000768 <TIM3_IRQHandler+0x238>)
 8000710:	681a      	ldr	r2, [r3, #0]
 8000712:	8813      	ldrh	r3, [r2, #0]
 8000714:	f36f 0341 	bfc	r3, #1, #1
 8000718:	8013      	strh	r3, [r2, #0]
		TIM3->CCR1 += cnt_per_bit;
 800071a:	4b1c      	ldr	r3, [pc, #112]	; (800078c <TIM3_IRQHandler+0x25c>)
 800071c:	681a      	ldr	r2, [r3, #0]
 800071e:	4b13      	ldr	r3, [pc, #76]	; (800076c <TIM3_IRQHandler+0x23c>)
 8000720:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000722:	4912      	ldr	r1, [pc, #72]	; (800076c <TIM3_IRQHandler+0x23c>)
 8000724:	4413      	add	r3, r2
 8000726:	634b      	str	r3, [r1, #52]	; 0x34

		if(tx_bit < 9) {
 8000728:	4b1e      	ldr	r3, [pc, #120]	; (80007a4 <TIM3_IRQHandler+0x274>)
 800072a:	781b      	ldrb	r3, [r3, #0]
 800072c:	b2db      	uxtb	r3, r3
 800072e:	2b08      	cmp	r3, #8
 8000730:	d83e      	bhi.n	80007b0 <TIM3_IRQHandler+0x280>
			CONFIG_TIM3_CC1_OUT_MODE(tx_data[tx_bit++]);
 8000732:	4b1c      	ldr	r3, [pc, #112]	; (80007a4 <TIM3_IRQHandler+0x274>)
 8000734:	781b      	ldrb	r3, [r3, #0]
 8000736:	b2db      	uxtb	r3, r3
 8000738:	1c5a      	adds	r2, r3, #1
 800073a:	b2d1      	uxtb	r1, r2
 800073c:	4a19      	ldr	r2, [pc, #100]	; (80007a4 <TIM3_IRQHandler+0x274>)
 800073e:	7011      	strb	r1, [r2, #0]
 8000740:	461a      	mov	r2, r3
 8000742:	4b19      	ldr	r3, [pc, #100]	; (80007a8 <TIM3_IRQHandler+0x278>)
 8000744:	5c9b      	ldrb	r3, [r3, r2]
 8000746:	b2db      	uxtb	r3, r3
 8000748:	461a      	mov	r2, r3
 800074a:	2302      	movs	r3, #2
 800074c:	fa43 f102 	asr.w	r1, r3, r2
 8000750:	4b16      	ldr	r3, [pc, #88]	; (80007ac <TIM3_IRQHandler+0x27c>)
 8000752:	681a      	ldr	r2, [r3, #0]
 8000754:	460b      	mov	r3, r1
 8000756:	f003 0307 	and.w	r3, r3, #7
 800075a:	b2d9      	uxtb	r1, r3
 800075c:	6813      	ldr	r3, [r2, #0]
 800075e:	f361 1306 	bfi	r3, r1, #4, #3
 8000762:	6013      	str	r3, [r2, #0]
				tx_data[6] = (curr_tx_byte >> 6) & 0x01;
				tx_data[7] = (curr_tx_byte >> 7) & 0x01;
			}
		}
	}
}
 8000764:	e0b8      	b.n	80008d8 <TIM3_IRQHandler+0x3a8>
 8000766:	bf00      	nop
 8000768:	20000000 	.word	0x20000000
 800076c:	40000400 	.word	0x40000400
 8000770:	20000148 	.word	0x20000148
 8000774:	40010800 	.word	0x40010800
 8000778:	20000158 	.word	0x20000158
 800077c:	20000145 	.word	0x20000145
 8000780:	20000149 	.word	0x20000149
 8000784:	20000004 	.word	0x20000004
 8000788:	20000010 	.word	0x20000010
 800078c:	20000040 	.word	0x20000040
 8000790:	20000147 	.word	0x20000147
 8000794:	2000014a 	.word	0x2000014a
 8000798:	20000168 	.word	0x20000168
 800079c:	200000c4 	.word	0x200000c4
 80007a0:	20000144 	.word	0x20000144
 80007a4:	20000146 	.word	0x20000146
 80007a8:	2000014c 	.word	0x2000014c
 80007ac:	20000008 	.word	0x20000008
			CONFIG_TIM3_CC1_OUT_MODE(0);			/* start bit */
 80007b0:	4b4c      	ldr	r3, [pc, #304]	; (80008e4 <TIM3_IRQHandler+0x3b4>)
 80007b2:	681a      	ldr	r2, [r3, #0]
 80007b4:	6813      	ldr	r3, [r2, #0]
 80007b6:	2102      	movs	r1, #2
 80007b8:	f361 1306 	bfi	r3, r1, #4, #3
 80007bc:	6013      	str	r3, [r2, #0]
			tx_bit = 0;
 80007be:	4b4a      	ldr	r3, [pc, #296]	; (80008e8 <TIM3_IRQHandler+0x3b8>)
 80007c0:	2200      	movs	r2, #0
 80007c2:	701a      	strb	r2, [r3, #0]
			tx_byte.pos++;
 80007c4:	4b49      	ldr	r3, [pc, #292]	; (80008ec <TIM3_IRQHandler+0x3bc>)
 80007c6:	781b      	ldrb	r3, [r3, #0]
 80007c8:	f3c3 0306 	ubfx	r3, r3, #0, #7
 80007cc:	b2db      	uxtb	r3, r3
 80007ce:	3301      	adds	r3, #1
 80007d0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80007d4:	b2d9      	uxtb	r1, r3
 80007d6:	4a45      	ldr	r2, [pc, #276]	; (80008ec <TIM3_IRQHandler+0x3bc>)
 80007d8:	7813      	ldrb	r3, [r2, #0]
 80007da:	f361 0306 	bfi	r3, r1, #0, #7
 80007de:	7013      	strb	r3, [r2, #0]
			pend_tx_byte--;
 80007e0:	4b43      	ldr	r3, [pc, #268]	; (80008f0 <TIM3_IRQHandler+0x3c0>)
 80007e2:	781b      	ldrb	r3, [r3, #0]
 80007e4:	b2db      	uxtb	r3, r3
 80007e6:	3b01      	subs	r3, #1
 80007e8:	b2da      	uxtb	r2, r3
 80007ea:	4b41      	ldr	r3, [pc, #260]	; (80008f0 <TIM3_IRQHandler+0x3c0>)
 80007ec:	701a      	strb	r2, [r3, #0]
			if(!pend_tx_byte) {
 80007ee:	4b40      	ldr	r3, [pc, #256]	; (80008f0 <TIM3_IRQHandler+0x3c0>)
 80007f0:	781b      	ldrb	r3, [r3, #0]
 80007f2:	b2db      	uxtb	r3, r3
 80007f4:	2b00      	cmp	r3, #0
 80007f6:	d116      	bne.n	8000826 <TIM3_IRQHandler+0x2f6>
				DISABLE_TIM3_CC1_INT();
 80007f8:	4b3e      	ldr	r3, [pc, #248]	; (80008f4 <TIM3_IRQHandler+0x3c4>)
 80007fa:	681a      	ldr	r2, [r3, #0]
 80007fc:	8813      	ldrh	r3, [r2, #0]
 80007fe:	f36f 0341 	bfc	r3, #1, #1
 8000802:	8013      	strh	r3, [r2, #0]
				DISABLE_TIM3_OUTPUT_COMP1();
 8000804:	4b3c      	ldr	r3, [pc, #240]	; (80008f8 <TIM3_IRQHandler+0x3c8>)
 8000806:	681a      	ldr	r2, [r3, #0]
 8000808:	8813      	ldrh	r3, [r2, #0]
 800080a:	f36f 0303 	bfc	r3, #0, #4
 800080e:	8013      	strh	r3, [r2, #0]
				tx_byte.pos = 0;
 8000810:	4a36      	ldr	r2, [pc, #216]	; (80008ec <TIM3_IRQHandler+0x3bc>)
 8000812:	7813      	ldrb	r3, [r2, #0]
 8000814:	f36f 0306 	bfc	r3, #0, #7
 8000818:	7013      	strb	r3, [r2, #0]
				tx_buff_byte.pos = 0;
 800081a:	4a38      	ldr	r2, [pc, #224]	; (80008fc <TIM3_IRQHandler+0x3cc>)
 800081c:	7813      	ldrb	r3, [r2, #0]
 800081e:	f36f 0306 	bfc	r3, #0, #7
 8000822:	7013      	strb	r3, [r2, #0]
}
 8000824:	e058      	b.n	80008d8 <TIM3_IRQHandler+0x3a8>
				curr_tx_byte = tx_buff[tx_byte.pos];
 8000826:	4b31      	ldr	r3, [pc, #196]	; (80008ec <TIM3_IRQHandler+0x3bc>)
 8000828:	781b      	ldrb	r3, [r3, #0]
 800082a:	f3c3 0306 	ubfx	r3, r3, #0, #7
 800082e:	b2db      	uxtb	r3, r3
 8000830:	461a      	mov	r2, r3
 8000832:	4b33      	ldr	r3, [pc, #204]	; (8000900 <TIM3_IRQHandler+0x3d0>)
 8000834:	5c9b      	ldrb	r3, [r3, r2]
 8000836:	b2da      	uxtb	r2, r3
 8000838:	4b32      	ldr	r3, [pc, #200]	; (8000904 <TIM3_IRQHandler+0x3d4>)
 800083a:	701a      	strb	r2, [r3, #0]
				tx_data[0] = (curr_tx_byte >> 0) & 0x01;
 800083c:	4b31      	ldr	r3, [pc, #196]	; (8000904 <TIM3_IRQHandler+0x3d4>)
 800083e:	781b      	ldrb	r3, [r3, #0]
 8000840:	b2db      	uxtb	r3, r3
 8000842:	f003 0301 	and.w	r3, r3, #1
 8000846:	b2da      	uxtb	r2, r3
 8000848:	4b2f      	ldr	r3, [pc, #188]	; (8000908 <TIM3_IRQHandler+0x3d8>)
 800084a:	701a      	strb	r2, [r3, #0]
				tx_data[1] = (curr_tx_byte >> 1) & 0x01;
 800084c:	4b2d      	ldr	r3, [pc, #180]	; (8000904 <TIM3_IRQHandler+0x3d4>)
 800084e:	781b      	ldrb	r3, [r3, #0]
 8000850:	b2db      	uxtb	r3, r3
 8000852:	085b      	lsrs	r3, r3, #1
 8000854:	b2db      	uxtb	r3, r3
 8000856:	f003 0301 	and.w	r3, r3, #1
 800085a:	b2da      	uxtb	r2, r3
 800085c:	4b2a      	ldr	r3, [pc, #168]	; (8000908 <TIM3_IRQHandler+0x3d8>)
 800085e:	705a      	strb	r2, [r3, #1]
				tx_data[2] = (curr_tx_byte >> 2) & 0x01;
 8000860:	4b28      	ldr	r3, [pc, #160]	; (8000904 <TIM3_IRQHandler+0x3d4>)
 8000862:	781b      	ldrb	r3, [r3, #0]
 8000864:	b2db      	uxtb	r3, r3
 8000866:	089b      	lsrs	r3, r3, #2
 8000868:	b2db      	uxtb	r3, r3
 800086a:	f003 0301 	and.w	r3, r3, #1
 800086e:	b2da      	uxtb	r2, r3
 8000870:	4b25      	ldr	r3, [pc, #148]	; (8000908 <TIM3_IRQHandler+0x3d8>)
 8000872:	709a      	strb	r2, [r3, #2]
				tx_data[3] = (curr_tx_byte >> 3) & 0x01;
 8000874:	4b23      	ldr	r3, [pc, #140]	; (8000904 <TIM3_IRQHandler+0x3d4>)
 8000876:	781b      	ldrb	r3, [r3, #0]
 8000878:	b2db      	uxtb	r3, r3
 800087a:	08db      	lsrs	r3, r3, #3
 800087c:	b2db      	uxtb	r3, r3
 800087e:	f003 0301 	and.w	r3, r3, #1
 8000882:	b2da      	uxtb	r2, r3
 8000884:	4b20      	ldr	r3, [pc, #128]	; (8000908 <TIM3_IRQHandler+0x3d8>)
 8000886:	70da      	strb	r2, [r3, #3]
				tx_data[4] = (curr_tx_byte >> 4) & 0x01;
 8000888:	4b1e      	ldr	r3, [pc, #120]	; (8000904 <TIM3_IRQHandler+0x3d4>)
 800088a:	781b      	ldrb	r3, [r3, #0]
 800088c:	b2db      	uxtb	r3, r3
 800088e:	091b      	lsrs	r3, r3, #4
 8000890:	b2db      	uxtb	r3, r3
 8000892:	f003 0301 	and.w	r3, r3, #1
 8000896:	b2da      	uxtb	r2, r3
 8000898:	4b1b      	ldr	r3, [pc, #108]	; (8000908 <TIM3_IRQHandler+0x3d8>)
 800089a:	711a      	strb	r2, [r3, #4]
				tx_data[5] = (curr_tx_byte >> 5) & 0x01;
 800089c:	4b19      	ldr	r3, [pc, #100]	; (8000904 <TIM3_IRQHandler+0x3d4>)
 800089e:	781b      	ldrb	r3, [r3, #0]
 80008a0:	b2db      	uxtb	r3, r3
 80008a2:	095b      	lsrs	r3, r3, #5
 80008a4:	b2db      	uxtb	r3, r3
 80008a6:	f003 0301 	and.w	r3, r3, #1
 80008aa:	b2da      	uxtb	r2, r3
 80008ac:	4b16      	ldr	r3, [pc, #88]	; (8000908 <TIM3_IRQHandler+0x3d8>)
 80008ae:	715a      	strb	r2, [r3, #5]
				tx_data[6] = (curr_tx_byte >> 6) & 0x01;
 80008b0:	4b14      	ldr	r3, [pc, #80]	; (8000904 <TIM3_IRQHandler+0x3d4>)
 80008b2:	781b      	ldrb	r3, [r3, #0]
 80008b4:	b2db      	uxtb	r3, r3
 80008b6:	099b      	lsrs	r3, r3, #6
 80008b8:	b2db      	uxtb	r3, r3
 80008ba:	f003 0301 	and.w	r3, r3, #1
 80008be:	b2da      	uxtb	r2, r3
 80008c0:	4b11      	ldr	r3, [pc, #68]	; (8000908 <TIM3_IRQHandler+0x3d8>)
 80008c2:	719a      	strb	r2, [r3, #6]
				tx_data[7] = (curr_tx_byte >> 7) & 0x01;
 80008c4:	4b0f      	ldr	r3, [pc, #60]	; (8000904 <TIM3_IRQHandler+0x3d4>)
 80008c6:	781b      	ldrb	r3, [r3, #0]
 80008c8:	b2db      	uxtb	r3, r3
 80008ca:	09db      	lsrs	r3, r3, #7
 80008cc:	b2db      	uxtb	r3, r3
 80008ce:	f003 0301 	and.w	r3, r3, #1
 80008d2:	b2da      	uxtb	r2, r3
 80008d4:	4b0c      	ldr	r3, [pc, #48]	; (8000908 <TIM3_IRQHandler+0x3d8>)
 80008d6:	71da      	strb	r2, [r3, #7]
}
 80008d8:	bf00      	nop
 80008da:	370c      	adds	r7, #12
 80008dc:	46bd      	mov	sp, r7
 80008de:	bc80      	pop	{r7}
 80008e0:	4770      	bx	lr
 80008e2:	bf00      	nop
 80008e4:	20000008 	.word	0x20000008
 80008e8:	20000146 	.word	0x20000146
 80008ec:	20000160 	.word	0x20000160
 80008f0:	20000144 	.word	0x20000144
 80008f4:	20000004 	.word	0x20000004
 80008f8:	20000010 	.word	0x20000010
 80008fc:	2000015c 	.word	0x2000015c
 8000900:	20000044 	.word	0x20000044
 8000904:	20000155 	.word	0x20000155
 8000908:	2000014c 	.word	0x2000014c

0800090c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800090c:	b580      	push	{r7, lr}
 800090e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000910:	f000 fa46 	bl	8000da0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000914:	f000 f81c 	bl	8000950 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000918:	f000 f906 	bl	8000b28 <MX_GPIO_Init>
  MX_TIM3_Init();
 800091c:	f000 f85c 	bl	80009d8 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
  ssInit(9600); // Initialise software UART and specify the baud rate
 8000920:	f44f 5016 	mov.w	r0, #9600	; 0x2580
 8000924:	f7ff fc12 	bl	800014c <ssInit>
  while(1) {
	  if(isRxAvailable()) {
 8000928:	f7ff fdc0 	bl	80004ac <isRxAvailable>
 800092c:	4603      	mov	r3, r0
 800092e:	2b00      	cmp	r3, #0
 8000930:	d0fa      	beq.n	8000928 <main+0x1c>
		  ssWriteByte(ssReadByte());
 8000932:	f7ff fdc7 	bl	80004c4 <ssReadByte>
 8000936:	4603      	mov	r3, r0
 8000938:	4618      	mov	r0, r3
 800093a:	f7ff fd0d 	bl	8000358 <ssWriteByte>
		  check_if++;
 800093e:	4b03      	ldr	r3, [pc, #12]	; (800094c <main+0x40>)
 8000940:	681b      	ldr	r3, [r3, #0]
 8000942:	3301      	adds	r3, #1
 8000944:	4a01      	ldr	r2, [pc, #4]	; (800094c <main+0x40>)
 8000946:	6013      	str	r3, [r2, #0]
	  if(isRxAvailable()) {
 8000948:	e7ee      	b.n	8000928 <main+0x1c>
 800094a:	bf00      	nop
 800094c:	200001b4 	.word	0x200001b4

08000950 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000950:	b580      	push	{r7, lr}
 8000952:	b090      	sub	sp, #64	; 0x40
 8000954:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000956:	f107 0318 	add.w	r3, r7, #24
 800095a:	2228      	movs	r2, #40	; 0x28
 800095c:	2100      	movs	r1, #0
 800095e:	4618      	mov	r0, r3
 8000960:	f001 ff9e 	bl	80028a0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000964:	1d3b      	adds	r3, r7, #4
 8000966:	2200      	movs	r2, #0
 8000968:	601a      	str	r2, [r3, #0]
 800096a:	605a      	str	r2, [r3, #4]
 800096c:	609a      	str	r2, [r3, #8]
 800096e:	60da      	str	r2, [r3, #12]
 8000970:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000972:	2301      	movs	r3, #1
 8000974:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000976:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800097a:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 800097c:	2300      	movs	r3, #0
 800097e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000980:	2301      	movs	r3, #1
 8000982:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000984:	2302      	movs	r3, #2
 8000986:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000988:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800098c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL2;
 800098e:	2300      	movs	r3, #0
 8000990:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000992:	f107 0318 	add.w	r3, r7, #24
 8000996:	4618      	mov	r0, r3
 8000998:	f000 fcf6 	bl	8001388 <HAL_RCC_OscConfig>
 800099c:	4603      	mov	r3, r0
 800099e:	2b00      	cmp	r3, #0
 80009a0:	d001      	beq.n	80009a6 <SystemClock_Config+0x56>
  {
    Error_Handler();
 80009a2:	f000 f8ef 	bl	8000b84 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80009a6:	230f      	movs	r3, #15
 80009a8:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80009aa:	2302      	movs	r3, #2
 80009ac:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80009ae:	2300      	movs	r3, #0
 80009b0:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80009b2:	2300      	movs	r3, #0
 80009b4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80009b6:	2300      	movs	r3, #0
 80009b8:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80009ba:	1d3b      	adds	r3, r7, #4
 80009bc:	2101      	movs	r1, #1
 80009be:	4618      	mov	r0, r3
 80009c0:	f000 ff64 	bl	800188c <HAL_RCC_ClockConfig>
 80009c4:	4603      	mov	r3, r0
 80009c6:	2b00      	cmp	r3, #0
 80009c8:	d001      	beq.n	80009ce <SystemClock_Config+0x7e>
  {
    Error_Handler();
 80009ca:	f000 f8db 	bl	8000b84 <Error_Handler>
  }
}
 80009ce:	bf00      	nop
 80009d0:	3740      	adds	r7, #64	; 0x40
 80009d2:	46bd      	mov	sp, r7
 80009d4:	bd80      	pop	{r7, pc}
	...

080009d8 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80009d8:	b580      	push	{r7, lr}
 80009da:	b092      	sub	sp, #72	; 0x48
 80009dc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80009de:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80009e2:	2200      	movs	r2, #0
 80009e4:	601a      	str	r2, [r3, #0]
 80009e6:	605a      	str	r2, [r3, #4]
 80009e8:	609a      	str	r2, [r3, #8]
 80009ea:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80009ec:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80009f0:	2200      	movs	r2, #0
 80009f2:	601a      	str	r2, [r3, #0]
 80009f4:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80009f6:	f107 0314 	add.w	r3, r7, #20
 80009fa:	2200      	movs	r2, #0
 80009fc:	601a      	str	r2, [r3, #0]
 80009fe:	605a      	str	r2, [r3, #4]
 8000a00:	609a      	str	r2, [r3, #8]
 8000a02:	60da      	str	r2, [r3, #12]
 8000a04:	611a      	str	r2, [r3, #16]
 8000a06:	615a      	str	r2, [r3, #20]
 8000a08:	619a      	str	r2, [r3, #24]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8000a0a:	1d3b      	adds	r3, r7, #4
 8000a0c:	2200      	movs	r2, #0
 8000a0e:	601a      	str	r2, [r3, #0]
 8000a10:	605a      	str	r2, [r3, #4]
 8000a12:	609a      	str	r2, [r3, #8]
 8000a14:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000a16:	4b42      	ldr	r3, [pc, #264]	; (8000b20 <MX_TIM3_Init+0x148>)
 8000a18:	4a42      	ldr	r2, [pc, #264]	; (8000b24 <MX_TIM3_Init+0x14c>)
 8000a1a:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 32-1;
 8000a1c:	4b40      	ldr	r3, [pc, #256]	; (8000b20 <MX_TIM3_Init+0x148>)
 8000a1e:	221f      	movs	r2, #31
 8000a20:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a22:	4b3f      	ldr	r3, [pc, #252]	; (8000b20 <MX_TIM3_Init+0x148>)
 8000a24:	2200      	movs	r2, #0
 8000a26:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8000a28:	4b3d      	ldr	r3, [pc, #244]	; (8000b20 <MX_TIM3_Init+0x148>)
 8000a2a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000a2e:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000a30:	4b3b      	ldr	r3, [pc, #236]	; (8000b20 <MX_TIM3_Init+0x148>)
 8000a32:	2200      	movs	r2, #0
 8000a34:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000a36:	4b3a      	ldr	r3, [pc, #232]	; (8000b20 <MX_TIM3_Init+0x148>)
 8000a38:	2200      	movs	r2, #0
 8000a3a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000a3c:	4838      	ldr	r0, [pc, #224]	; (8000b20 <MX_TIM3_Init+0x148>)
 8000a3e:	f001 f883 	bl	8001b48 <HAL_TIM_Base_Init>
 8000a42:	4603      	mov	r3, r0
 8000a44:	2b00      	cmp	r3, #0
 8000a46:	d001      	beq.n	8000a4c <MX_TIM3_Init+0x74>
  {
    Error_Handler();
 8000a48:	f000 f89c 	bl	8000b84 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000a4c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000a50:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000a52:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000a56:	4619      	mov	r1, r3
 8000a58:	4831      	ldr	r0, [pc, #196]	; (8000b20 <MX_TIM3_Init+0x148>)
 8000a5a:	f001 fa6d 	bl	8001f38 <HAL_TIM_ConfigClockSource>
 8000a5e:	4603      	mov	r3, r0
 8000a60:	2b00      	cmp	r3, #0
 8000a62:	d001      	beq.n	8000a68 <MX_TIM3_Init+0x90>
  {
    Error_Handler();
 8000a64:	f000 f88e 	bl	8000b84 <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim3) != HAL_OK)
 8000a68:	482d      	ldr	r0, [pc, #180]	; (8000b20 <MX_TIM3_Init+0x148>)
 8000a6a:	f001 f8bc 	bl	8001be6 <HAL_TIM_OC_Init>
 8000a6e:	4603      	mov	r3, r0
 8000a70:	2b00      	cmp	r3, #0
 8000a72:	d001      	beq.n	8000a78 <MX_TIM3_Init+0xa0>
  {
    Error_Handler();
 8000a74:	f000 f886 	bl	8000b84 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim3) != HAL_OK)
 8000a78:	4829      	ldr	r0, [pc, #164]	; (8000b20 <MX_TIM3_Init+0x148>)
 8000a7a:	f001 f90c 	bl	8001c96 <HAL_TIM_IC_Init>
 8000a7e:	4603      	mov	r3, r0
 8000a80:	2b00      	cmp	r3, #0
 8000a82:	d001      	beq.n	8000a88 <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 8000a84:	f000 f87e 	bl	8000b84 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000a88:	2300      	movs	r3, #0
 8000a8a:	633b      	str	r3, [r7, #48]	; 0x30
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000a8c:	2300      	movs	r3, #0
 8000a8e:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000a90:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000a94:	4619      	mov	r1, r3
 8000a96:	4822      	ldr	r0, [pc, #136]	; (8000b20 <MX_TIM3_Init+0x148>)
 8000a98:	f001 fea4 	bl	80027e4 <HAL_TIMEx_MasterConfigSynchronization>
 8000a9c:	4603      	mov	r3, r0
 8000a9e:	2b00      	cmp	r3, #0
 8000aa0:	d001      	beq.n	8000aa6 <MX_TIM3_Init+0xce>
  {
    Error_Handler();
 8000aa2:	f000 f86f 	bl	8000b84 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_FORCED_ACTIVE;
 8000aa6:	2350      	movs	r3, #80	; 0x50
 8000aa8:	617b      	str	r3, [r7, #20]
  sConfigOC.Pulse = 0;
 8000aaa:	2300      	movs	r3, #0
 8000aac:	61bb      	str	r3, [r7, #24]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000aae:	2300      	movs	r3, #0
 8000ab0:	61fb      	str	r3, [r7, #28]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000ab2:	2300      	movs	r3, #0
 8000ab4:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIM_OC_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000ab6:	f107 0314 	add.w	r3, r7, #20
 8000aba:	2200      	movs	r2, #0
 8000abc:	4619      	mov	r1, r3
 8000abe:	4818      	ldr	r0, [pc, #96]	; (8000b20 <MX_TIM3_Init+0x148>)
 8000ac0:	f001 f942 	bl	8001d48 <HAL_TIM_OC_ConfigChannel>
 8000ac4:	4603      	mov	r3, r0
 8000ac6:	2b00      	cmp	r3, #0
 8000ac8:	d001      	beq.n	8000ace <MX_TIM3_Init+0xf6>
  {
    Error_Handler();
 8000aca:	f000 f85b 	bl	8000b84 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_FALLING;
 8000ace:	2302      	movs	r3, #2
 8000ad0:	607b      	str	r3, [r7, #4]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8000ad2:	2301      	movs	r3, #1
 8000ad4:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8000ad6:	2300      	movs	r3, #0
 8000ad8:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICFilter = 0;
 8000ada:	2300      	movs	r3, #0
 8000adc:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim3, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 8000ade:	1d3b      	adds	r3, r7, #4
 8000ae0:	2204      	movs	r2, #4
 8000ae2:	4619      	mov	r1, r3
 8000ae4:	480e      	ldr	r0, [pc, #56]	; (8000b20 <MX_TIM3_Init+0x148>)
 8000ae6:	f001 f98b 	bl	8001e00 <HAL_TIM_IC_ConfigChannel>
 8000aea:	4603      	mov	r3, r0
 8000aec:	2b00      	cmp	r3, #0
 8000aee:	d001      	beq.n	8000af4 <MX_TIM3_Init+0x11c>
  {
    Error_Handler();
 8000af0:	f000 f848 	bl	8000b84 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 8000af4:	2300      	movs	r3, #0
 8000af6:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_OC_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000af8:	f107 0314 	add.w	r3, r7, #20
 8000afc:	2208      	movs	r2, #8
 8000afe:	4619      	mov	r1, r3
 8000b00:	4807      	ldr	r0, [pc, #28]	; (8000b20 <MX_TIM3_Init+0x148>)
 8000b02:	f001 f921 	bl	8001d48 <HAL_TIM_OC_ConfigChannel>
 8000b06:	4603      	mov	r3, r0
 8000b08:	2b00      	cmp	r3, #0
 8000b0a:	d001      	beq.n	8000b10 <MX_TIM3_Init+0x138>
  {
    Error_Handler();
 8000b0c:	f000 f83a 	bl	8000b84 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8000b10:	4803      	ldr	r0, [pc, #12]	; (8000b20 <MX_TIM3_Init+0x148>)
 8000b12:	f000 f8a5 	bl	8000c60 <HAL_TIM_MspPostInit>

}
 8000b16:	bf00      	nop
 8000b18:	3748      	adds	r7, #72	; 0x48
 8000b1a:	46bd      	mov	sp, r7
 8000b1c:	bd80      	pop	{r7, pc}
 8000b1e:	bf00      	nop
 8000b20:	2000016c 	.word	0x2000016c
 8000b24:	40000400 	.word	0x40000400

08000b28 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000b28:	b480      	push	{r7}
 8000b2a:	b085      	sub	sp, #20
 8000b2c:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000b2e:	4b14      	ldr	r3, [pc, #80]	; (8000b80 <MX_GPIO_Init+0x58>)
 8000b30:	699b      	ldr	r3, [r3, #24]
 8000b32:	4a13      	ldr	r2, [pc, #76]	; (8000b80 <MX_GPIO_Init+0x58>)
 8000b34:	f043 0320 	orr.w	r3, r3, #32
 8000b38:	6193      	str	r3, [r2, #24]
 8000b3a:	4b11      	ldr	r3, [pc, #68]	; (8000b80 <MX_GPIO_Init+0x58>)
 8000b3c:	699b      	ldr	r3, [r3, #24]
 8000b3e:	f003 0320 	and.w	r3, r3, #32
 8000b42:	60fb      	str	r3, [r7, #12]
 8000b44:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b46:	4b0e      	ldr	r3, [pc, #56]	; (8000b80 <MX_GPIO_Init+0x58>)
 8000b48:	699b      	ldr	r3, [r3, #24]
 8000b4a:	4a0d      	ldr	r2, [pc, #52]	; (8000b80 <MX_GPIO_Init+0x58>)
 8000b4c:	f043 0304 	orr.w	r3, r3, #4
 8000b50:	6193      	str	r3, [r2, #24]
 8000b52:	4b0b      	ldr	r3, [pc, #44]	; (8000b80 <MX_GPIO_Init+0x58>)
 8000b54:	699b      	ldr	r3, [r3, #24]
 8000b56:	f003 0304 	and.w	r3, r3, #4
 8000b5a:	60bb      	str	r3, [r7, #8]
 8000b5c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b5e:	4b08      	ldr	r3, [pc, #32]	; (8000b80 <MX_GPIO_Init+0x58>)
 8000b60:	699b      	ldr	r3, [r3, #24]
 8000b62:	4a07      	ldr	r2, [pc, #28]	; (8000b80 <MX_GPIO_Init+0x58>)
 8000b64:	f043 0308 	orr.w	r3, r3, #8
 8000b68:	6193      	str	r3, [r2, #24]
 8000b6a:	4b05      	ldr	r3, [pc, #20]	; (8000b80 <MX_GPIO_Init+0x58>)
 8000b6c:	699b      	ldr	r3, [r3, #24]
 8000b6e:	f003 0308 	and.w	r3, r3, #8
 8000b72:	607b      	str	r3, [r7, #4]
 8000b74:	687b      	ldr	r3, [r7, #4]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000b76:	bf00      	nop
 8000b78:	3714      	adds	r7, #20
 8000b7a:	46bd      	mov	sp, r7
 8000b7c:	bc80      	pop	{r7}
 8000b7e:	4770      	bx	lr
 8000b80:	40021000 	.word	0x40021000

08000b84 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000b84:	b480      	push	{r7}
 8000b86:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000b88:	b672      	cpsid	i
}
 8000b8a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000b8c:	e7fe      	b.n	8000b8c <Error_Handler+0x8>
	...

08000b90 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b90:	b480      	push	{r7}
 8000b92:	b083      	sub	sp, #12
 8000b94:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000b96:	4b0e      	ldr	r3, [pc, #56]	; (8000bd0 <HAL_MspInit+0x40>)
 8000b98:	699b      	ldr	r3, [r3, #24]
 8000b9a:	4a0d      	ldr	r2, [pc, #52]	; (8000bd0 <HAL_MspInit+0x40>)
 8000b9c:	f043 0301 	orr.w	r3, r3, #1
 8000ba0:	6193      	str	r3, [r2, #24]
 8000ba2:	4b0b      	ldr	r3, [pc, #44]	; (8000bd0 <HAL_MspInit+0x40>)
 8000ba4:	699b      	ldr	r3, [r3, #24]
 8000ba6:	f003 0301 	and.w	r3, r3, #1
 8000baa:	607b      	str	r3, [r7, #4]
 8000bac:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000bae:	4b08      	ldr	r3, [pc, #32]	; (8000bd0 <HAL_MspInit+0x40>)
 8000bb0:	69db      	ldr	r3, [r3, #28]
 8000bb2:	4a07      	ldr	r2, [pc, #28]	; (8000bd0 <HAL_MspInit+0x40>)
 8000bb4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000bb8:	61d3      	str	r3, [r2, #28]
 8000bba:	4b05      	ldr	r3, [pc, #20]	; (8000bd0 <HAL_MspInit+0x40>)
 8000bbc:	69db      	ldr	r3, [r3, #28]
 8000bbe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000bc2:	603b      	str	r3, [r7, #0]
 8000bc4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000bc6:	bf00      	nop
 8000bc8:	370c      	adds	r7, #12
 8000bca:	46bd      	mov	sp, r7
 8000bcc:	bc80      	pop	{r7}
 8000bce:	4770      	bx	lr
 8000bd0:	40021000 	.word	0x40021000

08000bd4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000bd4:	b580      	push	{r7, lr}
 8000bd6:	b088      	sub	sp, #32
 8000bd8:	af00      	add	r7, sp, #0
 8000bda:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bdc:	f107 0310 	add.w	r3, r7, #16
 8000be0:	2200      	movs	r2, #0
 8000be2:	601a      	str	r2, [r3, #0]
 8000be4:	605a      	str	r2, [r3, #4]
 8000be6:	609a      	str	r2, [r3, #8]
 8000be8:	60da      	str	r2, [r3, #12]
  if(htim_base->Instance==TIM3)
 8000bea:	687b      	ldr	r3, [r7, #4]
 8000bec:	681b      	ldr	r3, [r3, #0]
 8000bee:	4a19      	ldr	r2, [pc, #100]	; (8000c54 <HAL_TIM_Base_MspInit+0x80>)
 8000bf0:	4293      	cmp	r3, r2
 8000bf2:	d12b      	bne.n	8000c4c <HAL_TIM_Base_MspInit+0x78>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000bf4:	4b18      	ldr	r3, [pc, #96]	; (8000c58 <HAL_TIM_Base_MspInit+0x84>)
 8000bf6:	69db      	ldr	r3, [r3, #28]
 8000bf8:	4a17      	ldr	r2, [pc, #92]	; (8000c58 <HAL_TIM_Base_MspInit+0x84>)
 8000bfa:	f043 0302 	orr.w	r3, r3, #2
 8000bfe:	61d3      	str	r3, [r2, #28]
 8000c00:	4b15      	ldr	r3, [pc, #84]	; (8000c58 <HAL_TIM_Base_MspInit+0x84>)
 8000c02:	69db      	ldr	r3, [r3, #28]
 8000c04:	f003 0302 	and.w	r3, r3, #2
 8000c08:	60fb      	str	r3, [r7, #12]
 8000c0a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c0c:	4b12      	ldr	r3, [pc, #72]	; (8000c58 <HAL_TIM_Base_MspInit+0x84>)
 8000c0e:	699b      	ldr	r3, [r3, #24]
 8000c10:	4a11      	ldr	r2, [pc, #68]	; (8000c58 <HAL_TIM_Base_MspInit+0x84>)
 8000c12:	f043 0304 	orr.w	r3, r3, #4
 8000c16:	6193      	str	r3, [r2, #24]
 8000c18:	4b0f      	ldr	r3, [pc, #60]	; (8000c58 <HAL_TIM_Base_MspInit+0x84>)
 8000c1a:	699b      	ldr	r3, [r3, #24]
 8000c1c:	f003 0304 	and.w	r3, r3, #4
 8000c20:	60bb      	str	r3, [r7, #8]
 8000c22:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PA7     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8000c24:	2380      	movs	r3, #128	; 0x80
 8000c26:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000c28:	2300      	movs	r3, #0
 8000c2a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000c2c:	2301      	movs	r3, #1
 8000c2e:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c30:	f107 0310 	add.w	r3, r7, #16
 8000c34:	4619      	mov	r1, r3
 8000c36:	4809      	ldr	r0, [pc, #36]	; (8000c5c <HAL_TIM_Base_MspInit+0x88>)
 8000c38:	f000 fa22 	bl	8001080 <HAL_GPIO_Init>

    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8000c3c:	2200      	movs	r2, #0
 8000c3e:	2100      	movs	r1, #0
 8000c40:	201d      	movs	r0, #29
 8000c42:	f000 f9e6 	bl	8001012 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8000c46:	201d      	movs	r0, #29
 8000c48:	f000 f9ff 	bl	800104a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8000c4c:	bf00      	nop
 8000c4e:	3720      	adds	r7, #32
 8000c50:	46bd      	mov	sp, r7
 8000c52:	bd80      	pop	{r7, pc}
 8000c54:	40000400 	.word	0x40000400
 8000c58:	40021000 	.word	0x40021000
 8000c5c:	40010800 	.word	0x40010800

08000c60 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000c60:	b580      	push	{r7, lr}
 8000c62:	b088      	sub	sp, #32
 8000c64:	af00      	add	r7, sp, #0
 8000c66:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c68:	f107 0310 	add.w	r3, r7, #16
 8000c6c:	2200      	movs	r2, #0
 8000c6e:	601a      	str	r2, [r3, #0]
 8000c70:	605a      	str	r2, [r3, #4]
 8000c72:	609a      	str	r2, [r3, #8]
 8000c74:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM3)
 8000c76:	687b      	ldr	r3, [r7, #4]
 8000c78:	681b      	ldr	r3, [r3, #0]
 8000c7a:	4a1b      	ldr	r2, [pc, #108]	; (8000ce8 <HAL_TIM_MspPostInit+0x88>)
 8000c7c:	4293      	cmp	r3, r2
 8000c7e:	d12f      	bne.n	8000ce0 <HAL_TIM_MspPostInit+0x80>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c80:	4b1a      	ldr	r3, [pc, #104]	; (8000cec <HAL_TIM_MspPostInit+0x8c>)
 8000c82:	699b      	ldr	r3, [r3, #24]
 8000c84:	4a19      	ldr	r2, [pc, #100]	; (8000cec <HAL_TIM_MspPostInit+0x8c>)
 8000c86:	f043 0304 	orr.w	r3, r3, #4
 8000c8a:	6193      	str	r3, [r2, #24]
 8000c8c:	4b17      	ldr	r3, [pc, #92]	; (8000cec <HAL_TIM_MspPostInit+0x8c>)
 8000c8e:	699b      	ldr	r3, [r3, #24]
 8000c90:	f003 0304 	and.w	r3, r3, #4
 8000c94:	60fb      	str	r3, [r7, #12]
 8000c96:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c98:	4b14      	ldr	r3, [pc, #80]	; (8000cec <HAL_TIM_MspPostInit+0x8c>)
 8000c9a:	699b      	ldr	r3, [r3, #24]
 8000c9c:	4a13      	ldr	r2, [pc, #76]	; (8000cec <HAL_TIM_MspPostInit+0x8c>)
 8000c9e:	f043 0308 	orr.w	r3, r3, #8
 8000ca2:	6193      	str	r3, [r2, #24]
 8000ca4:	4b11      	ldr	r3, [pc, #68]	; (8000cec <HAL_TIM_MspPostInit+0x8c>)
 8000ca6:	699b      	ldr	r3, [r3, #24]
 8000ca8:	f003 0308 	and.w	r3, r3, #8
 8000cac:	60bb      	str	r3, [r7, #8]
 8000cae:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    PB0     ------> TIM3_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8000cb0:	2340      	movs	r3, #64	; 0x40
 8000cb2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cb4:	2302      	movs	r3, #2
 8000cb6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000cb8:	2303      	movs	r3, #3
 8000cba:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000cbc:	f107 0310 	add.w	r3, r7, #16
 8000cc0:	4619      	mov	r1, r3
 8000cc2:	480b      	ldr	r0, [pc, #44]	; (8000cf0 <HAL_TIM_MspPostInit+0x90>)
 8000cc4:	f000 f9dc 	bl	8001080 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000cc8:	2301      	movs	r3, #1
 8000cca:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ccc:	2302      	movs	r3, #2
 8000cce:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cd0:	2302      	movs	r3, #2
 8000cd2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000cd4:	f107 0310 	add.w	r3, r7, #16
 8000cd8:	4619      	mov	r1, r3
 8000cda:	4806      	ldr	r0, [pc, #24]	; (8000cf4 <HAL_TIM_MspPostInit+0x94>)
 8000cdc:	f000 f9d0 	bl	8001080 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8000ce0:	bf00      	nop
 8000ce2:	3720      	adds	r7, #32
 8000ce4:	46bd      	mov	sp, r7
 8000ce6:	bd80      	pop	{r7, pc}
 8000ce8:	40000400 	.word	0x40000400
 8000cec:	40021000 	.word	0x40021000
 8000cf0:	40010800 	.word	0x40010800
 8000cf4:	40010c00 	.word	0x40010c00

08000cf8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000cf8:	b480      	push	{r7}
 8000cfa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000cfc:	e7fe      	b.n	8000cfc <NMI_Handler+0x4>

08000cfe <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000cfe:	b480      	push	{r7}
 8000d00:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000d02:	e7fe      	b.n	8000d02 <HardFault_Handler+0x4>

08000d04 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000d04:	b480      	push	{r7}
 8000d06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000d08:	e7fe      	b.n	8000d08 <MemManage_Handler+0x4>

08000d0a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000d0a:	b480      	push	{r7}
 8000d0c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000d0e:	e7fe      	b.n	8000d0e <BusFault_Handler+0x4>

08000d10 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000d10:	b480      	push	{r7}
 8000d12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000d14:	e7fe      	b.n	8000d14 <UsageFault_Handler+0x4>

08000d16 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000d16:	b480      	push	{r7}
 8000d18:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000d1a:	bf00      	nop
 8000d1c:	46bd      	mov	sp, r7
 8000d1e:	bc80      	pop	{r7}
 8000d20:	4770      	bx	lr

08000d22 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000d22:	b480      	push	{r7}
 8000d24:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000d26:	bf00      	nop
 8000d28:	46bd      	mov	sp, r7
 8000d2a:	bc80      	pop	{r7}
 8000d2c:	4770      	bx	lr

08000d2e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000d2e:	b480      	push	{r7}
 8000d30:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000d32:	bf00      	nop
 8000d34:	46bd      	mov	sp, r7
 8000d36:	bc80      	pop	{r7}
 8000d38:	4770      	bx	lr

08000d3a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000d3a:	b580      	push	{r7, lr}
 8000d3c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000d3e:	f000 f875 	bl	8000e2c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000d42:	bf00      	nop
 8000d44:	bd80      	pop	{r7, pc}

08000d46 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000d46:	b480      	push	{r7}
 8000d48:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000d4a:	bf00      	nop
 8000d4c:	46bd      	mov	sp, r7
 8000d4e:	bc80      	pop	{r7}
 8000d50:	4770      	bx	lr
	...

08000d54 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000d54:	f7ff fff7 	bl	8000d46 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000d58:	480b      	ldr	r0, [pc, #44]	; (8000d88 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8000d5a:	490c      	ldr	r1, [pc, #48]	; (8000d8c <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8000d5c:	4a0c      	ldr	r2, [pc, #48]	; (8000d90 <LoopFillZerobss+0x16>)
  movs r3, #0
 8000d5e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000d60:	e002      	b.n	8000d68 <LoopCopyDataInit>

08000d62 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000d62:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000d64:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000d66:	3304      	adds	r3, #4

08000d68 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000d68:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000d6a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000d6c:	d3f9      	bcc.n	8000d62 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000d6e:	4a09      	ldr	r2, [pc, #36]	; (8000d94 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8000d70:	4c09      	ldr	r4, [pc, #36]	; (8000d98 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000d72:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000d74:	e001      	b.n	8000d7a <LoopFillZerobss>

08000d76 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000d76:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000d78:	3204      	adds	r2, #4

08000d7a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000d7a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000d7c:	d3fb      	bcc.n	8000d76 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000d7e:	f001 fd97 	bl	80028b0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000d82:	f7ff fdc3 	bl	800090c <main>
  bx lr
 8000d86:	4770      	bx	lr
  ldr r0, =_sdata
 8000d88:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000d8c:	20000024 	.word	0x20000024
  ldr r2, =_sidata
 8000d90:	0800293c 	.word	0x0800293c
  ldr r2, =_sbss
 8000d94:	20000024 	.word	0x20000024
  ldr r4, =_ebss
 8000d98:	200001bc 	.word	0x200001bc

08000d9c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000d9c:	e7fe      	b.n	8000d9c <ADC1_2_IRQHandler>
	...

08000da0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000da0:	b580      	push	{r7, lr}
 8000da2:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000da4:	4b08      	ldr	r3, [pc, #32]	; (8000dc8 <HAL_Init+0x28>)
 8000da6:	681b      	ldr	r3, [r3, #0]
 8000da8:	4a07      	ldr	r2, [pc, #28]	; (8000dc8 <HAL_Init+0x28>)
 8000daa:	f043 0310 	orr.w	r3, r3, #16
 8000dae:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000db0:	2003      	movs	r0, #3
 8000db2:	f000 f923 	bl	8000ffc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000db6:	200f      	movs	r0, #15
 8000db8:	f000 f808 	bl	8000dcc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000dbc:	f7ff fee8 	bl	8000b90 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000dc0:	2300      	movs	r3, #0
}
 8000dc2:	4618      	mov	r0, r3
 8000dc4:	bd80      	pop	{r7, pc}
 8000dc6:	bf00      	nop
 8000dc8:	40022000 	.word	0x40022000

08000dcc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000dcc:	b580      	push	{r7, lr}
 8000dce:	b082      	sub	sp, #8
 8000dd0:	af00      	add	r7, sp, #0
 8000dd2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000dd4:	4b12      	ldr	r3, [pc, #72]	; (8000e20 <HAL_InitTick+0x54>)
 8000dd6:	681a      	ldr	r2, [r3, #0]
 8000dd8:	4b12      	ldr	r3, [pc, #72]	; (8000e24 <HAL_InitTick+0x58>)
 8000dda:	781b      	ldrb	r3, [r3, #0]
 8000ddc:	4619      	mov	r1, r3
 8000dde:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000de2:	fbb3 f3f1 	udiv	r3, r3, r1
 8000de6:	fbb2 f3f3 	udiv	r3, r2, r3
 8000dea:	4618      	mov	r0, r3
 8000dec:	f000 f93b 	bl	8001066 <HAL_SYSTICK_Config>
 8000df0:	4603      	mov	r3, r0
 8000df2:	2b00      	cmp	r3, #0
 8000df4:	d001      	beq.n	8000dfa <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000df6:	2301      	movs	r3, #1
 8000df8:	e00e      	b.n	8000e18 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000dfa:	687b      	ldr	r3, [r7, #4]
 8000dfc:	2b0f      	cmp	r3, #15
 8000dfe:	d80a      	bhi.n	8000e16 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000e00:	2200      	movs	r2, #0
 8000e02:	6879      	ldr	r1, [r7, #4]
 8000e04:	f04f 30ff 	mov.w	r0, #4294967295
 8000e08:	f000 f903 	bl	8001012 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000e0c:	4a06      	ldr	r2, [pc, #24]	; (8000e28 <HAL_InitTick+0x5c>)
 8000e0e:	687b      	ldr	r3, [r7, #4]
 8000e10:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000e12:	2300      	movs	r3, #0
 8000e14:	e000      	b.n	8000e18 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000e16:	2301      	movs	r3, #1
}
 8000e18:	4618      	mov	r0, r3
 8000e1a:	3708      	adds	r7, #8
 8000e1c:	46bd      	mov	sp, r7
 8000e1e:	bd80      	pop	{r7, pc}
 8000e20:	20000018 	.word	0x20000018
 8000e24:	20000020 	.word	0x20000020
 8000e28:	2000001c 	.word	0x2000001c

08000e2c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000e2c:	b480      	push	{r7}
 8000e2e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000e30:	4b05      	ldr	r3, [pc, #20]	; (8000e48 <HAL_IncTick+0x1c>)
 8000e32:	781b      	ldrb	r3, [r3, #0]
 8000e34:	461a      	mov	r2, r3
 8000e36:	4b05      	ldr	r3, [pc, #20]	; (8000e4c <HAL_IncTick+0x20>)
 8000e38:	681b      	ldr	r3, [r3, #0]
 8000e3a:	4413      	add	r3, r2
 8000e3c:	4a03      	ldr	r2, [pc, #12]	; (8000e4c <HAL_IncTick+0x20>)
 8000e3e:	6013      	str	r3, [r2, #0]
}
 8000e40:	bf00      	nop
 8000e42:	46bd      	mov	sp, r7
 8000e44:	bc80      	pop	{r7}
 8000e46:	4770      	bx	lr
 8000e48:	20000020 	.word	0x20000020
 8000e4c:	200001b8 	.word	0x200001b8

08000e50 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000e50:	b480      	push	{r7}
 8000e52:	af00      	add	r7, sp, #0
  return uwTick;
 8000e54:	4b02      	ldr	r3, [pc, #8]	; (8000e60 <HAL_GetTick+0x10>)
 8000e56:	681b      	ldr	r3, [r3, #0]
}
 8000e58:	4618      	mov	r0, r3
 8000e5a:	46bd      	mov	sp, r7
 8000e5c:	bc80      	pop	{r7}
 8000e5e:	4770      	bx	lr
 8000e60:	200001b8 	.word	0x200001b8

08000e64 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e64:	b480      	push	{r7}
 8000e66:	b085      	sub	sp, #20
 8000e68:	af00      	add	r7, sp, #0
 8000e6a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000e6c:	687b      	ldr	r3, [r7, #4]
 8000e6e:	f003 0307 	and.w	r3, r3, #7
 8000e72:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000e74:	4b0c      	ldr	r3, [pc, #48]	; (8000ea8 <__NVIC_SetPriorityGrouping+0x44>)
 8000e76:	68db      	ldr	r3, [r3, #12]
 8000e78:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000e7a:	68ba      	ldr	r2, [r7, #8]
 8000e7c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000e80:	4013      	ands	r3, r2
 8000e82:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000e84:	68fb      	ldr	r3, [r7, #12]
 8000e86:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000e88:	68bb      	ldr	r3, [r7, #8]
 8000e8a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000e8c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000e90:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000e94:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000e96:	4a04      	ldr	r2, [pc, #16]	; (8000ea8 <__NVIC_SetPriorityGrouping+0x44>)
 8000e98:	68bb      	ldr	r3, [r7, #8]
 8000e9a:	60d3      	str	r3, [r2, #12]
}
 8000e9c:	bf00      	nop
 8000e9e:	3714      	adds	r7, #20
 8000ea0:	46bd      	mov	sp, r7
 8000ea2:	bc80      	pop	{r7}
 8000ea4:	4770      	bx	lr
 8000ea6:	bf00      	nop
 8000ea8:	e000ed00 	.word	0xe000ed00

08000eac <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000eac:	b480      	push	{r7}
 8000eae:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000eb0:	4b04      	ldr	r3, [pc, #16]	; (8000ec4 <__NVIC_GetPriorityGrouping+0x18>)
 8000eb2:	68db      	ldr	r3, [r3, #12]
 8000eb4:	0a1b      	lsrs	r3, r3, #8
 8000eb6:	f003 0307 	and.w	r3, r3, #7
}
 8000eba:	4618      	mov	r0, r3
 8000ebc:	46bd      	mov	sp, r7
 8000ebe:	bc80      	pop	{r7}
 8000ec0:	4770      	bx	lr
 8000ec2:	bf00      	nop
 8000ec4:	e000ed00 	.word	0xe000ed00

08000ec8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000ec8:	b480      	push	{r7}
 8000eca:	b083      	sub	sp, #12
 8000ecc:	af00      	add	r7, sp, #0
 8000ece:	4603      	mov	r3, r0
 8000ed0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000ed2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ed6:	2b00      	cmp	r3, #0
 8000ed8:	db0b      	blt.n	8000ef2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000eda:	79fb      	ldrb	r3, [r7, #7]
 8000edc:	f003 021f 	and.w	r2, r3, #31
 8000ee0:	4906      	ldr	r1, [pc, #24]	; (8000efc <__NVIC_EnableIRQ+0x34>)
 8000ee2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ee6:	095b      	lsrs	r3, r3, #5
 8000ee8:	2001      	movs	r0, #1
 8000eea:	fa00 f202 	lsl.w	r2, r0, r2
 8000eee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000ef2:	bf00      	nop
 8000ef4:	370c      	adds	r7, #12
 8000ef6:	46bd      	mov	sp, r7
 8000ef8:	bc80      	pop	{r7}
 8000efa:	4770      	bx	lr
 8000efc:	e000e100 	.word	0xe000e100

08000f00 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000f00:	b480      	push	{r7}
 8000f02:	b083      	sub	sp, #12
 8000f04:	af00      	add	r7, sp, #0
 8000f06:	4603      	mov	r3, r0
 8000f08:	6039      	str	r1, [r7, #0]
 8000f0a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f0c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f10:	2b00      	cmp	r3, #0
 8000f12:	db0a      	blt.n	8000f2a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f14:	683b      	ldr	r3, [r7, #0]
 8000f16:	b2da      	uxtb	r2, r3
 8000f18:	490c      	ldr	r1, [pc, #48]	; (8000f4c <__NVIC_SetPriority+0x4c>)
 8000f1a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f1e:	0112      	lsls	r2, r2, #4
 8000f20:	b2d2      	uxtb	r2, r2
 8000f22:	440b      	add	r3, r1
 8000f24:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000f28:	e00a      	b.n	8000f40 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f2a:	683b      	ldr	r3, [r7, #0]
 8000f2c:	b2da      	uxtb	r2, r3
 8000f2e:	4908      	ldr	r1, [pc, #32]	; (8000f50 <__NVIC_SetPriority+0x50>)
 8000f30:	79fb      	ldrb	r3, [r7, #7]
 8000f32:	f003 030f 	and.w	r3, r3, #15
 8000f36:	3b04      	subs	r3, #4
 8000f38:	0112      	lsls	r2, r2, #4
 8000f3a:	b2d2      	uxtb	r2, r2
 8000f3c:	440b      	add	r3, r1
 8000f3e:	761a      	strb	r2, [r3, #24]
}
 8000f40:	bf00      	nop
 8000f42:	370c      	adds	r7, #12
 8000f44:	46bd      	mov	sp, r7
 8000f46:	bc80      	pop	{r7}
 8000f48:	4770      	bx	lr
 8000f4a:	bf00      	nop
 8000f4c:	e000e100 	.word	0xe000e100
 8000f50:	e000ed00 	.word	0xe000ed00

08000f54 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000f54:	b480      	push	{r7}
 8000f56:	b089      	sub	sp, #36	; 0x24
 8000f58:	af00      	add	r7, sp, #0
 8000f5a:	60f8      	str	r0, [r7, #12]
 8000f5c:	60b9      	str	r1, [r7, #8]
 8000f5e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000f60:	68fb      	ldr	r3, [r7, #12]
 8000f62:	f003 0307 	and.w	r3, r3, #7
 8000f66:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000f68:	69fb      	ldr	r3, [r7, #28]
 8000f6a:	f1c3 0307 	rsb	r3, r3, #7
 8000f6e:	2b04      	cmp	r3, #4
 8000f70:	bf28      	it	cs
 8000f72:	2304      	movcs	r3, #4
 8000f74:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000f76:	69fb      	ldr	r3, [r7, #28]
 8000f78:	3304      	adds	r3, #4
 8000f7a:	2b06      	cmp	r3, #6
 8000f7c:	d902      	bls.n	8000f84 <NVIC_EncodePriority+0x30>
 8000f7e:	69fb      	ldr	r3, [r7, #28]
 8000f80:	3b03      	subs	r3, #3
 8000f82:	e000      	b.n	8000f86 <NVIC_EncodePriority+0x32>
 8000f84:	2300      	movs	r3, #0
 8000f86:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f88:	f04f 32ff 	mov.w	r2, #4294967295
 8000f8c:	69bb      	ldr	r3, [r7, #24]
 8000f8e:	fa02 f303 	lsl.w	r3, r2, r3
 8000f92:	43da      	mvns	r2, r3
 8000f94:	68bb      	ldr	r3, [r7, #8]
 8000f96:	401a      	ands	r2, r3
 8000f98:	697b      	ldr	r3, [r7, #20]
 8000f9a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000f9c:	f04f 31ff 	mov.w	r1, #4294967295
 8000fa0:	697b      	ldr	r3, [r7, #20]
 8000fa2:	fa01 f303 	lsl.w	r3, r1, r3
 8000fa6:	43d9      	mvns	r1, r3
 8000fa8:	687b      	ldr	r3, [r7, #4]
 8000faa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000fac:	4313      	orrs	r3, r2
         );
}
 8000fae:	4618      	mov	r0, r3
 8000fb0:	3724      	adds	r7, #36	; 0x24
 8000fb2:	46bd      	mov	sp, r7
 8000fb4:	bc80      	pop	{r7}
 8000fb6:	4770      	bx	lr

08000fb8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000fb8:	b580      	push	{r7, lr}
 8000fba:	b082      	sub	sp, #8
 8000fbc:	af00      	add	r7, sp, #0
 8000fbe:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000fc0:	687b      	ldr	r3, [r7, #4]
 8000fc2:	3b01      	subs	r3, #1
 8000fc4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000fc8:	d301      	bcc.n	8000fce <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000fca:	2301      	movs	r3, #1
 8000fcc:	e00f      	b.n	8000fee <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000fce:	4a0a      	ldr	r2, [pc, #40]	; (8000ff8 <SysTick_Config+0x40>)
 8000fd0:	687b      	ldr	r3, [r7, #4]
 8000fd2:	3b01      	subs	r3, #1
 8000fd4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000fd6:	210f      	movs	r1, #15
 8000fd8:	f04f 30ff 	mov.w	r0, #4294967295
 8000fdc:	f7ff ff90 	bl	8000f00 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000fe0:	4b05      	ldr	r3, [pc, #20]	; (8000ff8 <SysTick_Config+0x40>)
 8000fe2:	2200      	movs	r2, #0
 8000fe4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000fe6:	4b04      	ldr	r3, [pc, #16]	; (8000ff8 <SysTick_Config+0x40>)
 8000fe8:	2207      	movs	r2, #7
 8000fea:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000fec:	2300      	movs	r3, #0
}
 8000fee:	4618      	mov	r0, r3
 8000ff0:	3708      	adds	r7, #8
 8000ff2:	46bd      	mov	sp, r7
 8000ff4:	bd80      	pop	{r7, pc}
 8000ff6:	bf00      	nop
 8000ff8:	e000e010 	.word	0xe000e010

08000ffc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ffc:	b580      	push	{r7, lr}
 8000ffe:	b082      	sub	sp, #8
 8001000:	af00      	add	r7, sp, #0
 8001002:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001004:	6878      	ldr	r0, [r7, #4]
 8001006:	f7ff ff2d 	bl	8000e64 <__NVIC_SetPriorityGrouping>
}
 800100a:	bf00      	nop
 800100c:	3708      	adds	r7, #8
 800100e:	46bd      	mov	sp, r7
 8001010:	bd80      	pop	{r7, pc}

08001012 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001012:	b580      	push	{r7, lr}
 8001014:	b086      	sub	sp, #24
 8001016:	af00      	add	r7, sp, #0
 8001018:	4603      	mov	r3, r0
 800101a:	60b9      	str	r1, [r7, #8]
 800101c:	607a      	str	r2, [r7, #4]
 800101e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001020:	2300      	movs	r3, #0
 8001022:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001024:	f7ff ff42 	bl	8000eac <__NVIC_GetPriorityGrouping>
 8001028:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800102a:	687a      	ldr	r2, [r7, #4]
 800102c:	68b9      	ldr	r1, [r7, #8]
 800102e:	6978      	ldr	r0, [r7, #20]
 8001030:	f7ff ff90 	bl	8000f54 <NVIC_EncodePriority>
 8001034:	4602      	mov	r2, r0
 8001036:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800103a:	4611      	mov	r1, r2
 800103c:	4618      	mov	r0, r3
 800103e:	f7ff ff5f 	bl	8000f00 <__NVIC_SetPriority>
}
 8001042:	bf00      	nop
 8001044:	3718      	adds	r7, #24
 8001046:	46bd      	mov	sp, r7
 8001048:	bd80      	pop	{r7, pc}

0800104a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800104a:	b580      	push	{r7, lr}
 800104c:	b082      	sub	sp, #8
 800104e:	af00      	add	r7, sp, #0
 8001050:	4603      	mov	r3, r0
 8001052:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001054:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001058:	4618      	mov	r0, r3
 800105a:	f7ff ff35 	bl	8000ec8 <__NVIC_EnableIRQ>
}
 800105e:	bf00      	nop
 8001060:	3708      	adds	r7, #8
 8001062:	46bd      	mov	sp, r7
 8001064:	bd80      	pop	{r7, pc}

08001066 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001066:	b580      	push	{r7, lr}
 8001068:	b082      	sub	sp, #8
 800106a:	af00      	add	r7, sp, #0
 800106c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800106e:	6878      	ldr	r0, [r7, #4]
 8001070:	f7ff ffa2 	bl	8000fb8 <SysTick_Config>
 8001074:	4603      	mov	r3, r0
}
 8001076:	4618      	mov	r0, r3
 8001078:	3708      	adds	r7, #8
 800107a:	46bd      	mov	sp, r7
 800107c:	bd80      	pop	{r7, pc}
	...

08001080 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001080:	b480      	push	{r7}
 8001082:	b08b      	sub	sp, #44	; 0x2c
 8001084:	af00      	add	r7, sp, #0
 8001086:	6078      	str	r0, [r7, #4]
 8001088:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800108a:	2300      	movs	r3, #0
 800108c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800108e:	2300      	movs	r3, #0
 8001090:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001092:	e169      	b.n	8001368 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001094:	2201      	movs	r2, #1
 8001096:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001098:	fa02 f303 	lsl.w	r3, r2, r3
 800109c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800109e:	683b      	ldr	r3, [r7, #0]
 80010a0:	681b      	ldr	r3, [r3, #0]
 80010a2:	69fa      	ldr	r2, [r7, #28]
 80010a4:	4013      	ands	r3, r2
 80010a6:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80010a8:	69ba      	ldr	r2, [r7, #24]
 80010aa:	69fb      	ldr	r3, [r7, #28]
 80010ac:	429a      	cmp	r2, r3
 80010ae:	f040 8158 	bne.w	8001362 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80010b2:	683b      	ldr	r3, [r7, #0]
 80010b4:	685b      	ldr	r3, [r3, #4]
 80010b6:	4a9a      	ldr	r2, [pc, #616]	; (8001320 <HAL_GPIO_Init+0x2a0>)
 80010b8:	4293      	cmp	r3, r2
 80010ba:	d05e      	beq.n	800117a <HAL_GPIO_Init+0xfa>
 80010bc:	4a98      	ldr	r2, [pc, #608]	; (8001320 <HAL_GPIO_Init+0x2a0>)
 80010be:	4293      	cmp	r3, r2
 80010c0:	d875      	bhi.n	80011ae <HAL_GPIO_Init+0x12e>
 80010c2:	4a98      	ldr	r2, [pc, #608]	; (8001324 <HAL_GPIO_Init+0x2a4>)
 80010c4:	4293      	cmp	r3, r2
 80010c6:	d058      	beq.n	800117a <HAL_GPIO_Init+0xfa>
 80010c8:	4a96      	ldr	r2, [pc, #600]	; (8001324 <HAL_GPIO_Init+0x2a4>)
 80010ca:	4293      	cmp	r3, r2
 80010cc:	d86f      	bhi.n	80011ae <HAL_GPIO_Init+0x12e>
 80010ce:	4a96      	ldr	r2, [pc, #600]	; (8001328 <HAL_GPIO_Init+0x2a8>)
 80010d0:	4293      	cmp	r3, r2
 80010d2:	d052      	beq.n	800117a <HAL_GPIO_Init+0xfa>
 80010d4:	4a94      	ldr	r2, [pc, #592]	; (8001328 <HAL_GPIO_Init+0x2a8>)
 80010d6:	4293      	cmp	r3, r2
 80010d8:	d869      	bhi.n	80011ae <HAL_GPIO_Init+0x12e>
 80010da:	4a94      	ldr	r2, [pc, #592]	; (800132c <HAL_GPIO_Init+0x2ac>)
 80010dc:	4293      	cmp	r3, r2
 80010de:	d04c      	beq.n	800117a <HAL_GPIO_Init+0xfa>
 80010e0:	4a92      	ldr	r2, [pc, #584]	; (800132c <HAL_GPIO_Init+0x2ac>)
 80010e2:	4293      	cmp	r3, r2
 80010e4:	d863      	bhi.n	80011ae <HAL_GPIO_Init+0x12e>
 80010e6:	4a92      	ldr	r2, [pc, #584]	; (8001330 <HAL_GPIO_Init+0x2b0>)
 80010e8:	4293      	cmp	r3, r2
 80010ea:	d046      	beq.n	800117a <HAL_GPIO_Init+0xfa>
 80010ec:	4a90      	ldr	r2, [pc, #576]	; (8001330 <HAL_GPIO_Init+0x2b0>)
 80010ee:	4293      	cmp	r3, r2
 80010f0:	d85d      	bhi.n	80011ae <HAL_GPIO_Init+0x12e>
 80010f2:	2b12      	cmp	r3, #18
 80010f4:	d82a      	bhi.n	800114c <HAL_GPIO_Init+0xcc>
 80010f6:	2b12      	cmp	r3, #18
 80010f8:	d859      	bhi.n	80011ae <HAL_GPIO_Init+0x12e>
 80010fa:	a201      	add	r2, pc, #4	; (adr r2, 8001100 <HAL_GPIO_Init+0x80>)
 80010fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001100:	0800117b 	.word	0x0800117b
 8001104:	08001155 	.word	0x08001155
 8001108:	08001167 	.word	0x08001167
 800110c:	080011a9 	.word	0x080011a9
 8001110:	080011af 	.word	0x080011af
 8001114:	080011af 	.word	0x080011af
 8001118:	080011af 	.word	0x080011af
 800111c:	080011af 	.word	0x080011af
 8001120:	080011af 	.word	0x080011af
 8001124:	080011af 	.word	0x080011af
 8001128:	080011af 	.word	0x080011af
 800112c:	080011af 	.word	0x080011af
 8001130:	080011af 	.word	0x080011af
 8001134:	080011af 	.word	0x080011af
 8001138:	080011af 	.word	0x080011af
 800113c:	080011af 	.word	0x080011af
 8001140:	080011af 	.word	0x080011af
 8001144:	0800115d 	.word	0x0800115d
 8001148:	08001171 	.word	0x08001171
 800114c:	4a79      	ldr	r2, [pc, #484]	; (8001334 <HAL_GPIO_Init+0x2b4>)
 800114e:	4293      	cmp	r3, r2
 8001150:	d013      	beq.n	800117a <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001152:	e02c      	b.n	80011ae <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001154:	683b      	ldr	r3, [r7, #0]
 8001156:	68db      	ldr	r3, [r3, #12]
 8001158:	623b      	str	r3, [r7, #32]
          break;
 800115a:	e029      	b.n	80011b0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 800115c:	683b      	ldr	r3, [r7, #0]
 800115e:	68db      	ldr	r3, [r3, #12]
 8001160:	3304      	adds	r3, #4
 8001162:	623b      	str	r3, [r7, #32]
          break;
 8001164:	e024      	b.n	80011b0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001166:	683b      	ldr	r3, [r7, #0]
 8001168:	68db      	ldr	r3, [r3, #12]
 800116a:	3308      	adds	r3, #8
 800116c:	623b      	str	r3, [r7, #32]
          break;
 800116e:	e01f      	b.n	80011b0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001170:	683b      	ldr	r3, [r7, #0]
 8001172:	68db      	ldr	r3, [r3, #12]
 8001174:	330c      	adds	r3, #12
 8001176:	623b      	str	r3, [r7, #32]
          break;
 8001178:	e01a      	b.n	80011b0 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800117a:	683b      	ldr	r3, [r7, #0]
 800117c:	689b      	ldr	r3, [r3, #8]
 800117e:	2b00      	cmp	r3, #0
 8001180:	d102      	bne.n	8001188 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001182:	2304      	movs	r3, #4
 8001184:	623b      	str	r3, [r7, #32]
          break;
 8001186:	e013      	b.n	80011b0 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001188:	683b      	ldr	r3, [r7, #0]
 800118a:	689b      	ldr	r3, [r3, #8]
 800118c:	2b01      	cmp	r3, #1
 800118e:	d105      	bne.n	800119c <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001190:	2308      	movs	r3, #8
 8001192:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	69fa      	ldr	r2, [r7, #28]
 8001198:	611a      	str	r2, [r3, #16]
          break;
 800119a:	e009      	b.n	80011b0 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800119c:	2308      	movs	r3, #8
 800119e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	69fa      	ldr	r2, [r7, #28]
 80011a4:	615a      	str	r2, [r3, #20]
          break;
 80011a6:	e003      	b.n	80011b0 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80011a8:	2300      	movs	r3, #0
 80011aa:	623b      	str	r3, [r7, #32]
          break;
 80011ac:	e000      	b.n	80011b0 <HAL_GPIO_Init+0x130>
          break;
 80011ae:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80011b0:	69bb      	ldr	r3, [r7, #24]
 80011b2:	2bff      	cmp	r3, #255	; 0xff
 80011b4:	d801      	bhi.n	80011ba <HAL_GPIO_Init+0x13a>
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	e001      	b.n	80011be <HAL_GPIO_Init+0x13e>
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	3304      	adds	r3, #4
 80011be:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80011c0:	69bb      	ldr	r3, [r7, #24]
 80011c2:	2bff      	cmp	r3, #255	; 0xff
 80011c4:	d802      	bhi.n	80011cc <HAL_GPIO_Init+0x14c>
 80011c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011c8:	009b      	lsls	r3, r3, #2
 80011ca:	e002      	b.n	80011d2 <HAL_GPIO_Init+0x152>
 80011cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011ce:	3b08      	subs	r3, #8
 80011d0:	009b      	lsls	r3, r3, #2
 80011d2:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80011d4:	697b      	ldr	r3, [r7, #20]
 80011d6:	681a      	ldr	r2, [r3, #0]
 80011d8:	210f      	movs	r1, #15
 80011da:	693b      	ldr	r3, [r7, #16]
 80011dc:	fa01 f303 	lsl.w	r3, r1, r3
 80011e0:	43db      	mvns	r3, r3
 80011e2:	401a      	ands	r2, r3
 80011e4:	6a39      	ldr	r1, [r7, #32]
 80011e6:	693b      	ldr	r3, [r7, #16]
 80011e8:	fa01 f303 	lsl.w	r3, r1, r3
 80011ec:	431a      	orrs	r2, r3
 80011ee:	697b      	ldr	r3, [r7, #20]
 80011f0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80011f2:	683b      	ldr	r3, [r7, #0]
 80011f4:	685b      	ldr	r3, [r3, #4]
 80011f6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80011fa:	2b00      	cmp	r3, #0
 80011fc:	f000 80b1 	beq.w	8001362 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001200:	4b4d      	ldr	r3, [pc, #308]	; (8001338 <HAL_GPIO_Init+0x2b8>)
 8001202:	699b      	ldr	r3, [r3, #24]
 8001204:	4a4c      	ldr	r2, [pc, #304]	; (8001338 <HAL_GPIO_Init+0x2b8>)
 8001206:	f043 0301 	orr.w	r3, r3, #1
 800120a:	6193      	str	r3, [r2, #24]
 800120c:	4b4a      	ldr	r3, [pc, #296]	; (8001338 <HAL_GPIO_Init+0x2b8>)
 800120e:	699b      	ldr	r3, [r3, #24]
 8001210:	f003 0301 	and.w	r3, r3, #1
 8001214:	60bb      	str	r3, [r7, #8]
 8001216:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001218:	4a48      	ldr	r2, [pc, #288]	; (800133c <HAL_GPIO_Init+0x2bc>)
 800121a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800121c:	089b      	lsrs	r3, r3, #2
 800121e:	3302      	adds	r3, #2
 8001220:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001224:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001226:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001228:	f003 0303 	and.w	r3, r3, #3
 800122c:	009b      	lsls	r3, r3, #2
 800122e:	220f      	movs	r2, #15
 8001230:	fa02 f303 	lsl.w	r3, r2, r3
 8001234:	43db      	mvns	r3, r3
 8001236:	68fa      	ldr	r2, [r7, #12]
 8001238:	4013      	ands	r3, r2
 800123a:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	4a40      	ldr	r2, [pc, #256]	; (8001340 <HAL_GPIO_Init+0x2c0>)
 8001240:	4293      	cmp	r3, r2
 8001242:	d013      	beq.n	800126c <HAL_GPIO_Init+0x1ec>
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	4a3f      	ldr	r2, [pc, #252]	; (8001344 <HAL_GPIO_Init+0x2c4>)
 8001248:	4293      	cmp	r3, r2
 800124a:	d00d      	beq.n	8001268 <HAL_GPIO_Init+0x1e8>
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	4a3e      	ldr	r2, [pc, #248]	; (8001348 <HAL_GPIO_Init+0x2c8>)
 8001250:	4293      	cmp	r3, r2
 8001252:	d007      	beq.n	8001264 <HAL_GPIO_Init+0x1e4>
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	4a3d      	ldr	r2, [pc, #244]	; (800134c <HAL_GPIO_Init+0x2cc>)
 8001258:	4293      	cmp	r3, r2
 800125a:	d101      	bne.n	8001260 <HAL_GPIO_Init+0x1e0>
 800125c:	2303      	movs	r3, #3
 800125e:	e006      	b.n	800126e <HAL_GPIO_Init+0x1ee>
 8001260:	2304      	movs	r3, #4
 8001262:	e004      	b.n	800126e <HAL_GPIO_Init+0x1ee>
 8001264:	2302      	movs	r3, #2
 8001266:	e002      	b.n	800126e <HAL_GPIO_Init+0x1ee>
 8001268:	2301      	movs	r3, #1
 800126a:	e000      	b.n	800126e <HAL_GPIO_Init+0x1ee>
 800126c:	2300      	movs	r3, #0
 800126e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001270:	f002 0203 	and.w	r2, r2, #3
 8001274:	0092      	lsls	r2, r2, #2
 8001276:	4093      	lsls	r3, r2
 8001278:	68fa      	ldr	r2, [r7, #12]
 800127a:	4313      	orrs	r3, r2
 800127c:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800127e:	492f      	ldr	r1, [pc, #188]	; (800133c <HAL_GPIO_Init+0x2bc>)
 8001280:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001282:	089b      	lsrs	r3, r3, #2
 8001284:	3302      	adds	r3, #2
 8001286:	68fa      	ldr	r2, [r7, #12]
 8001288:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800128c:	683b      	ldr	r3, [r7, #0]
 800128e:	685b      	ldr	r3, [r3, #4]
 8001290:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001294:	2b00      	cmp	r3, #0
 8001296:	d006      	beq.n	80012a6 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001298:	4b2d      	ldr	r3, [pc, #180]	; (8001350 <HAL_GPIO_Init+0x2d0>)
 800129a:	689a      	ldr	r2, [r3, #8]
 800129c:	492c      	ldr	r1, [pc, #176]	; (8001350 <HAL_GPIO_Init+0x2d0>)
 800129e:	69bb      	ldr	r3, [r7, #24]
 80012a0:	4313      	orrs	r3, r2
 80012a2:	608b      	str	r3, [r1, #8]
 80012a4:	e006      	b.n	80012b4 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80012a6:	4b2a      	ldr	r3, [pc, #168]	; (8001350 <HAL_GPIO_Init+0x2d0>)
 80012a8:	689a      	ldr	r2, [r3, #8]
 80012aa:	69bb      	ldr	r3, [r7, #24]
 80012ac:	43db      	mvns	r3, r3
 80012ae:	4928      	ldr	r1, [pc, #160]	; (8001350 <HAL_GPIO_Init+0x2d0>)
 80012b0:	4013      	ands	r3, r2
 80012b2:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80012b4:	683b      	ldr	r3, [r7, #0]
 80012b6:	685b      	ldr	r3, [r3, #4]
 80012b8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80012bc:	2b00      	cmp	r3, #0
 80012be:	d006      	beq.n	80012ce <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80012c0:	4b23      	ldr	r3, [pc, #140]	; (8001350 <HAL_GPIO_Init+0x2d0>)
 80012c2:	68da      	ldr	r2, [r3, #12]
 80012c4:	4922      	ldr	r1, [pc, #136]	; (8001350 <HAL_GPIO_Init+0x2d0>)
 80012c6:	69bb      	ldr	r3, [r7, #24]
 80012c8:	4313      	orrs	r3, r2
 80012ca:	60cb      	str	r3, [r1, #12]
 80012cc:	e006      	b.n	80012dc <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80012ce:	4b20      	ldr	r3, [pc, #128]	; (8001350 <HAL_GPIO_Init+0x2d0>)
 80012d0:	68da      	ldr	r2, [r3, #12]
 80012d2:	69bb      	ldr	r3, [r7, #24]
 80012d4:	43db      	mvns	r3, r3
 80012d6:	491e      	ldr	r1, [pc, #120]	; (8001350 <HAL_GPIO_Init+0x2d0>)
 80012d8:	4013      	ands	r3, r2
 80012da:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80012dc:	683b      	ldr	r3, [r7, #0]
 80012de:	685b      	ldr	r3, [r3, #4]
 80012e0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80012e4:	2b00      	cmp	r3, #0
 80012e6:	d006      	beq.n	80012f6 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80012e8:	4b19      	ldr	r3, [pc, #100]	; (8001350 <HAL_GPIO_Init+0x2d0>)
 80012ea:	685a      	ldr	r2, [r3, #4]
 80012ec:	4918      	ldr	r1, [pc, #96]	; (8001350 <HAL_GPIO_Init+0x2d0>)
 80012ee:	69bb      	ldr	r3, [r7, #24]
 80012f0:	4313      	orrs	r3, r2
 80012f2:	604b      	str	r3, [r1, #4]
 80012f4:	e006      	b.n	8001304 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80012f6:	4b16      	ldr	r3, [pc, #88]	; (8001350 <HAL_GPIO_Init+0x2d0>)
 80012f8:	685a      	ldr	r2, [r3, #4]
 80012fa:	69bb      	ldr	r3, [r7, #24]
 80012fc:	43db      	mvns	r3, r3
 80012fe:	4914      	ldr	r1, [pc, #80]	; (8001350 <HAL_GPIO_Init+0x2d0>)
 8001300:	4013      	ands	r3, r2
 8001302:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001304:	683b      	ldr	r3, [r7, #0]
 8001306:	685b      	ldr	r3, [r3, #4]
 8001308:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800130c:	2b00      	cmp	r3, #0
 800130e:	d021      	beq.n	8001354 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001310:	4b0f      	ldr	r3, [pc, #60]	; (8001350 <HAL_GPIO_Init+0x2d0>)
 8001312:	681a      	ldr	r2, [r3, #0]
 8001314:	490e      	ldr	r1, [pc, #56]	; (8001350 <HAL_GPIO_Init+0x2d0>)
 8001316:	69bb      	ldr	r3, [r7, #24]
 8001318:	4313      	orrs	r3, r2
 800131a:	600b      	str	r3, [r1, #0]
 800131c:	e021      	b.n	8001362 <HAL_GPIO_Init+0x2e2>
 800131e:	bf00      	nop
 8001320:	10320000 	.word	0x10320000
 8001324:	10310000 	.word	0x10310000
 8001328:	10220000 	.word	0x10220000
 800132c:	10210000 	.word	0x10210000
 8001330:	10120000 	.word	0x10120000
 8001334:	10110000 	.word	0x10110000
 8001338:	40021000 	.word	0x40021000
 800133c:	40010000 	.word	0x40010000
 8001340:	40010800 	.word	0x40010800
 8001344:	40010c00 	.word	0x40010c00
 8001348:	40011000 	.word	0x40011000
 800134c:	40011400 	.word	0x40011400
 8001350:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001354:	4b0b      	ldr	r3, [pc, #44]	; (8001384 <HAL_GPIO_Init+0x304>)
 8001356:	681a      	ldr	r2, [r3, #0]
 8001358:	69bb      	ldr	r3, [r7, #24]
 800135a:	43db      	mvns	r3, r3
 800135c:	4909      	ldr	r1, [pc, #36]	; (8001384 <HAL_GPIO_Init+0x304>)
 800135e:	4013      	ands	r3, r2
 8001360:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8001362:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001364:	3301      	adds	r3, #1
 8001366:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001368:	683b      	ldr	r3, [r7, #0]
 800136a:	681a      	ldr	r2, [r3, #0]
 800136c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800136e:	fa22 f303 	lsr.w	r3, r2, r3
 8001372:	2b00      	cmp	r3, #0
 8001374:	f47f ae8e 	bne.w	8001094 <HAL_GPIO_Init+0x14>
  }
}
 8001378:	bf00      	nop
 800137a:	bf00      	nop
 800137c:	372c      	adds	r7, #44	; 0x2c
 800137e:	46bd      	mov	sp, r7
 8001380:	bc80      	pop	{r7}
 8001382:	4770      	bx	lr
 8001384:	40010400 	.word	0x40010400

08001388 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001388:	b580      	push	{r7, lr}
 800138a:	b086      	sub	sp, #24
 800138c:	af00      	add	r7, sp, #0
 800138e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	2b00      	cmp	r3, #0
 8001394:	d101      	bne.n	800139a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001396:	2301      	movs	r3, #1
 8001398:	e272      	b.n	8001880 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	681b      	ldr	r3, [r3, #0]
 800139e:	f003 0301 	and.w	r3, r3, #1
 80013a2:	2b00      	cmp	r3, #0
 80013a4:	f000 8087 	beq.w	80014b6 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80013a8:	4b92      	ldr	r3, [pc, #584]	; (80015f4 <HAL_RCC_OscConfig+0x26c>)
 80013aa:	685b      	ldr	r3, [r3, #4]
 80013ac:	f003 030c 	and.w	r3, r3, #12
 80013b0:	2b04      	cmp	r3, #4
 80013b2:	d00c      	beq.n	80013ce <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80013b4:	4b8f      	ldr	r3, [pc, #572]	; (80015f4 <HAL_RCC_OscConfig+0x26c>)
 80013b6:	685b      	ldr	r3, [r3, #4]
 80013b8:	f003 030c 	and.w	r3, r3, #12
 80013bc:	2b08      	cmp	r3, #8
 80013be:	d112      	bne.n	80013e6 <HAL_RCC_OscConfig+0x5e>
 80013c0:	4b8c      	ldr	r3, [pc, #560]	; (80015f4 <HAL_RCC_OscConfig+0x26c>)
 80013c2:	685b      	ldr	r3, [r3, #4]
 80013c4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80013c8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80013cc:	d10b      	bne.n	80013e6 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80013ce:	4b89      	ldr	r3, [pc, #548]	; (80015f4 <HAL_RCC_OscConfig+0x26c>)
 80013d0:	681b      	ldr	r3, [r3, #0]
 80013d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80013d6:	2b00      	cmp	r3, #0
 80013d8:	d06c      	beq.n	80014b4 <HAL_RCC_OscConfig+0x12c>
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	685b      	ldr	r3, [r3, #4]
 80013de:	2b00      	cmp	r3, #0
 80013e0:	d168      	bne.n	80014b4 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80013e2:	2301      	movs	r3, #1
 80013e4:	e24c      	b.n	8001880 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	685b      	ldr	r3, [r3, #4]
 80013ea:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80013ee:	d106      	bne.n	80013fe <HAL_RCC_OscConfig+0x76>
 80013f0:	4b80      	ldr	r3, [pc, #512]	; (80015f4 <HAL_RCC_OscConfig+0x26c>)
 80013f2:	681b      	ldr	r3, [r3, #0]
 80013f4:	4a7f      	ldr	r2, [pc, #508]	; (80015f4 <HAL_RCC_OscConfig+0x26c>)
 80013f6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80013fa:	6013      	str	r3, [r2, #0]
 80013fc:	e02e      	b.n	800145c <HAL_RCC_OscConfig+0xd4>
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	685b      	ldr	r3, [r3, #4]
 8001402:	2b00      	cmp	r3, #0
 8001404:	d10c      	bne.n	8001420 <HAL_RCC_OscConfig+0x98>
 8001406:	4b7b      	ldr	r3, [pc, #492]	; (80015f4 <HAL_RCC_OscConfig+0x26c>)
 8001408:	681b      	ldr	r3, [r3, #0]
 800140a:	4a7a      	ldr	r2, [pc, #488]	; (80015f4 <HAL_RCC_OscConfig+0x26c>)
 800140c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001410:	6013      	str	r3, [r2, #0]
 8001412:	4b78      	ldr	r3, [pc, #480]	; (80015f4 <HAL_RCC_OscConfig+0x26c>)
 8001414:	681b      	ldr	r3, [r3, #0]
 8001416:	4a77      	ldr	r2, [pc, #476]	; (80015f4 <HAL_RCC_OscConfig+0x26c>)
 8001418:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800141c:	6013      	str	r3, [r2, #0]
 800141e:	e01d      	b.n	800145c <HAL_RCC_OscConfig+0xd4>
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	685b      	ldr	r3, [r3, #4]
 8001424:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001428:	d10c      	bne.n	8001444 <HAL_RCC_OscConfig+0xbc>
 800142a:	4b72      	ldr	r3, [pc, #456]	; (80015f4 <HAL_RCC_OscConfig+0x26c>)
 800142c:	681b      	ldr	r3, [r3, #0]
 800142e:	4a71      	ldr	r2, [pc, #452]	; (80015f4 <HAL_RCC_OscConfig+0x26c>)
 8001430:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001434:	6013      	str	r3, [r2, #0]
 8001436:	4b6f      	ldr	r3, [pc, #444]	; (80015f4 <HAL_RCC_OscConfig+0x26c>)
 8001438:	681b      	ldr	r3, [r3, #0]
 800143a:	4a6e      	ldr	r2, [pc, #440]	; (80015f4 <HAL_RCC_OscConfig+0x26c>)
 800143c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001440:	6013      	str	r3, [r2, #0]
 8001442:	e00b      	b.n	800145c <HAL_RCC_OscConfig+0xd4>
 8001444:	4b6b      	ldr	r3, [pc, #428]	; (80015f4 <HAL_RCC_OscConfig+0x26c>)
 8001446:	681b      	ldr	r3, [r3, #0]
 8001448:	4a6a      	ldr	r2, [pc, #424]	; (80015f4 <HAL_RCC_OscConfig+0x26c>)
 800144a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800144e:	6013      	str	r3, [r2, #0]
 8001450:	4b68      	ldr	r3, [pc, #416]	; (80015f4 <HAL_RCC_OscConfig+0x26c>)
 8001452:	681b      	ldr	r3, [r3, #0]
 8001454:	4a67      	ldr	r2, [pc, #412]	; (80015f4 <HAL_RCC_OscConfig+0x26c>)
 8001456:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800145a:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	685b      	ldr	r3, [r3, #4]
 8001460:	2b00      	cmp	r3, #0
 8001462:	d013      	beq.n	800148c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001464:	f7ff fcf4 	bl	8000e50 <HAL_GetTick>
 8001468:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800146a:	e008      	b.n	800147e <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800146c:	f7ff fcf0 	bl	8000e50 <HAL_GetTick>
 8001470:	4602      	mov	r2, r0
 8001472:	693b      	ldr	r3, [r7, #16]
 8001474:	1ad3      	subs	r3, r2, r3
 8001476:	2b64      	cmp	r3, #100	; 0x64
 8001478:	d901      	bls.n	800147e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800147a:	2303      	movs	r3, #3
 800147c:	e200      	b.n	8001880 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800147e:	4b5d      	ldr	r3, [pc, #372]	; (80015f4 <HAL_RCC_OscConfig+0x26c>)
 8001480:	681b      	ldr	r3, [r3, #0]
 8001482:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001486:	2b00      	cmp	r3, #0
 8001488:	d0f0      	beq.n	800146c <HAL_RCC_OscConfig+0xe4>
 800148a:	e014      	b.n	80014b6 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800148c:	f7ff fce0 	bl	8000e50 <HAL_GetTick>
 8001490:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001492:	e008      	b.n	80014a6 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001494:	f7ff fcdc 	bl	8000e50 <HAL_GetTick>
 8001498:	4602      	mov	r2, r0
 800149a:	693b      	ldr	r3, [r7, #16]
 800149c:	1ad3      	subs	r3, r2, r3
 800149e:	2b64      	cmp	r3, #100	; 0x64
 80014a0:	d901      	bls.n	80014a6 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80014a2:	2303      	movs	r3, #3
 80014a4:	e1ec      	b.n	8001880 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80014a6:	4b53      	ldr	r3, [pc, #332]	; (80015f4 <HAL_RCC_OscConfig+0x26c>)
 80014a8:	681b      	ldr	r3, [r3, #0]
 80014aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80014ae:	2b00      	cmp	r3, #0
 80014b0:	d1f0      	bne.n	8001494 <HAL_RCC_OscConfig+0x10c>
 80014b2:	e000      	b.n	80014b6 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80014b4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	681b      	ldr	r3, [r3, #0]
 80014ba:	f003 0302 	and.w	r3, r3, #2
 80014be:	2b00      	cmp	r3, #0
 80014c0:	d063      	beq.n	800158a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80014c2:	4b4c      	ldr	r3, [pc, #304]	; (80015f4 <HAL_RCC_OscConfig+0x26c>)
 80014c4:	685b      	ldr	r3, [r3, #4]
 80014c6:	f003 030c 	and.w	r3, r3, #12
 80014ca:	2b00      	cmp	r3, #0
 80014cc:	d00b      	beq.n	80014e6 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80014ce:	4b49      	ldr	r3, [pc, #292]	; (80015f4 <HAL_RCC_OscConfig+0x26c>)
 80014d0:	685b      	ldr	r3, [r3, #4]
 80014d2:	f003 030c 	and.w	r3, r3, #12
 80014d6:	2b08      	cmp	r3, #8
 80014d8:	d11c      	bne.n	8001514 <HAL_RCC_OscConfig+0x18c>
 80014da:	4b46      	ldr	r3, [pc, #280]	; (80015f4 <HAL_RCC_OscConfig+0x26c>)
 80014dc:	685b      	ldr	r3, [r3, #4]
 80014de:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80014e2:	2b00      	cmp	r3, #0
 80014e4:	d116      	bne.n	8001514 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80014e6:	4b43      	ldr	r3, [pc, #268]	; (80015f4 <HAL_RCC_OscConfig+0x26c>)
 80014e8:	681b      	ldr	r3, [r3, #0]
 80014ea:	f003 0302 	and.w	r3, r3, #2
 80014ee:	2b00      	cmp	r3, #0
 80014f0:	d005      	beq.n	80014fe <HAL_RCC_OscConfig+0x176>
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	691b      	ldr	r3, [r3, #16]
 80014f6:	2b01      	cmp	r3, #1
 80014f8:	d001      	beq.n	80014fe <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80014fa:	2301      	movs	r3, #1
 80014fc:	e1c0      	b.n	8001880 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80014fe:	4b3d      	ldr	r3, [pc, #244]	; (80015f4 <HAL_RCC_OscConfig+0x26c>)
 8001500:	681b      	ldr	r3, [r3, #0]
 8001502:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	695b      	ldr	r3, [r3, #20]
 800150a:	00db      	lsls	r3, r3, #3
 800150c:	4939      	ldr	r1, [pc, #228]	; (80015f4 <HAL_RCC_OscConfig+0x26c>)
 800150e:	4313      	orrs	r3, r2
 8001510:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001512:	e03a      	b.n	800158a <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	691b      	ldr	r3, [r3, #16]
 8001518:	2b00      	cmp	r3, #0
 800151a:	d020      	beq.n	800155e <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800151c:	4b36      	ldr	r3, [pc, #216]	; (80015f8 <HAL_RCC_OscConfig+0x270>)
 800151e:	2201      	movs	r2, #1
 8001520:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001522:	f7ff fc95 	bl	8000e50 <HAL_GetTick>
 8001526:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001528:	e008      	b.n	800153c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800152a:	f7ff fc91 	bl	8000e50 <HAL_GetTick>
 800152e:	4602      	mov	r2, r0
 8001530:	693b      	ldr	r3, [r7, #16]
 8001532:	1ad3      	subs	r3, r2, r3
 8001534:	2b02      	cmp	r3, #2
 8001536:	d901      	bls.n	800153c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001538:	2303      	movs	r3, #3
 800153a:	e1a1      	b.n	8001880 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800153c:	4b2d      	ldr	r3, [pc, #180]	; (80015f4 <HAL_RCC_OscConfig+0x26c>)
 800153e:	681b      	ldr	r3, [r3, #0]
 8001540:	f003 0302 	and.w	r3, r3, #2
 8001544:	2b00      	cmp	r3, #0
 8001546:	d0f0      	beq.n	800152a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001548:	4b2a      	ldr	r3, [pc, #168]	; (80015f4 <HAL_RCC_OscConfig+0x26c>)
 800154a:	681b      	ldr	r3, [r3, #0]
 800154c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	695b      	ldr	r3, [r3, #20]
 8001554:	00db      	lsls	r3, r3, #3
 8001556:	4927      	ldr	r1, [pc, #156]	; (80015f4 <HAL_RCC_OscConfig+0x26c>)
 8001558:	4313      	orrs	r3, r2
 800155a:	600b      	str	r3, [r1, #0]
 800155c:	e015      	b.n	800158a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800155e:	4b26      	ldr	r3, [pc, #152]	; (80015f8 <HAL_RCC_OscConfig+0x270>)
 8001560:	2200      	movs	r2, #0
 8001562:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001564:	f7ff fc74 	bl	8000e50 <HAL_GetTick>
 8001568:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800156a:	e008      	b.n	800157e <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800156c:	f7ff fc70 	bl	8000e50 <HAL_GetTick>
 8001570:	4602      	mov	r2, r0
 8001572:	693b      	ldr	r3, [r7, #16]
 8001574:	1ad3      	subs	r3, r2, r3
 8001576:	2b02      	cmp	r3, #2
 8001578:	d901      	bls.n	800157e <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800157a:	2303      	movs	r3, #3
 800157c:	e180      	b.n	8001880 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800157e:	4b1d      	ldr	r3, [pc, #116]	; (80015f4 <HAL_RCC_OscConfig+0x26c>)
 8001580:	681b      	ldr	r3, [r3, #0]
 8001582:	f003 0302 	and.w	r3, r3, #2
 8001586:	2b00      	cmp	r3, #0
 8001588:	d1f0      	bne.n	800156c <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	681b      	ldr	r3, [r3, #0]
 800158e:	f003 0308 	and.w	r3, r3, #8
 8001592:	2b00      	cmp	r3, #0
 8001594:	d03a      	beq.n	800160c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	699b      	ldr	r3, [r3, #24]
 800159a:	2b00      	cmp	r3, #0
 800159c:	d019      	beq.n	80015d2 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800159e:	4b17      	ldr	r3, [pc, #92]	; (80015fc <HAL_RCC_OscConfig+0x274>)
 80015a0:	2201      	movs	r2, #1
 80015a2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80015a4:	f7ff fc54 	bl	8000e50 <HAL_GetTick>
 80015a8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80015aa:	e008      	b.n	80015be <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80015ac:	f7ff fc50 	bl	8000e50 <HAL_GetTick>
 80015b0:	4602      	mov	r2, r0
 80015b2:	693b      	ldr	r3, [r7, #16]
 80015b4:	1ad3      	subs	r3, r2, r3
 80015b6:	2b02      	cmp	r3, #2
 80015b8:	d901      	bls.n	80015be <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80015ba:	2303      	movs	r3, #3
 80015bc:	e160      	b.n	8001880 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80015be:	4b0d      	ldr	r3, [pc, #52]	; (80015f4 <HAL_RCC_OscConfig+0x26c>)
 80015c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80015c2:	f003 0302 	and.w	r3, r3, #2
 80015c6:	2b00      	cmp	r3, #0
 80015c8:	d0f0      	beq.n	80015ac <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80015ca:	2001      	movs	r0, #1
 80015cc:	f000 fa9e 	bl	8001b0c <RCC_Delay>
 80015d0:	e01c      	b.n	800160c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80015d2:	4b0a      	ldr	r3, [pc, #40]	; (80015fc <HAL_RCC_OscConfig+0x274>)
 80015d4:	2200      	movs	r2, #0
 80015d6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80015d8:	f7ff fc3a 	bl	8000e50 <HAL_GetTick>
 80015dc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80015de:	e00f      	b.n	8001600 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80015e0:	f7ff fc36 	bl	8000e50 <HAL_GetTick>
 80015e4:	4602      	mov	r2, r0
 80015e6:	693b      	ldr	r3, [r7, #16]
 80015e8:	1ad3      	subs	r3, r2, r3
 80015ea:	2b02      	cmp	r3, #2
 80015ec:	d908      	bls.n	8001600 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80015ee:	2303      	movs	r3, #3
 80015f0:	e146      	b.n	8001880 <HAL_RCC_OscConfig+0x4f8>
 80015f2:	bf00      	nop
 80015f4:	40021000 	.word	0x40021000
 80015f8:	42420000 	.word	0x42420000
 80015fc:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001600:	4b92      	ldr	r3, [pc, #584]	; (800184c <HAL_RCC_OscConfig+0x4c4>)
 8001602:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001604:	f003 0302 	and.w	r3, r3, #2
 8001608:	2b00      	cmp	r3, #0
 800160a:	d1e9      	bne.n	80015e0 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	681b      	ldr	r3, [r3, #0]
 8001610:	f003 0304 	and.w	r3, r3, #4
 8001614:	2b00      	cmp	r3, #0
 8001616:	f000 80a6 	beq.w	8001766 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800161a:	2300      	movs	r3, #0
 800161c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800161e:	4b8b      	ldr	r3, [pc, #556]	; (800184c <HAL_RCC_OscConfig+0x4c4>)
 8001620:	69db      	ldr	r3, [r3, #28]
 8001622:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001626:	2b00      	cmp	r3, #0
 8001628:	d10d      	bne.n	8001646 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800162a:	4b88      	ldr	r3, [pc, #544]	; (800184c <HAL_RCC_OscConfig+0x4c4>)
 800162c:	69db      	ldr	r3, [r3, #28]
 800162e:	4a87      	ldr	r2, [pc, #540]	; (800184c <HAL_RCC_OscConfig+0x4c4>)
 8001630:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001634:	61d3      	str	r3, [r2, #28]
 8001636:	4b85      	ldr	r3, [pc, #532]	; (800184c <HAL_RCC_OscConfig+0x4c4>)
 8001638:	69db      	ldr	r3, [r3, #28]
 800163a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800163e:	60bb      	str	r3, [r7, #8]
 8001640:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001642:	2301      	movs	r3, #1
 8001644:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001646:	4b82      	ldr	r3, [pc, #520]	; (8001850 <HAL_RCC_OscConfig+0x4c8>)
 8001648:	681b      	ldr	r3, [r3, #0]
 800164a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800164e:	2b00      	cmp	r3, #0
 8001650:	d118      	bne.n	8001684 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001652:	4b7f      	ldr	r3, [pc, #508]	; (8001850 <HAL_RCC_OscConfig+0x4c8>)
 8001654:	681b      	ldr	r3, [r3, #0]
 8001656:	4a7e      	ldr	r2, [pc, #504]	; (8001850 <HAL_RCC_OscConfig+0x4c8>)
 8001658:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800165c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800165e:	f7ff fbf7 	bl	8000e50 <HAL_GetTick>
 8001662:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001664:	e008      	b.n	8001678 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001666:	f7ff fbf3 	bl	8000e50 <HAL_GetTick>
 800166a:	4602      	mov	r2, r0
 800166c:	693b      	ldr	r3, [r7, #16]
 800166e:	1ad3      	subs	r3, r2, r3
 8001670:	2b64      	cmp	r3, #100	; 0x64
 8001672:	d901      	bls.n	8001678 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001674:	2303      	movs	r3, #3
 8001676:	e103      	b.n	8001880 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001678:	4b75      	ldr	r3, [pc, #468]	; (8001850 <HAL_RCC_OscConfig+0x4c8>)
 800167a:	681b      	ldr	r3, [r3, #0]
 800167c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001680:	2b00      	cmp	r3, #0
 8001682:	d0f0      	beq.n	8001666 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	68db      	ldr	r3, [r3, #12]
 8001688:	2b01      	cmp	r3, #1
 800168a:	d106      	bne.n	800169a <HAL_RCC_OscConfig+0x312>
 800168c:	4b6f      	ldr	r3, [pc, #444]	; (800184c <HAL_RCC_OscConfig+0x4c4>)
 800168e:	6a1b      	ldr	r3, [r3, #32]
 8001690:	4a6e      	ldr	r2, [pc, #440]	; (800184c <HAL_RCC_OscConfig+0x4c4>)
 8001692:	f043 0301 	orr.w	r3, r3, #1
 8001696:	6213      	str	r3, [r2, #32]
 8001698:	e02d      	b.n	80016f6 <HAL_RCC_OscConfig+0x36e>
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	68db      	ldr	r3, [r3, #12]
 800169e:	2b00      	cmp	r3, #0
 80016a0:	d10c      	bne.n	80016bc <HAL_RCC_OscConfig+0x334>
 80016a2:	4b6a      	ldr	r3, [pc, #424]	; (800184c <HAL_RCC_OscConfig+0x4c4>)
 80016a4:	6a1b      	ldr	r3, [r3, #32]
 80016a6:	4a69      	ldr	r2, [pc, #420]	; (800184c <HAL_RCC_OscConfig+0x4c4>)
 80016a8:	f023 0301 	bic.w	r3, r3, #1
 80016ac:	6213      	str	r3, [r2, #32]
 80016ae:	4b67      	ldr	r3, [pc, #412]	; (800184c <HAL_RCC_OscConfig+0x4c4>)
 80016b0:	6a1b      	ldr	r3, [r3, #32]
 80016b2:	4a66      	ldr	r2, [pc, #408]	; (800184c <HAL_RCC_OscConfig+0x4c4>)
 80016b4:	f023 0304 	bic.w	r3, r3, #4
 80016b8:	6213      	str	r3, [r2, #32]
 80016ba:	e01c      	b.n	80016f6 <HAL_RCC_OscConfig+0x36e>
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	68db      	ldr	r3, [r3, #12]
 80016c0:	2b05      	cmp	r3, #5
 80016c2:	d10c      	bne.n	80016de <HAL_RCC_OscConfig+0x356>
 80016c4:	4b61      	ldr	r3, [pc, #388]	; (800184c <HAL_RCC_OscConfig+0x4c4>)
 80016c6:	6a1b      	ldr	r3, [r3, #32]
 80016c8:	4a60      	ldr	r2, [pc, #384]	; (800184c <HAL_RCC_OscConfig+0x4c4>)
 80016ca:	f043 0304 	orr.w	r3, r3, #4
 80016ce:	6213      	str	r3, [r2, #32]
 80016d0:	4b5e      	ldr	r3, [pc, #376]	; (800184c <HAL_RCC_OscConfig+0x4c4>)
 80016d2:	6a1b      	ldr	r3, [r3, #32]
 80016d4:	4a5d      	ldr	r2, [pc, #372]	; (800184c <HAL_RCC_OscConfig+0x4c4>)
 80016d6:	f043 0301 	orr.w	r3, r3, #1
 80016da:	6213      	str	r3, [r2, #32]
 80016dc:	e00b      	b.n	80016f6 <HAL_RCC_OscConfig+0x36e>
 80016de:	4b5b      	ldr	r3, [pc, #364]	; (800184c <HAL_RCC_OscConfig+0x4c4>)
 80016e0:	6a1b      	ldr	r3, [r3, #32]
 80016e2:	4a5a      	ldr	r2, [pc, #360]	; (800184c <HAL_RCC_OscConfig+0x4c4>)
 80016e4:	f023 0301 	bic.w	r3, r3, #1
 80016e8:	6213      	str	r3, [r2, #32]
 80016ea:	4b58      	ldr	r3, [pc, #352]	; (800184c <HAL_RCC_OscConfig+0x4c4>)
 80016ec:	6a1b      	ldr	r3, [r3, #32]
 80016ee:	4a57      	ldr	r2, [pc, #348]	; (800184c <HAL_RCC_OscConfig+0x4c4>)
 80016f0:	f023 0304 	bic.w	r3, r3, #4
 80016f4:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	68db      	ldr	r3, [r3, #12]
 80016fa:	2b00      	cmp	r3, #0
 80016fc:	d015      	beq.n	800172a <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80016fe:	f7ff fba7 	bl	8000e50 <HAL_GetTick>
 8001702:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001704:	e00a      	b.n	800171c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001706:	f7ff fba3 	bl	8000e50 <HAL_GetTick>
 800170a:	4602      	mov	r2, r0
 800170c:	693b      	ldr	r3, [r7, #16]
 800170e:	1ad3      	subs	r3, r2, r3
 8001710:	f241 3288 	movw	r2, #5000	; 0x1388
 8001714:	4293      	cmp	r3, r2
 8001716:	d901      	bls.n	800171c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001718:	2303      	movs	r3, #3
 800171a:	e0b1      	b.n	8001880 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800171c:	4b4b      	ldr	r3, [pc, #300]	; (800184c <HAL_RCC_OscConfig+0x4c4>)
 800171e:	6a1b      	ldr	r3, [r3, #32]
 8001720:	f003 0302 	and.w	r3, r3, #2
 8001724:	2b00      	cmp	r3, #0
 8001726:	d0ee      	beq.n	8001706 <HAL_RCC_OscConfig+0x37e>
 8001728:	e014      	b.n	8001754 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800172a:	f7ff fb91 	bl	8000e50 <HAL_GetTick>
 800172e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001730:	e00a      	b.n	8001748 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001732:	f7ff fb8d 	bl	8000e50 <HAL_GetTick>
 8001736:	4602      	mov	r2, r0
 8001738:	693b      	ldr	r3, [r7, #16]
 800173a:	1ad3      	subs	r3, r2, r3
 800173c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001740:	4293      	cmp	r3, r2
 8001742:	d901      	bls.n	8001748 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001744:	2303      	movs	r3, #3
 8001746:	e09b      	b.n	8001880 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001748:	4b40      	ldr	r3, [pc, #256]	; (800184c <HAL_RCC_OscConfig+0x4c4>)
 800174a:	6a1b      	ldr	r3, [r3, #32]
 800174c:	f003 0302 	and.w	r3, r3, #2
 8001750:	2b00      	cmp	r3, #0
 8001752:	d1ee      	bne.n	8001732 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001754:	7dfb      	ldrb	r3, [r7, #23]
 8001756:	2b01      	cmp	r3, #1
 8001758:	d105      	bne.n	8001766 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800175a:	4b3c      	ldr	r3, [pc, #240]	; (800184c <HAL_RCC_OscConfig+0x4c4>)
 800175c:	69db      	ldr	r3, [r3, #28]
 800175e:	4a3b      	ldr	r2, [pc, #236]	; (800184c <HAL_RCC_OscConfig+0x4c4>)
 8001760:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001764:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	69db      	ldr	r3, [r3, #28]
 800176a:	2b00      	cmp	r3, #0
 800176c:	f000 8087 	beq.w	800187e <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001770:	4b36      	ldr	r3, [pc, #216]	; (800184c <HAL_RCC_OscConfig+0x4c4>)
 8001772:	685b      	ldr	r3, [r3, #4]
 8001774:	f003 030c 	and.w	r3, r3, #12
 8001778:	2b08      	cmp	r3, #8
 800177a:	d061      	beq.n	8001840 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	69db      	ldr	r3, [r3, #28]
 8001780:	2b02      	cmp	r3, #2
 8001782:	d146      	bne.n	8001812 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001784:	4b33      	ldr	r3, [pc, #204]	; (8001854 <HAL_RCC_OscConfig+0x4cc>)
 8001786:	2200      	movs	r2, #0
 8001788:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800178a:	f7ff fb61 	bl	8000e50 <HAL_GetTick>
 800178e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001790:	e008      	b.n	80017a4 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001792:	f7ff fb5d 	bl	8000e50 <HAL_GetTick>
 8001796:	4602      	mov	r2, r0
 8001798:	693b      	ldr	r3, [r7, #16]
 800179a:	1ad3      	subs	r3, r2, r3
 800179c:	2b02      	cmp	r3, #2
 800179e:	d901      	bls.n	80017a4 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80017a0:	2303      	movs	r3, #3
 80017a2:	e06d      	b.n	8001880 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80017a4:	4b29      	ldr	r3, [pc, #164]	; (800184c <HAL_RCC_OscConfig+0x4c4>)
 80017a6:	681b      	ldr	r3, [r3, #0]
 80017a8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80017ac:	2b00      	cmp	r3, #0
 80017ae:	d1f0      	bne.n	8001792 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	6a1b      	ldr	r3, [r3, #32]
 80017b4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80017b8:	d108      	bne.n	80017cc <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80017ba:	4b24      	ldr	r3, [pc, #144]	; (800184c <HAL_RCC_OscConfig+0x4c4>)
 80017bc:	685b      	ldr	r3, [r3, #4]
 80017be:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	689b      	ldr	r3, [r3, #8]
 80017c6:	4921      	ldr	r1, [pc, #132]	; (800184c <HAL_RCC_OscConfig+0x4c4>)
 80017c8:	4313      	orrs	r3, r2
 80017ca:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80017cc:	4b1f      	ldr	r3, [pc, #124]	; (800184c <HAL_RCC_OscConfig+0x4c4>)
 80017ce:	685b      	ldr	r3, [r3, #4]
 80017d0:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	6a19      	ldr	r1, [r3, #32]
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017dc:	430b      	orrs	r3, r1
 80017de:	491b      	ldr	r1, [pc, #108]	; (800184c <HAL_RCC_OscConfig+0x4c4>)
 80017e0:	4313      	orrs	r3, r2
 80017e2:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80017e4:	4b1b      	ldr	r3, [pc, #108]	; (8001854 <HAL_RCC_OscConfig+0x4cc>)
 80017e6:	2201      	movs	r2, #1
 80017e8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80017ea:	f7ff fb31 	bl	8000e50 <HAL_GetTick>
 80017ee:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80017f0:	e008      	b.n	8001804 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80017f2:	f7ff fb2d 	bl	8000e50 <HAL_GetTick>
 80017f6:	4602      	mov	r2, r0
 80017f8:	693b      	ldr	r3, [r7, #16]
 80017fa:	1ad3      	subs	r3, r2, r3
 80017fc:	2b02      	cmp	r3, #2
 80017fe:	d901      	bls.n	8001804 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001800:	2303      	movs	r3, #3
 8001802:	e03d      	b.n	8001880 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001804:	4b11      	ldr	r3, [pc, #68]	; (800184c <HAL_RCC_OscConfig+0x4c4>)
 8001806:	681b      	ldr	r3, [r3, #0]
 8001808:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800180c:	2b00      	cmp	r3, #0
 800180e:	d0f0      	beq.n	80017f2 <HAL_RCC_OscConfig+0x46a>
 8001810:	e035      	b.n	800187e <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001812:	4b10      	ldr	r3, [pc, #64]	; (8001854 <HAL_RCC_OscConfig+0x4cc>)
 8001814:	2200      	movs	r2, #0
 8001816:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001818:	f7ff fb1a 	bl	8000e50 <HAL_GetTick>
 800181c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800181e:	e008      	b.n	8001832 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001820:	f7ff fb16 	bl	8000e50 <HAL_GetTick>
 8001824:	4602      	mov	r2, r0
 8001826:	693b      	ldr	r3, [r7, #16]
 8001828:	1ad3      	subs	r3, r2, r3
 800182a:	2b02      	cmp	r3, #2
 800182c:	d901      	bls.n	8001832 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800182e:	2303      	movs	r3, #3
 8001830:	e026      	b.n	8001880 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001832:	4b06      	ldr	r3, [pc, #24]	; (800184c <HAL_RCC_OscConfig+0x4c4>)
 8001834:	681b      	ldr	r3, [r3, #0]
 8001836:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800183a:	2b00      	cmp	r3, #0
 800183c:	d1f0      	bne.n	8001820 <HAL_RCC_OscConfig+0x498>
 800183e:	e01e      	b.n	800187e <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	69db      	ldr	r3, [r3, #28]
 8001844:	2b01      	cmp	r3, #1
 8001846:	d107      	bne.n	8001858 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8001848:	2301      	movs	r3, #1
 800184a:	e019      	b.n	8001880 <HAL_RCC_OscConfig+0x4f8>
 800184c:	40021000 	.word	0x40021000
 8001850:	40007000 	.word	0x40007000
 8001854:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001858:	4b0b      	ldr	r3, [pc, #44]	; (8001888 <HAL_RCC_OscConfig+0x500>)
 800185a:	685b      	ldr	r3, [r3, #4]
 800185c:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800185e:	68fb      	ldr	r3, [r7, #12]
 8001860:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	6a1b      	ldr	r3, [r3, #32]
 8001868:	429a      	cmp	r2, r3
 800186a:	d106      	bne.n	800187a <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 800186c:	68fb      	ldr	r3, [r7, #12]
 800186e:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001876:	429a      	cmp	r2, r3
 8001878:	d001      	beq.n	800187e <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 800187a:	2301      	movs	r3, #1
 800187c:	e000      	b.n	8001880 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 800187e:	2300      	movs	r3, #0
}
 8001880:	4618      	mov	r0, r3
 8001882:	3718      	adds	r7, #24
 8001884:	46bd      	mov	sp, r7
 8001886:	bd80      	pop	{r7, pc}
 8001888:	40021000 	.word	0x40021000

0800188c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800188c:	b580      	push	{r7, lr}
 800188e:	b084      	sub	sp, #16
 8001890:	af00      	add	r7, sp, #0
 8001892:	6078      	str	r0, [r7, #4]
 8001894:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	2b00      	cmp	r3, #0
 800189a:	d101      	bne.n	80018a0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800189c:	2301      	movs	r3, #1
 800189e:	e0d0      	b.n	8001a42 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80018a0:	4b6a      	ldr	r3, [pc, #424]	; (8001a4c <HAL_RCC_ClockConfig+0x1c0>)
 80018a2:	681b      	ldr	r3, [r3, #0]
 80018a4:	f003 0307 	and.w	r3, r3, #7
 80018a8:	683a      	ldr	r2, [r7, #0]
 80018aa:	429a      	cmp	r2, r3
 80018ac:	d910      	bls.n	80018d0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80018ae:	4b67      	ldr	r3, [pc, #412]	; (8001a4c <HAL_RCC_ClockConfig+0x1c0>)
 80018b0:	681b      	ldr	r3, [r3, #0]
 80018b2:	f023 0207 	bic.w	r2, r3, #7
 80018b6:	4965      	ldr	r1, [pc, #404]	; (8001a4c <HAL_RCC_ClockConfig+0x1c0>)
 80018b8:	683b      	ldr	r3, [r7, #0]
 80018ba:	4313      	orrs	r3, r2
 80018bc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80018be:	4b63      	ldr	r3, [pc, #396]	; (8001a4c <HAL_RCC_ClockConfig+0x1c0>)
 80018c0:	681b      	ldr	r3, [r3, #0]
 80018c2:	f003 0307 	and.w	r3, r3, #7
 80018c6:	683a      	ldr	r2, [r7, #0]
 80018c8:	429a      	cmp	r2, r3
 80018ca:	d001      	beq.n	80018d0 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80018cc:	2301      	movs	r3, #1
 80018ce:	e0b8      	b.n	8001a42 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	681b      	ldr	r3, [r3, #0]
 80018d4:	f003 0302 	and.w	r3, r3, #2
 80018d8:	2b00      	cmp	r3, #0
 80018da:	d020      	beq.n	800191e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	f003 0304 	and.w	r3, r3, #4
 80018e4:	2b00      	cmp	r3, #0
 80018e6:	d005      	beq.n	80018f4 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80018e8:	4b59      	ldr	r3, [pc, #356]	; (8001a50 <HAL_RCC_ClockConfig+0x1c4>)
 80018ea:	685b      	ldr	r3, [r3, #4]
 80018ec:	4a58      	ldr	r2, [pc, #352]	; (8001a50 <HAL_RCC_ClockConfig+0x1c4>)
 80018ee:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80018f2:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	681b      	ldr	r3, [r3, #0]
 80018f8:	f003 0308 	and.w	r3, r3, #8
 80018fc:	2b00      	cmp	r3, #0
 80018fe:	d005      	beq.n	800190c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001900:	4b53      	ldr	r3, [pc, #332]	; (8001a50 <HAL_RCC_ClockConfig+0x1c4>)
 8001902:	685b      	ldr	r3, [r3, #4]
 8001904:	4a52      	ldr	r2, [pc, #328]	; (8001a50 <HAL_RCC_ClockConfig+0x1c4>)
 8001906:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800190a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800190c:	4b50      	ldr	r3, [pc, #320]	; (8001a50 <HAL_RCC_ClockConfig+0x1c4>)
 800190e:	685b      	ldr	r3, [r3, #4]
 8001910:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	689b      	ldr	r3, [r3, #8]
 8001918:	494d      	ldr	r1, [pc, #308]	; (8001a50 <HAL_RCC_ClockConfig+0x1c4>)
 800191a:	4313      	orrs	r3, r2
 800191c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	681b      	ldr	r3, [r3, #0]
 8001922:	f003 0301 	and.w	r3, r3, #1
 8001926:	2b00      	cmp	r3, #0
 8001928:	d040      	beq.n	80019ac <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	685b      	ldr	r3, [r3, #4]
 800192e:	2b01      	cmp	r3, #1
 8001930:	d107      	bne.n	8001942 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001932:	4b47      	ldr	r3, [pc, #284]	; (8001a50 <HAL_RCC_ClockConfig+0x1c4>)
 8001934:	681b      	ldr	r3, [r3, #0]
 8001936:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800193a:	2b00      	cmp	r3, #0
 800193c:	d115      	bne.n	800196a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800193e:	2301      	movs	r3, #1
 8001940:	e07f      	b.n	8001a42 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	685b      	ldr	r3, [r3, #4]
 8001946:	2b02      	cmp	r3, #2
 8001948:	d107      	bne.n	800195a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800194a:	4b41      	ldr	r3, [pc, #260]	; (8001a50 <HAL_RCC_ClockConfig+0x1c4>)
 800194c:	681b      	ldr	r3, [r3, #0]
 800194e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001952:	2b00      	cmp	r3, #0
 8001954:	d109      	bne.n	800196a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001956:	2301      	movs	r3, #1
 8001958:	e073      	b.n	8001a42 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800195a:	4b3d      	ldr	r3, [pc, #244]	; (8001a50 <HAL_RCC_ClockConfig+0x1c4>)
 800195c:	681b      	ldr	r3, [r3, #0]
 800195e:	f003 0302 	and.w	r3, r3, #2
 8001962:	2b00      	cmp	r3, #0
 8001964:	d101      	bne.n	800196a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001966:	2301      	movs	r3, #1
 8001968:	e06b      	b.n	8001a42 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800196a:	4b39      	ldr	r3, [pc, #228]	; (8001a50 <HAL_RCC_ClockConfig+0x1c4>)
 800196c:	685b      	ldr	r3, [r3, #4]
 800196e:	f023 0203 	bic.w	r2, r3, #3
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	685b      	ldr	r3, [r3, #4]
 8001976:	4936      	ldr	r1, [pc, #216]	; (8001a50 <HAL_RCC_ClockConfig+0x1c4>)
 8001978:	4313      	orrs	r3, r2
 800197a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800197c:	f7ff fa68 	bl	8000e50 <HAL_GetTick>
 8001980:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001982:	e00a      	b.n	800199a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001984:	f7ff fa64 	bl	8000e50 <HAL_GetTick>
 8001988:	4602      	mov	r2, r0
 800198a:	68fb      	ldr	r3, [r7, #12]
 800198c:	1ad3      	subs	r3, r2, r3
 800198e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001992:	4293      	cmp	r3, r2
 8001994:	d901      	bls.n	800199a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001996:	2303      	movs	r3, #3
 8001998:	e053      	b.n	8001a42 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800199a:	4b2d      	ldr	r3, [pc, #180]	; (8001a50 <HAL_RCC_ClockConfig+0x1c4>)
 800199c:	685b      	ldr	r3, [r3, #4]
 800199e:	f003 020c 	and.w	r2, r3, #12
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	685b      	ldr	r3, [r3, #4]
 80019a6:	009b      	lsls	r3, r3, #2
 80019a8:	429a      	cmp	r2, r3
 80019aa:	d1eb      	bne.n	8001984 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80019ac:	4b27      	ldr	r3, [pc, #156]	; (8001a4c <HAL_RCC_ClockConfig+0x1c0>)
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	f003 0307 	and.w	r3, r3, #7
 80019b4:	683a      	ldr	r2, [r7, #0]
 80019b6:	429a      	cmp	r2, r3
 80019b8:	d210      	bcs.n	80019dc <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80019ba:	4b24      	ldr	r3, [pc, #144]	; (8001a4c <HAL_RCC_ClockConfig+0x1c0>)
 80019bc:	681b      	ldr	r3, [r3, #0]
 80019be:	f023 0207 	bic.w	r2, r3, #7
 80019c2:	4922      	ldr	r1, [pc, #136]	; (8001a4c <HAL_RCC_ClockConfig+0x1c0>)
 80019c4:	683b      	ldr	r3, [r7, #0]
 80019c6:	4313      	orrs	r3, r2
 80019c8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80019ca:	4b20      	ldr	r3, [pc, #128]	; (8001a4c <HAL_RCC_ClockConfig+0x1c0>)
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	f003 0307 	and.w	r3, r3, #7
 80019d2:	683a      	ldr	r2, [r7, #0]
 80019d4:	429a      	cmp	r2, r3
 80019d6:	d001      	beq.n	80019dc <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80019d8:	2301      	movs	r3, #1
 80019da:	e032      	b.n	8001a42 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	f003 0304 	and.w	r3, r3, #4
 80019e4:	2b00      	cmp	r3, #0
 80019e6:	d008      	beq.n	80019fa <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80019e8:	4b19      	ldr	r3, [pc, #100]	; (8001a50 <HAL_RCC_ClockConfig+0x1c4>)
 80019ea:	685b      	ldr	r3, [r3, #4]
 80019ec:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	68db      	ldr	r3, [r3, #12]
 80019f4:	4916      	ldr	r1, [pc, #88]	; (8001a50 <HAL_RCC_ClockConfig+0x1c4>)
 80019f6:	4313      	orrs	r3, r2
 80019f8:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	f003 0308 	and.w	r3, r3, #8
 8001a02:	2b00      	cmp	r3, #0
 8001a04:	d009      	beq.n	8001a1a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001a06:	4b12      	ldr	r3, [pc, #72]	; (8001a50 <HAL_RCC_ClockConfig+0x1c4>)
 8001a08:	685b      	ldr	r3, [r3, #4]
 8001a0a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	691b      	ldr	r3, [r3, #16]
 8001a12:	00db      	lsls	r3, r3, #3
 8001a14:	490e      	ldr	r1, [pc, #56]	; (8001a50 <HAL_RCC_ClockConfig+0x1c4>)
 8001a16:	4313      	orrs	r3, r2
 8001a18:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001a1a:	f000 f821 	bl	8001a60 <HAL_RCC_GetSysClockFreq>
 8001a1e:	4602      	mov	r2, r0
 8001a20:	4b0b      	ldr	r3, [pc, #44]	; (8001a50 <HAL_RCC_ClockConfig+0x1c4>)
 8001a22:	685b      	ldr	r3, [r3, #4]
 8001a24:	091b      	lsrs	r3, r3, #4
 8001a26:	f003 030f 	and.w	r3, r3, #15
 8001a2a:	490a      	ldr	r1, [pc, #40]	; (8001a54 <HAL_RCC_ClockConfig+0x1c8>)
 8001a2c:	5ccb      	ldrb	r3, [r1, r3]
 8001a2e:	fa22 f303 	lsr.w	r3, r2, r3
 8001a32:	4a09      	ldr	r2, [pc, #36]	; (8001a58 <HAL_RCC_ClockConfig+0x1cc>)
 8001a34:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001a36:	4b09      	ldr	r3, [pc, #36]	; (8001a5c <HAL_RCC_ClockConfig+0x1d0>)
 8001a38:	681b      	ldr	r3, [r3, #0]
 8001a3a:	4618      	mov	r0, r3
 8001a3c:	f7ff f9c6 	bl	8000dcc <HAL_InitTick>

  return HAL_OK;
 8001a40:	2300      	movs	r3, #0
}
 8001a42:	4618      	mov	r0, r3
 8001a44:	3710      	adds	r7, #16
 8001a46:	46bd      	mov	sp, r7
 8001a48:	bd80      	pop	{r7, pc}
 8001a4a:	bf00      	nop
 8001a4c:	40022000 	.word	0x40022000
 8001a50:	40021000 	.word	0x40021000
 8001a54:	08002910 	.word	0x08002910
 8001a58:	20000018 	.word	0x20000018
 8001a5c:	2000001c 	.word	0x2000001c

08001a60 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001a60:	b480      	push	{r7}
 8001a62:	b087      	sub	sp, #28
 8001a64:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001a66:	2300      	movs	r3, #0
 8001a68:	60fb      	str	r3, [r7, #12]
 8001a6a:	2300      	movs	r3, #0
 8001a6c:	60bb      	str	r3, [r7, #8]
 8001a6e:	2300      	movs	r3, #0
 8001a70:	617b      	str	r3, [r7, #20]
 8001a72:	2300      	movs	r3, #0
 8001a74:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8001a76:	2300      	movs	r3, #0
 8001a78:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8001a7a:	4b1e      	ldr	r3, [pc, #120]	; (8001af4 <HAL_RCC_GetSysClockFreq+0x94>)
 8001a7c:	685b      	ldr	r3, [r3, #4]
 8001a7e:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001a80:	68fb      	ldr	r3, [r7, #12]
 8001a82:	f003 030c 	and.w	r3, r3, #12
 8001a86:	2b04      	cmp	r3, #4
 8001a88:	d002      	beq.n	8001a90 <HAL_RCC_GetSysClockFreq+0x30>
 8001a8a:	2b08      	cmp	r3, #8
 8001a8c:	d003      	beq.n	8001a96 <HAL_RCC_GetSysClockFreq+0x36>
 8001a8e:	e027      	b.n	8001ae0 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001a90:	4b19      	ldr	r3, [pc, #100]	; (8001af8 <HAL_RCC_GetSysClockFreq+0x98>)
 8001a92:	613b      	str	r3, [r7, #16]
      break;
 8001a94:	e027      	b.n	8001ae6 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001a96:	68fb      	ldr	r3, [r7, #12]
 8001a98:	0c9b      	lsrs	r3, r3, #18
 8001a9a:	f003 030f 	and.w	r3, r3, #15
 8001a9e:	4a17      	ldr	r2, [pc, #92]	; (8001afc <HAL_RCC_GetSysClockFreq+0x9c>)
 8001aa0:	5cd3      	ldrb	r3, [r2, r3]
 8001aa2:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001aa4:	68fb      	ldr	r3, [r7, #12]
 8001aa6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001aaa:	2b00      	cmp	r3, #0
 8001aac:	d010      	beq.n	8001ad0 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001aae:	4b11      	ldr	r3, [pc, #68]	; (8001af4 <HAL_RCC_GetSysClockFreq+0x94>)
 8001ab0:	685b      	ldr	r3, [r3, #4]
 8001ab2:	0c5b      	lsrs	r3, r3, #17
 8001ab4:	f003 0301 	and.w	r3, r3, #1
 8001ab8:	4a11      	ldr	r2, [pc, #68]	; (8001b00 <HAL_RCC_GetSysClockFreq+0xa0>)
 8001aba:	5cd3      	ldrb	r3, [r2, r3]
 8001abc:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	4a0d      	ldr	r2, [pc, #52]	; (8001af8 <HAL_RCC_GetSysClockFreq+0x98>)
 8001ac2:	fb03 f202 	mul.w	r2, r3, r2
 8001ac6:	68bb      	ldr	r3, [r7, #8]
 8001ac8:	fbb2 f3f3 	udiv	r3, r2, r3
 8001acc:	617b      	str	r3, [r7, #20]
 8001ace:	e004      	b.n	8001ada <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	4a0c      	ldr	r2, [pc, #48]	; (8001b04 <HAL_RCC_GetSysClockFreq+0xa4>)
 8001ad4:	fb02 f303 	mul.w	r3, r2, r3
 8001ad8:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8001ada:	697b      	ldr	r3, [r7, #20]
 8001adc:	613b      	str	r3, [r7, #16]
      break;
 8001ade:	e002      	b.n	8001ae6 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001ae0:	4b09      	ldr	r3, [pc, #36]	; (8001b08 <HAL_RCC_GetSysClockFreq+0xa8>)
 8001ae2:	613b      	str	r3, [r7, #16]
      break;
 8001ae4:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001ae6:	693b      	ldr	r3, [r7, #16]
}
 8001ae8:	4618      	mov	r0, r3
 8001aea:	371c      	adds	r7, #28
 8001aec:	46bd      	mov	sp, r7
 8001aee:	bc80      	pop	{r7}
 8001af0:	4770      	bx	lr
 8001af2:	bf00      	nop
 8001af4:	40021000 	.word	0x40021000
 8001af8:	00f42400 	.word	0x00f42400
 8001afc:	08002920 	.word	0x08002920
 8001b00:	08002930 	.word	0x08002930
 8001b04:	003d0900 	.word	0x003d0900
 8001b08:	007a1200 	.word	0x007a1200

08001b0c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001b0c:	b480      	push	{r7}
 8001b0e:	b085      	sub	sp, #20
 8001b10:	af00      	add	r7, sp, #0
 8001b12:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001b14:	4b0a      	ldr	r3, [pc, #40]	; (8001b40 <RCC_Delay+0x34>)
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	4a0a      	ldr	r2, [pc, #40]	; (8001b44 <RCC_Delay+0x38>)
 8001b1a:	fba2 2303 	umull	r2, r3, r2, r3
 8001b1e:	0a5b      	lsrs	r3, r3, #9
 8001b20:	687a      	ldr	r2, [r7, #4]
 8001b22:	fb02 f303 	mul.w	r3, r2, r3
 8001b26:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001b28:	bf00      	nop
  }
  while (Delay --);
 8001b2a:	68fb      	ldr	r3, [r7, #12]
 8001b2c:	1e5a      	subs	r2, r3, #1
 8001b2e:	60fa      	str	r2, [r7, #12]
 8001b30:	2b00      	cmp	r3, #0
 8001b32:	d1f9      	bne.n	8001b28 <RCC_Delay+0x1c>
}
 8001b34:	bf00      	nop
 8001b36:	bf00      	nop
 8001b38:	3714      	adds	r7, #20
 8001b3a:	46bd      	mov	sp, r7
 8001b3c:	bc80      	pop	{r7}
 8001b3e:	4770      	bx	lr
 8001b40:	20000018 	.word	0x20000018
 8001b44:	10624dd3 	.word	0x10624dd3

08001b48 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001b48:	b580      	push	{r7, lr}
 8001b4a:	b082      	sub	sp, #8
 8001b4c:	af00      	add	r7, sp, #0
 8001b4e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	2b00      	cmp	r3, #0
 8001b54:	d101      	bne.n	8001b5a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001b56:	2301      	movs	r3, #1
 8001b58:	e041      	b.n	8001bde <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001b60:	b2db      	uxtb	r3, r3
 8001b62:	2b00      	cmp	r3, #0
 8001b64:	d106      	bne.n	8001b74 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	2200      	movs	r2, #0
 8001b6a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001b6e:	6878      	ldr	r0, [r7, #4]
 8001b70:	f7ff f830 	bl	8000bd4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	2202      	movs	r2, #2
 8001b78:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	681a      	ldr	r2, [r3, #0]
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	3304      	adds	r3, #4
 8001b84:	4619      	mov	r1, r3
 8001b86:	4610      	mov	r0, r2
 8001b88:	f000 fa9e 	bl	80020c8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	2201      	movs	r2, #1
 8001b90:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	2201      	movs	r2, #1
 8001b98:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	2201      	movs	r2, #1
 8001ba0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	2201      	movs	r2, #1
 8001ba8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	2201      	movs	r2, #1
 8001bb0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	2201      	movs	r2, #1
 8001bb8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	2201      	movs	r2, #1
 8001bc0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	2201      	movs	r2, #1
 8001bc8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	2201      	movs	r2, #1
 8001bd0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	2201      	movs	r2, #1
 8001bd8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001bdc:	2300      	movs	r3, #0
}
 8001bde:	4618      	mov	r0, r3
 8001be0:	3708      	adds	r7, #8
 8001be2:	46bd      	mov	sp, r7
 8001be4:	bd80      	pop	{r7, pc}

08001be6 <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 8001be6:	b580      	push	{r7, lr}
 8001be8:	b082      	sub	sp, #8
 8001bea:	af00      	add	r7, sp, #0
 8001bec:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	2b00      	cmp	r3, #0
 8001bf2:	d101      	bne.n	8001bf8 <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 8001bf4:	2301      	movs	r3, #1
 8001bf6:	e041      	b.n	8001c7c <HAL_TIM_OC_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001bfe:	b2db      	uxtb	r3, r3
 8001c00:	2b00      	cmp	r3, #0
 8001c02:	d106      	bne.n	8001c12 <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	2200      	movs	r2, #0
 8001c08:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 8001c0c:	6878      	ldr	r0, [r7, #4]
 8001c0e:	f000 f839 	bl	8001c84 <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	2202      	movs	r2, #2
 8001c16:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	681a      	ldr	r2, [r3, #0]
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	3304      	adds	r3, #4
 8001c22:	4619      	mov	r1, r3
 8001c24:	4610      	mov	r0, r2
 8001c26:	f000 fa4f 	bl	80020c8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	2201      	movs	r2, #1
 8001c2e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	2201      	movs	r2, #1
 8001c36:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	2201      	movs	r2, #1
 8001c3e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	2201      	movs	r2, #1
 8001c46:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	2201      	movs	r2, #1
 8001c4e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	2201      	movs	r2, #1
 8001c56:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	2201      	movs	r2, #1
 8001c5e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	2201      	movs	r2, #1
 8001c66:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	2201      	movs	r2, #1
 8001c6e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	2201      	movs	r2, #1
 8001c76:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001c7a:	2300      	movs	r3, #0
}
 8001c7c:	4618      	mov	r0, r3
 8001c7e:	3708      	adds	r7, #8
 8001c80:	46bd      	mov	sp, r7
 8001c82:	bd80      	pop	{r7, pc}

08001c84 <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 8001c84:	b480      	push	{r7}
 8001c86:	b083      	sub	sp, #12
 8001c88:	af00      	add	r7, sp, #0
 8001c8a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 8001c8c:	bf00      	nop
 8001c8e:	370c      	adds	r7, #12
 8001c90:	46bd      	mov	sp, r7
 8001c92:	bc80      	pop	{r7}
 8001c94:	4770      	bx	lr

08001c96 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8001c96:	b580      	push	{r7, lr}
 8001c98:	b082      	sub	sp, #8
 8001c9a:	af00      	add	r7, sp, #0
 8001c9c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	2b00      	cmp	r3, #0
 8001ca2:	d101      	bne.n	8001ca8 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8001ca4:	2301      	movs	r3, #1
 8001ca6:	e041      	b.n	8001d2c <HAL_TIM_IC_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001cae:	b2db      	uxtb	r3, r3
 8001cb0:	2b00      	cmp	r3, #0
 8001cb2:	d106      	bne.n	8001cc2 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	2200      	movs	r2, #0
 8001cb8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8001cbc:	6878      	ldr	r0, [r7, #4]
 8001cbe:	f000 f839 	bl	8001d34 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	2202      	movs	r2, #2
 8001cc6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	681a      	ldr	r2, [r3, #0]
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	3304      	adds	r3, #4
 8001cd2:	4619      	mov	r1, r3
 8001cd4:	4610      	mov	r0, r2
 8001cd6:	f000 f9f7 	bl	80020c8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	2201      	movs	r2, #1
 8001cde:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	2201      	movs	r2, #1
 8001ce6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	2201      	movs	r2, #1
 8001cee:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	2201      	movs	r2, #1
 8001cf6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	2201      	movs	r2, #1
 8001cfe:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	2201      	movs	r2, #1
 8001d06:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	2201      	movs	r2, #1
 8001d0e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	2201      	movs	r2, #1
 8001d16:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	2201      	movs	r2, #1
 8001d1e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	2201      	movs	r2, #1
 8001d26:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001d2a:	2300      	movs	r3, #0
}
 8001d2c:	4618      	mov	r0, r3
 8001d2e:	3708      	adds	r7, #8
 8001d30:	46bd      	mov	sp, r7
 8001d32:	bd80      	pop	{r7, pc}

08001d34 <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 8001d34:	b480      	push	{r7}
 8001d36:	b083      	sub	sp, #12
 8001d38:	af00      	add	r7, sp, #0
 8001d3a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 8001d3c:	bf00      	nop
 8001d3e:	370c      	adds	r7, #12
 8001d40:	46bd      	mov	sp, r7
 8001d42:	bc80      	pop	{r7}
 8001d44:	4770      	bx	lr
	...

08001d48 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           const TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 8001d48:	b580      	push	{r7, lr}
 8001d4a:	b086      	sub	sp, #24
 8001d4c:	af00      	add	r7, sp, #0
 8001d4e:	60f8      	str	r0, [r7, #12]
 8001d50:	60b9      	str	r1, [r7, #8]
 8001d52:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001d54:	2300      	movs	r3, #0
 8001d56:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 8001d58:	68fb      	ldr	r3, [r7, #12]
 8001d5a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001d5e:	2b01      	cmp	r3, #1
 8001d60:	d101      	bne.n	8001d66 <HAL_TIM_OC_ConfigChannel+0x1e>
 8001d62:	2302      	movs	r3, #2
 8001d64:	e048      	b.n	8001df8 <HAL_TIM_OC_ConfigChannel+0xb0>
 8001d66:	68fb      	ldr	r3, [r7, #12]
 8001d68:	2201      	movs	r2, #1
 8001d6a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	2b0c      	cmp	r3, #12
 8001d72:	d839      	bhi.n	8001de8 <HAL_TIM_OC_ConfigChannel+0xa0>
 8001d74:	a201      	add	r2, pc, #4	; (adr r2, 8001d7c <HAL_TIM_OC_ConfigChannel+0x34>)
 8001d76:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001d7a:	bf00      	nop
 8001d7c:	08001db1 	.word	0x08001db1
 8001d80:	08001de9 	.word	0x08001de9
 8001d84:	08001de9 	.word	0x08001de9
 8001d88:	08001de9 	.word	0x08001de9
 8001d8c:	08001dbf 	.word	0x08001dbf
 8001d90:	08001de9 	.word	0x08001de9
 8001d94:	08001de9 	.word	0x08001de9
 8001d98:	08001de9 	.word	0x08001de9
 8001d9c:	08001dcd 	.word	0x08001dcd
 8001da0:	08001de9 	.word	0x08001de9
 8001da4:	08001de9 	.word	0x08001de9
 8001da8:	08001de9 	.word	0x08001de9
 8001dac:	08001ddb 	.word	0x08001ddb
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8001db0:	68fb      	ldr	r3, [r7, #12]
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	68b9      	ldr	r1, [r7, #8]
 8001db6:	4618      	mov	r0, r3
 8001db8:	f000 f9e8 	bl	800218c <TIM_OC1_SetConfig>
      break;
 8001dbc:	e017      	b.n	8001dee <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8001dbe:	68fb      	ldr	r3, [r7, #12]
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	68b9      	ldr	r1, [r7, #8]
 8001dc4:	4618      	mov	r0, r3
 8001dc6:	f000 fa47 	bl	8002258 <TIM_OC2_SetConfig>
      break;
 8001dca:	e010      	b.n	8001dee <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8001dcc:	68fb      	ldr	r3, [r7, #12]
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	68b9      	ldr	r1, [r7, #8]
 8001dd2:	4618      	mov	r0, r3
 8001dd4:	f000 faaa 	bl	800232c <TIM_OC3_SetConfig>
      break;
 8001dd8:	e009      	b.n	8001dee <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8001dda:	68fb      	ldr	r3, [r7, #12]
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	68b9      	ldr	r1, [r7, #8]
 8001de0:	4618      	mov	r0, r3
 8001de2:	f000 fb0d 	bl	8002400 <TIM_OC4_SetConfig>
      break;
 8001de6:	e002      	b.n	8001dee <HAL_TIM_OC_ConfigChannel+0xa6>
    }

    default:
      status = HAL_ERROR;
 8001de8:	2301      	movs	r3, #1
 8001dea:	75fb      	strb	r3, [r7, #23]
      break;
 8001dec:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8001dee:	68fb      	ldr	r3, [r7, #12]
 8001df0:	2200      	movs	r2, #0
 8001df2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8001df6:	7dfb      	ldrb	r3, [r7, #23]
}
 8001df8:	4618      	mov	r0, r3
 8001dfa:	3718      	adds	r7, #24
 8001dfc:	46bd      	mov	sp, r7
 8001dfe:	bd80      	pop	{r7, pc}

08001e00 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, const TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8001e00:	b580      	push	{r7, lr}
 8001e02:	b086      	sub	sp, #24
 8001e04:	af00      	add	r7, sp, #0
 8001e06:	60f8      	str	r0, [r7, #12]
 8001e08:	60b9      	str	r1, [r7, #8]
 8001e0a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001e0c:	2300      	movs	r3, #0
 8001e0e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8001e10:	68fb      	ldr	r3, [r7, #12]
 8001e12:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001e16:	2b01      	cmp	r3, #1
 8001e18:	d101      	bne.n	8001e1e <HAL_TIM_IC_ConfigChannel+0x1e>
 8001e1a:	2302      	movs	r3, #2
 8001e1c:	e088      	b.n	8001f30 <HAL_TIM_IC_ConfigChannel+0x130>
 8001e1e:	68fb      	ldr	r3, [r7, #12]
 8001e20:	2201      	movs	r2, #1
 8001e22:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	2b00      	cmp	r3, #0
 8001e2a:	d11b      	bne.n	8001e64 <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8001e2c:	68fb      	ldr	r3, [r7, #12]
 8001e2e:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8001e30:	68bb      	ldr	r3, [r7, #8]
 8001e32:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8001e34:	68bb      	ldr	r3, [r7, #8]
 8001e36:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8001e38:	68bb      	ldr	r3, [r7, #8]
 8001e3a:	68db      	ldr	r3, [r3, #12]
    TIM_TI1_SetConfig(htim->Instance,
 8001e3c:	f000 fb2e 	bl	800249c <TIM_TI1_SetConfig>

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8001e40:	68fb      	ldr	r3, [r7, #12]
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	699a      	ldr	r2, [r3, #24]
 8001e46:	68fb      	ldr	r3, [r7, #12]
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	f022 020c 	bic.w	r2, r2, #12
 8001e4e:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8001e50:	68fb      	ldr	r3, [r7, #12]
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	6999      	ldr	r1, [r3, #24]
 8001e56:	68bb      	ldr	r3, [r7, #8]
 8001e58:	689a      	ldr	r2, [r3, #8]
 8001e5a:	68fb      	ldr	r3, [r7, #12]
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	430a      	orrs	r2, r1
 8001e60:	619a      	str	r2, [r3, #24]
 8001e62:	e060      	b.n	8001f26 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	2b04      	cmp	r3, #4
 8001e68:	d11c      	bne.n	8001ea4 <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8001e6a:	68fb      	ldr	r3, [r7, #12]
 8001e6c:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8001e6e:	68bb      	ldr	r3, [r7, #8]
 8001e70:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8001e72:	68bb      	ldr	r3, [r7, #8]
 8001e74:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8001e76:	68bb      	ldr	r3, [r7, #8]
 8001e78:	68db      	ldr	r3, [r3, #12]
    TIM_TI2_SetConfig(htim->Instance,
 8001e7a:	f000 fb97 	bl	80025ac <TIM_TI2_SetConfig>

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8001e7e:	68fb      	ldr	r3, [r7, #12]
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	699a      	ldr	r2, [r3, #24]
 8001e84:	68fb      	ldr	r3, [r7, #12]
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8001e8c:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8001e8e:	68fb      	ldr	r3, [r7, #12]
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	6999      	ldr	r1, [r3, #24]
 8001e94:	68bb      	ldr	r3, [r7, #8]
 8001e96:	689b      	ldr	r3, [r3, #8]
 8001e98:	021a      	lsls	r2, r3, #8
 8001e9a:	68fb      	ldr	r3, [r7, #12]
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	430a      	orrs	r2, r1
 8001ea0:	619a      	str	r2, [r3, #24]
 8001ea2:	e040      	b.n	8001f26 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	2b08      	cmp	r3, #8
 8001ea8:	d11b      	bne.n	8001ee2 <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8001eaa:	68fb      	ldr	r3, [r7, #12]
 8001eac:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8001eae:	68bb      	ldr	r3, [r7, #8]
 8001eb0:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8001eb2:	68bb      	ldr	r3, [r7, #8]
 8001eb4:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8001eb6:	68bb      	ldr	r3, [r7, #8]
 8001eb8:	68db      	ldr	r3, [r3, #12]
    TIM_TI3_SetConfig(htim->Instance,
 8001eba:	f000 fbe2 	bl	8002682 <TIM_TI3_SetConfig>

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8001ebe:	68fb      	ldr	r3, [r7, #12]
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	69da      	ldr	r2, [r3, #28]
 8001ec4:	68fb      	ldr	r3, [r7, #12]
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	f022 020c 	bic.w	r2, r2, #12
 8001ecc:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8001ece:	68fb      	ldr	r3, [r7, #12]
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	69d9      	ldr	r1, [r3, #28]
 8001ed4:	68bb      	ldr	r3, [r7, #8]
 8001ed6:	689a      	ldr	r2, [r3, #8]
 8001ed8:	68fb      	ldr	r3, [r7, #12]
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	430a      	orrs	r2, r1
 8001ede:	61da      	str	r2, [r3, #28]
 8001ee0:	e021      	b.n	8001f26 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	2b0c      	cmp	r3, #12
 8001ee6:	d11c      	bne.n	8001f22 <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8001ee8:	68fb      	ldr	r3, [r7, #12]
 8001eea:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8001eec:	68bb      	ldr	r3, [r7, #8]
 8001eee:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8001ef0:	68bb      	ldr	r3, [r7, #8]
 8001ef2:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8001ef4:	68bb      	ldr	r3, [r7, #8]
 8001ef6:	68db      	ldr	r3, [r3, #12]
    TIM_TI4_SetConfig(htim->Instance,
 8001ef8:	f000 fbfe 	bl	80026f8 <TIM_TI4_SetConfig>

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8001efc:	68fb      	ldr	r3, [r7, #12]
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	69da      	ldr	r2, [r3, #28]
 8001f02:	68fb      	ldr	r3, [r7, #12]
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8001f0a:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8001f0c:	68fb      	ldr	r3, [r7, #12]
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	69d9      	ldr	r1, [r3, #28]
 8001f12:	68bb      	ldr	r3, [r7, #8]
 8001f14:	689b      	ldr	r3, [r3, #8]
 8001f16:	021a      	lsls	r2, r3, #8
 8001f18:	68fb      	ldr	r3, [r7, #12]
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	430a      	orrs	r2, r1
 8001f1e:	61da      	str	r2, [r3, #28]
 8001f20:	e001      	b.n	8001f26 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 8001f22:	2301      	movs	r3, #1
 8001f24:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 8001f26:	68fb      	ldr	r3, [r7, #12]
 8001f28:	2200      	movs	r2, #0
 8001f2a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8001f2e:	7dfb      	ldrb	r3, [r7, #23]
}
 8001f30:	4618      	mov	r0, r3
 8001f32:	3718      	adds	r7, #24
 8001f34:	46bd      	mov	sp, r7
 8001f36:	bd80      	pop	{r7, pc}

08001f38 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8001f38:	b580      	push	{r7, lr}
 8001f3a:	b084      	sub	sp, #16
 8001f3c:	af00      	add	r7, sp, #0
 8001f3e:	6078      	str	r0, [r7, #4]
 8001f40:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001f42:	2300      	movs	r3, #0
 8001f44:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001f4c:	2b01      	cmp	r3, #1
 8001f4e:	d101      	bne.n	8001f54 <HAL_TIM_ConfigClockSource+0x1c>
 8001f50:	2302      	movs	r3, #2
 8001f52:	e0b4      	b.n	80020be <HAL_TIM_ConfigClockSource+0x186>
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	2201      	movs	r2, #1
 8001f58:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	2202      	movs	r2, #2
 8001f60:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	689b      	ldr	r3, [r3, #8]
 8001f6a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8001f6c:	68bb      	ldr	r3, [r7, #8]
 8001f6e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8001f72:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8001f74:	68bb      	ldr	r3, [r7, #8]
 8001f76:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8001f7a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	68ba      	ldr	r2, [r7, #8]
 8001f82:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8001f84:	683b      	ldr	r3, [r7, #0]
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001f8c:	d03e      	beq.n	800200c <HAL_TIM_ConfigClockSource+0xd4>
 8001f8e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001f92:	f200 8087 	bhi.w	80020a4 <HAL_TIM_ConfigClockSource+0x16c>
 8001f96:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001f9a:	f000 8086 	beq.w	80020aa <HAL_TIM_ConfigClockSource+0x172>
 8001f9e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001fa2:	d87f      	bhi.n	80020a4 <HAL_TIM_ConfigClockSource+0x16c>
 8001fa4:	2b70      	cmp	r3, #112	; 0x70
 8001fa6:	d01a      	beq.n	8001fde <HAL_TIM_ConfigClockSource+0xa6>
 8001fa8:	2b70      	cmp	r3, #112	; 0x70
 8001faa:	d87b      	bhi.n	80020a4 <HAL_TIM_ConfigClockSource+0x16c>
 8001fac:	2b60      	cmp	r3, #96	; 0x60
 8001fae:	d050      	beq.n	8002052 <HAL_TIM_ConfigClockSource+0x11a>
 8001fb0:	2b60      	cmp	r3, #96	; 0x60
 8001fb2:	d877      	bhi.n	80020a4 <HAL_TIM_ConfigClockSource+0x16c>
 8001fb4:	2b50      	cmp	r3, #80	; 0x50
 8001fb6:	d03c      	beq.n	8002032 <HAL_TIM_ConfigClockSource+0xfa>
 8001fb8:	2b50      	cmp	r3, #80	; 0x50
 8001fba:	d873      	bhi.n	80020a4 <HAL_TIM_ConfigClockSource+0x16c>
 8001fbc:	2b40      	cmp	r3, #64	; 0x40
 8001fbe:	d058      	beq.n	8002072 <HAL_TIM_ConfigClockSource+0x13a>
 8001fc0:	2b40      	cmp	r3, #64	; 0x40
 8001fc2:	d86f      	bhi.n	80020a4 <HAL_TIM_ConfigClockSource+0x16c>
 8001fc4:	2b30      	cmp	r3, #48	; 0x30
 8001fc6:	d064      	beq.n	8002092 <HAL_TIM_ConfigClockSource+0x15a>
 8001fc8:	2b30      	cmp	r3, #48	; 0x30
 8001fca:	d86b      	bhi.n	80020a4 <HAL_TIM_ConfigClockSource+0x16c>
 8001fcc:	2b20      	cmp	r3, #32
 8001fce:	d060      	beq.n	8002092 <HAL_TIM_ConfigClockSource+0x15a>
 8001fd0:	2b20      	cmp	r3, #32
 8001fd2:	d867      	bhi.n	80020a4 <HAL_TIM_ConfigClockSource+0x16c>
 8001fd4:	2b00      	cmp	r3, #0
 8001fd6:	d05c      	beq.n	8002092 <HAL_TIM_ConfigClockSource+0x15a>
 8001fd8:	2b10      	cmp	r3, #16
 8001fda:	d05a      	beq.n	8002092 <HAL_TIM_ConfigClockSource+0x15a>
 8001fdc:	e062      	b.n	80020a4 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8001fe2:	683b      	ldr	r3, [r7, #0]
 8001fe4:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8001fe6:	683b      	ldr	r3, [r7, #0]
 8001fe8:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8001fea:	683b      	ldr	r3, [r7, #0]
 8001fec:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8001fee:	f000 fbd9 	bl	80027a4 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	689b      	ldr	r3, [r3, #8]
 8001ff8:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8001ffa:	68bb      	ldr	r3, [r7, #8]
 8001ffc:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8002000:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	68ba      	ldr	r2, [r7, #8]
 8002008:	609a      	str	r2, [r3, #8]
      break;
 800200a:	e04f      	b.n	80020ac <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8002010:	683b      	ldr	r3, [r7, #0]
 8002012:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8002014:	683b      	ldr	r3, [r7, #0]
 8002016:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8002018:	683b      	ldr	r3, [r7, #0]
 800201a:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800201c:	f000 fbc2 	bl	80027a4 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	689a      	ldr	r2, [r3, #8]
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800202e:	609a      	str	r2, [r3, #8]
      break;
 8002030:	e03c      	b.n	80020ac <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002036:	683b      	ldr	r3, [r7, #0]
 8002038:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800203a:	683b      	ldr	r3, [r7, #0]
 800203c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800203e:	461a      	mov	r2, r3
 8002040:	f000 fa86 	bl	8002550 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	2150      	movs	r1, #80	; 0x50
 800204a:	4618      	mov	r0, r3
 800204c:	f000 fb90 	bl	8002770 <TIM_ITRx_SetConfig>
      break;
 8002050:	e02c      	b.n	80020ac <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002056:	683b      	ldr	r3, [r7, #0]
 8002058:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800205a:	683b      	ldr	r3, [r7, #0]
 800205c:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800205e:	461a      	mov	r2, r3
 8002060:	f000 fae0 	bl	8002624 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	2160      	movs	r1, #96	; 0x60
 800206a:	4618      	mov	r0, r3
 800206c:	f000 fb80 	bl	8002770 <TIM_ITRx_SetConfig>
      break;
 8002070:	e01c      	b.n	80020ac <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002076:	683b      	ldr	r3, [r7, #0]
 8002078:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800207a:	683b      	ldr	r3, [r7, #0]
 800207c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800207e:	461a      	mov	r2, r3
 8002080:	f000 fa66 	bl	8002550 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	2140      	movs	r1, #64	; 0x40
 800208a:	4618      	mov	r0, r3
 800208c:	f000 fb70 	bl	8002770 <TIM_ITRx_SetConfig>
      break;
 8002090:	e00c      	b.n	80020ac <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	681a      	ldr	r2, [r3, #0]
 8002096:	683b      	ldr	r3, [r7, #0]
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	4619      	mov	r1, r3
 800209c:	4610      	mov	r0, r2
 800209e:	f000 fb67 	bl	8002770 <TIM_ITRx_SetConfig>
      break;
 80020a2:	e003      	b.n	80020ac <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80020a4:	2301      	movs	r3, #1
 80020a6:	73fb      	strb	r3, [r7, #15]
      break;
 80020a8:	e000      	b.n	80020ac <HAL_TIM_ConfigClockSource+0x174>
      break;
 80020aa:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	2201      	movs	r2, #1
 80020b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	2200      	movs	r2, #0
 80020b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80020bc:	7bfb      	ldrb	r3, [r7, #15]
}
 80020be:	4618      	mov	r0, r3
 80020c0:	3710      	adds	r7, #16
 80020c2:	46bd      	mov	sp, r7
 80020c4:	bd80      	pop	{r7, pc}
	...

080020c8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80020c8:	b480      	push	{r7}
 80020ca:	b085      	sub	sp, #20
 80020cc:	af00      	add	r7, sp, #0
 80020ce:	6078      	str	r0, [r7, #4]
 80020d0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	4a29      	ldr	r2, [pc, #164]	; (8002180 <TIM_Base_SetConfig+0xb8>)
 80020dc:	4293      	cmp	r3, r2
 80020de:	d00b      	beq.n	80020f8 <TIM_Base_SetConfig+0x30>
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80020e6:	d007      	beq.n	80020f8 <TIM_Base_SetConfig+0x30>
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	4a26      	ldr	r2, [pc, #152]	; (8002184 <TIM_Base_SetConfig+0xbc>)
 80020ec:	4293      	cmp	r3, r2
 80020ee:	d003      	beq.n	80020f8 <TIM_Base_SetConfig+0x30>
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	4a25      	ldr	r2, [pc, #148]	; (8002188 <TIM_Base_SetConfig+0xc0>)
 80020f4:	4293      	cmp	r3, r2
 80020f6:	d108      	bne.n	800210a <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80020f8:	68fb      	ldr	r3, [r7, #12]
 80020fa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80020fe:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002100:	683b      	ldr	r3, [r7, #0]
 8002102:	685b      	ldr	r3, [r3, #4]
 8002104:	68fa      	ldr	r2, [r7, #12]
 8002106:	4313      	orrs	r3, r2
 8002108:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	4a1c      	ldr	r2, [pc, #112]	; (8002180 <TIM_Base_SetConfig+0xb8>)
 800210e:	4293      	cmp	r3, r2
 8002110:	d00b      	beq.n	800212a <TIM_Base_SetConfig+0x62>
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002118:	d007      	beq.n	800212a <TIM_Base_SetConfig+0x62>
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	4a19      	ldr	r2, [pc, #100]	; (8002184 <TIM_Base_SetConfig+0xbc>)
 800211e:	4293      	cmp	r3, r2
 8002120:	d003      	beq.n	800212a <TIM_Base_SetConfig+0x62>
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	4a18      	ldr	r2, [pc, #96]	; (8002188 <TIM_Base_SetConfig+0xc0>)
 8002126:	4293      	cmp	r3, r2
 8002128:	d108      	bne.n	800213c <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800212a:	68fb      	ldr	r3, [r7, #12]
 800212c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002130:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002132:	683b      	ldr	r3, [r7, #0]
 8002134:	68db      	ldr	r3, [r3, #12]
 8002136:	68fa      	ldr	r2, [r7, #12]
 8002138:	4313      	orrs	r3, r2
 800213a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800213c:	68fb      	ldr	r3, [r7, #12]
 800213e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002142:	683b      	ldr	r3, [r7, #0]
 8002144:	695b      	ldr	r3, [r3, #20]
 8002146:	4313      	orrs	r3, r2
 8002148:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	68fa      	ldr	r2, [r7, #12]
 800214e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002150:	683b      	ldr	r3, [r7, #0]
 8002152:	689a      	ldr	r2, [r3, #8]
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002158:	683b      	ldr	r3, [r7, #0]
 800215a:	681a      	ldr	r2, [r3, #0]
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	4a07      	ldr	r2, [pc, #28]	; (8002180 <TIM_Base_SetConfig+0xb8>)
 8002164:	4293      	cmp	r3, r2
 8002166:	d103      	bne.n	8002170 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002168:	683b      	ldr	r3, [r7, #0]
 800216a:	691a      	ldr	r2, [r3, #16]
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	2201      	movs	r2, #1
 8002174:	615a      	str	r2, [r3, #20]
}
 8002176:	bf00      	nop
 8002178:	3714      	adds	r7, #20
 800217a:	46bd      	mov	sp, r7
 800217c:	bc80      	pop	{r7}
 800217e:	4770      	bx	lr
 8002180:	40012c00 	.word	0x40012c00
 8002184:	40000400 	.word	0x40000400
 8002188:	40000800 	.word	0x40000800

0800218c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800218c:	b480      	push	{r7}
 800218e:	b087      	sub	sp, #28
 8002190:	af00      	add	r7, sp, #0
 8002192:	6078      	str	r0, [r7, #4]
 8002194:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	6a1b      	ldr	r3, [r3, #32]
 800219a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	6a1b      	ldr	r3, [r3, #32]
 80021a0:	f023 0201 	bic.w	r2, r3, #1
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	685b      	ldr	r3, [r3, #4]
 80021ac:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	699b      	ldr	r3, [r3, #24]
 80021b2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80021b4:	68fb      	ldr	r3, [r7, #12]
 80021b6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80021ba:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80021bc:	68fb      	ldr	r3, [r7, #12]
 80021be:	f023 0303 	bic.w	r3, r3, #3
 80021c2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80021c4:	683b      	ldr	r3, [r7, #0]
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	68fa      	ldr	r2, [r7, #12]
 80021ca:	4313      	orrs	r3, r2
 80021cc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80021ce:	697b      	ldr	r3, [r7, #20]
 80021d0:	f023 0302 	bic.w	r3, r3, #2
 80021d4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80021d6:	683b      	ldr	r3, [r7, #0]
 80021d8:	689b      	ldr	r3, [r3, #8]
 80021da:	697a      	ldr	r2, [r7, #20]
 80021dc:	4313      	orrs	r3, r2
 80021de:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	4a1c      	ldr	r2, [pc, #112]	; (8002254 <TIM_OC1_SetConfig+0xc8>)
 80021e4:	4293      	cmp	r3, r2
 80021e6:	d10c      	bne.n	8002202 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80021e8:	697b      	ldr	r3, [r7, #20]
 80021ea:	f023 0308 	bic.w	r3, r3, #8
 80021ee:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80021f0:	683b      	ldr	r3, [r7, #0]
 80021f2:	68db      	ldr	r3, [r3, #12]
 80021f4:	697a      	ldr	r2, [r7, #20]
 80021f6:	4313      	orrs	r3, r2
 80021f8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80021fa:	697b      	ldr	r3, [r7, #20]
 80021fc:	f023 0304 	bic.w	r3, r3, #4
 8002200:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	4a13      	ldr	r2, [pc, #76]	; (8002254 <TIM_OC1_SetConfig+0xc8>)
 8002206:	4293      	cmp	r3, r2
 8002208:	d111      	bne.n	800222e <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800220a:	693b      	ldr	r3, [r7, #16]
 800220c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002210:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8002212:	693b      	ldr	r3, [r7, #16]
 8002214:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002218:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800221a:	683b      	ldr	r3, [r7, #0]
 800221c:	695b      	ldr	r3, [r3, #20]
 800221e:	693a      	ldr	r2, [r7, #16]
 8002220:	4313      	orrs	r3, r2
 8002222:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8002224:	683b      	ldr	r3, [r7, #0]
 8002226:	699b      	ldr	r3, [r3, #24]
 8002228:	693a      	ldr	r2, [r7, #16]
 800222a:	4313      	orrs	r3, r2
 800222c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	693a      	ldr	r2, [r7, #16]
 8002232:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	68fa      	ldr	r2, [r7, #12]
 8002238:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800223a:	683b      	ldr	r3, [r7, #0]
 800223c:	685a      	ldr	r2, [r3, #4]
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	697a      	ldr	r2, [r7, #20]
 8002246:	621a      	str	r2, [r3, #32]
}
 8002248:	bf00      	nop
 800224a:	371c      	adds	r7, #28
 800224c:	46bd      	mov	sp, r7
 800224e:	bc80      	pop	{r7}
 8002250:	4770      	bx	lr
 8002252:	bf00      	nop
 8002254:	40012c00 	.word	0x40012c00

08002258 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002258:	b480      	push	{r7}
 800225a:	b087      	sub	sp, #28
 800225c:	af00      	add	r7, sp, #0
 800225e:	6078      	str	r0, [r7, #4]
 8002260:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	6a1b      	ldr	r3, [r3, #32]
 8002266:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	6a1b      	ldr	r3, [r3, #32]
 800226c:	f023 0210 	bic.w	r2, r3, #16
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	685b      	ldr	r3, [r3, #4]
 8002278:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	699b      	ldr	r3, [r3, #24]
 800227e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8002280:	68fb      	ldr	r3, [r7, #12]
 8002282:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002286:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8002288:	68fb      	ldr	r3, [r7, #12]
 800228a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800228e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002290:	683b      	ldr	r3, [r7, #0]
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	021b      	lsls	r3, r3, #8
 8002296:	68fa      	ldr	r2, [r7, #12]
 8002298:	4313      	orrs	r3, r2
 800229a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800229c:	697b      	ldr	r3, [r7, #20]
 800229e:	f023 0320 	bic.w	r3, r3, #32
 80022a2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80022a4:	683b      	ldr	r3, [r7, #0]
 80022a6:	689b      	ldr	r3, [r3, #8]
 80022a8:	011b      	lsls	r3, r3, #4
 80022aa:	697a      	ldr	r2, [r7, #20]
 80022ac:	4313      	orrs	r3, r2
 80022ae:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	4a1d      	ldr	r2, [pc, #116]	; (8002328 <TIM_OC2_SetConfig+0xd0>)
 80022b4:	4293      	cmp	r3, r2
 80022b6:	d10d      	bne.n	80022d4 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80022b8:	697b      	ldr	r3, [r7, #20]
 80022ba:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80022be:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80022c0:	683b      	ldr	r3, [r7, #0]
 80022c2:	68db      	ldr	r3, [r3, #12]
 80022c4:	011b      	lsls	r3, r3, #4
 80022c6:	697a      	ldr	r2, [r7, #20]
 80022c8:	4313      	orrs	r3, r2
 80022ca:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80022cc:	697b      	ldr	r3, [r7, #20]
 80022ce:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80022d2:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	4a14      	ldr	r2, [pc, #80]	; (8002328 <TIM_OC2_SetConfig+0xd0>)
 80022d8:	4293      	cmp	r3, r2
 80022da:	d113      	bne.n	8002304 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80022dc:	693b      	ldr	r3, [r7, #16]
 80022de:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80022e2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80022e4:	693b      	ldr	r3, [r7, #16]
 80022e6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80022ea:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80022ec:	683b      	ldr	r3, [r7, #0]
 80022ee:	695b      	ldr	r3, [r3, #20]
 80022f0:	009b      	lsls	r3, r3, #2
 80022f2:	693a      	ldr	r2, [r7, #16]
 80022f4:	4313      	orrs	r3, r2
 80022f6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80022f8:	683b      	ldr	r3, [r7, #0]
 80022fa:	699b      	ldr	r3, [r3, #24]
 80022fc:	009b      	lsls	r3, r3, #2
 80022fe:	693a      	ldr	r2, [r7, #16]
 8002300:	4313      	orrs	r3, r2
 8002302:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	693a      	ldr	r2, [r7, #16]
 8002308:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	68fa      	ldr	r2, [r7, #12]
 800230e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8002310:	683b      	ldr	r3, [r7, #0]
 8002312:	685a      	ldr	r2, [r3, #4]
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	697a      	ldr	r2, [r7, #20]
 800231c:	621a      	str	r2, [r3, #32]
}
 800231e:	bf00      	nop
 8002320:	371c      	adds	r7, #28
 8002322:	46bd      	mov	sp, r7
 8002324:	bc80      	pop	{r7}
 8002326:	4770      	bx	lr
 8002328:	40012c00 	.word	0x40012c00

0800232c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800232c:	b480      	push	{r7}
 800232e:	b087      	sub	sp, #28
 8002330:	af00      	add	r7, sp, #0
 8002332:	6078      	str	r0, [r7, #4]
 8002334:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	6a1b      	ldr	r3, [r3, #32]
 800233a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	6a1b      	ldr	r3, [r3, #32]
 8002340:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	685b      	ldr	r3, [r3, #4]
 800234c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	69db      	ldr	r3, [r3, #28]
 8002352:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8002354:	68fb      	ldr	r3, [r7, #12]
 8002356:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800235a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800235c:	68fb      	ldr	r3, [r7, #12]
 800235e:	f023 0303 	bic.w	r3, r3, #3
 8002362:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002364:	683b      	ldr	r3, [r7, #0]
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	68fa      	ldr	r2, [r7, #12]
 800236a:	4313      	orrs	r3, r2
 800236c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800236e:	697b      	ldr	r3, [r7, #20]
 8002370:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002374:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8002376:	683b      	ldr	r3, [r7, #0]
 8002378:	689b      	ldr	r3, [r3, #8]
 800237a:	021b      	lsls	r3, r3, #8
 800237c:	697a      	ldr	r2, [r7, #20]
 800237e:	4313      	orrs	r3, r2
 8002380:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	4a1d      	ldr	r2, [pc, #116]	; (80023fc <TIM_OC3_SetConfig+0xd0>)
 8002386:	4293      	cmp	r3, r2
 8002388:	d10d      	bne.n	80023a6 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800238a:	697b      	ldr	r3, [r7, #20]
 800238c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002390:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8002392:	683b      	ldr	r3, [r7, #0]
 8002394:	68db      	ldr	r3, [r3, #12]
 8002396:	021b      	lsls	r3, r3, #8
 8002398:	697a      	ldr	r2, [r7, #20]
 800239a:	4313      	orrs	r3, r2
 800239c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800239e:	697b      	ldr	r3, [r7, #20]
 80023a0:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80023a4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	4a14      	ldr	r2, [pc, #80]	; (80023fc <TIM_OC3_SetConfig+0xd0>)
 80023aa:	4293      	cmp	r3, r2
 80023ac:	d113      	bne.n	80023d6 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80023ae:	693b      	ldr	r3, [r7, #16]
 80023b0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80023b4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80023b6:	693b      	ldr	r3, [r7, #16]
 80023b8:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80023bc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80023be:	683b      	ldr	r3, [r7, #0]
 80023c0:	695b      	ldr	r3, [r3, #20]
 80023c2:	011b      	lsls	r3, r3, #4
 80023c4:	693a      	ldr	r2, [r7, #16]
 80023c6:	4313      	orrs	r3, r2
 80023c8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80023ca:	683b      	ldr	r3, [r7, #0]
 80023cc:	699b      	ldr	r3, [r3, #24]
 80023ce:	011b      	lsls	r3, r3, #4
 80023d0:	693a      	ldr	r2, [r7, #16]
 80023d2:	4313      	orrs	r3, r2
 80023d4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	693a      	ldr	r2, [r7, #16]
 80023da:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	68fa      	ldr	r2, [r7, #12]
 80023e0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80023e2:	683b      	ldr	r3, [r7, #0]
 80023e4:	685a      	ldr	r2, [r3, #4]
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	697a      	ldr	r2, [r7, #20]
 80023ee:	621a      	str	r2, [r3, #32]
}
 80023f0:	bf00      	nop
 80023f2:	371c      	adds	r7, #28
 80023f4:	46bd      	mov	sp, r7
 80023f6:	bc80      	pop	{r7}
 80023f8:	4770      	bx	lr
 80023fa:	bf00      	nop
 80023fc:	40012c00 	.word	0x40012c00

08002400 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002400:	b480      	push	{r7}
 8002402:	b087      	sub	sp, #28
 8002404:	af00      	add	r7, sp, #0
 8002406:	6078      	str	r0, [r7, #4]
 8002408:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	6a1b      	ldr	r3, [r3, #32]
 800240e:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	6a1b      	ldr	r3, [r3, #32]
 8002414:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	685b      	ldr	r3, [r3, #4]
 8002420:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	69db      	ldr	r3, [r3, #28]
 8002426:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8002428:	68fb      	ldr	r3, [r7, #12]
 800242a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800242e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8002430:	68fb      	ldr	r3, [r7, #12]
 8002432:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002436:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002438:	683b      	ldr	r3, [r7, #0]
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	021b      	lsls	r3, r3, #8
 800243e:	68fa      	ldr	r2, [r7, #12]
 8002440:	4313      	orrs	r3, r2
 8002442:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8002444:	693b      	ldr	r3, [r7, #16]
 8002446:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800244a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800244c:	683b      	ldr	r3, [r7, #0]
 800244e:	689b      	ldr	r3, [r3, #8]
 8002450:	031b      	lsls	r3, r3, #12
 8002452:	693a      	ldr	r2, [r7, #16]
 8002454:	4313      	orrs	r3, r2
 8002456:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	4a0f      	ldr	r2, [pc, #60]	; (8002498 <TIM_OC4_SetConfig+0x98>)
 800245c:	4293      	cmp	r3, r2
 800245e:	d109      	bne.n	8002474 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8002460:	697b      	ldr	r3, [r7, #20]
 8002462:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002466:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8002468:	683b      	ldr	r3, [r7, #0]
 800246a:	695b      	ldr	r3, [r3, #20]
 800246c:	019b      	lsls	r3, r3, #6
 800246e:	697a      	ldr	r2, [r7, #20]
 8002470:	4313      	orrs	r3, r2
 8002472:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	697a      	ldr	r2, [r7, #20]
 8002478:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	68fa      	ldr	r2, [r7, #12]
 800247e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8002480:	683b      	ldr	r3, [r7, #0]
 8002482:	685a      	ldr	r2, [r3, #4]
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	693a      	ldr	r2, [r7, #16]
 800248c:	621a      	str	r2, [r3, #32]
}
 800248e:	bf00      	nop
 8002490:	371c      	adds	r7, #28
 8002492:	46bd      	mov	sp, r7
 8002494:	bc80      	pop	{r7}
 8002496:	4770      	bx	lr
 8002498:	40012c00 	.word	0x40012c00

0800249c <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 800249c:	b480      	push	{r7}
 800249e:	b087      	sub	sp, #28
 80024a0:	af00      	add	r7, sp, #0
 80024a2:	60f8      	str	r0, [r7, #12]
 80024a4:	60b9      	str	r1, [r7, #8]
 80024a6:	607a      	str	r2, [r7, #4]
 80024a8:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80024aa:	68fb      	ldr	r3, [r7, #12]
 80024ac:	6a1b      	ldr	r3, [r3, #32]
 80024ae:	613b      	str	r3, [r7, #16]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80024b0:	68fb      	ldr	r3, [r7, #12]
 80024b2:	6a1b      	ldr	r3, [r3, #32]
 80024b4:	f023 0201 	bic.w	r2, r3, #1
 80024b8:	68fb      	ldr	r3, [r7, #12]
 80024ba:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80024bc:	68fb      	ldr	r3, [r7, #12]
 80024be:	699b      	ldr	r3, [r3, #24]
 80024c0:	617b      	str	r3, [r7, #20]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 80024c2:	68fb      	ldr	r3, [r7, #12]
 80024c4:	4a1f      	ldr	r2, [pc, #124]	; (8002544 <TIM_TI1_SetConfig+0xa8>)
 80024c6:	4293      	cmp	r3, r2
 80024c8:	d00b      	beq.n	80024e2 <TIM_TI1_SetConfig+0x46>
 80024ca:	68fb      	ldr	r3, [r7, #12]
 80024cc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80024d0:	d007      	beq.n	80024e2 <TIM_TI1_SetConfig+0x46>
 80024d2:	68fb      	ldr	r3, [r7, #12]
 80024d4:	4a1c      	ldr	r2, [pc, #112]	; (8002548 <TIM_TI1_SetConfig+0xac>)
 80024d6:	4293      	cmp	r3, r2
 80024d8:	d003      	beq.n	80024e2 <TIM_TI1_SetConfig+0x46>
 80024da:	68fb      	ldr	r3, [r7, #12]
 80024dc:	4a1b      	ldr	r2, [pc, #108]	; (800254c <TIM_TI1_SetConfig+0xb0>)
 80024de:	4293      	cmp	r3, r2
 80024e0:	d101      	bne.n	80024e6 <TIM_TI1_SetConfig+0x4a>
 80024e2:	2301      	movs	r3, #1
 80024e4:	e000      	b.n	80024e8 <TIM_TI1_SetConfig+0x4c>
 80024e6:	2300      	movs	r3, #0
 80024e8:	2b00      	cmp	r3, #0
 80024ea:	d008      	beq.n	80024fe <TIM_TI1_SetConfig+0x62>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 80024ec:	697b      	ldr	r3, [r7, #20]
 80024ee:	f023 0303 	bic.w	r3, r3, #3
 80024f2:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 80024f4:	697a      	ldr	r2, [r7, #20]
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	4313      	orrs	r3, r2
 80024fa:	617b      	str	r3, [r7, #20]
 80024fc:	e003      	b.n	8002506 <TIM_TI1_SetConfig+0x6a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 80024fe:	697b      	ldr	r3, [r7, #20]
 8002500:	f043 0301 	orr.w	r3, r3, #1
 8002504:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002506:	697b      	ldr	r3, [r7, #20]
 8002508:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800250c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 800250e:	683b      	ldr	r3, [r7, #0]
 8002510:	011b      	lsls	r3, r3, #4
 8002512:	b2db      	uxtb	r3, r3
 8002514:	697a      	ldr	r2, [r7, #20]
 8002516:	4313      	orrs	r3, r2
 8002518:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800251a:	693b      	ldr	r3, [r7, #16]
 800251c:	f023 030a 	bic.w	r3, r3, #10
 8002520:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8002522:	68bb      	ldr	r3, [r7, #8]
 8002524:	f003 030a 	and.w	r3, r3, #10
 8002528:	693a      	ldr	r2, [r7, #16]
 800252a:	4313      	orrs	r3, r2
 800252c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800252e:	68fb      	ldr	r3, [r7, #12]
 8002530:	697a      	ldr	r2, [r7, #20]
 8002532:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002534:	68fb      	ldr	r3, [r7, #12]
 8002536:	693a      	ldr	r2, [r7, #16]
 8002538:	621a      	str	r2, [r3, #32]
}
 800253a:	bf00      	nop
 800253c:	371c      	adds	r7, #28
 800253e:	46bd      	mov	sp, r7
 8002540:	bc80      	pop	{r7}
 8002542:	4770      	bx	lr
 8002544:	40012c00 	.word	0x40012c00
 8002548:	40000400 	.word	0x40000400
 800254c:	40000800 	.word	0x40000800

08002550 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002550:	b480      	push	{r7}
 8002552:	b087      	sub	sp, #28
 8002554:	af00      	add	r7, sp, #0
 8002556:	60f8      	str	r0, [r7, #12]
 8002558:	60b9      	str	r1, [r7, #8]
 800255a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800255c:	68fb      	ldr	r3, [r7, #12]
 800255e:	6a1b      	ldr	r3, [r3, #32]
 8002560:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002562:	68fb      	ldr	r3, [r7, #12]
 8002564:	6a1b      	ldr	r3, [r3, #32]
 8002566:	f023 0201 	bic.w	r2, r3, #1
 800256a:	68fb      	ldr	r3, [r7, #12]
 800256c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800256e:	68fb      	ldr	r3, [r7, #12]
 8002570:	699b      	ldr	r3, [r3, #24]
 8002572:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002574:	693b      	ldr	r3, [r7, #16]
 8002576:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800257a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	011b      	lsls	r3, r3, #4
 8002580:	693a      	ldr	r2, [r7, #16]
 8002582:	4313      	orrs	r3, r2
 8002584:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002586:	697b      	ldr	r3, [r7, #20]
 8002588:	f023 030a 	bic.w	r3, r3, #10
 800258c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800258e:	697a      	ldr	r2, [r7, #20]
 8002590:	68bb      	ldr	r3, [r7, #8]
 8002592:	4313      	orrs	r3, r2
 8002594:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002596:	68fb      	ldr	r3, [r7, #12]
 8002598:	693a      	ldr	r2, [r7, #16]
 800259a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800259c:	68fb      	ldr	r3, [r7, #12]
 800259e:	697a      	ldr	r2, [r7, #20]
 80025a0:	621a      	str	r2, [r3, #32]
}
 80025a2:	bf00      	nop
 80025a4:	371c      	adds	r7, #28
 80025a6:	46bd      	mov	sp, r7
 80025a8:	bc80      	pop	{r7}
 80025aa:	4770      	bx	lr

080025ac <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80025ac:	b480      	push	{r7}
 80025ae:	b087      	sub	sp, #28
 80025b0:	af00      	add	r7, sp, #0
 80025b2:	60f8      	str	r0, [r7, #12]
 80025b4:	60b9      	str	r1, [r7, #8]
 80025b6:	607a      	str	r2, [r7, #4]
 80025b8:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80025ba:	68fb      	ldr	r3, [r7, #12]
 80025bc:	6a1b      	ldr	r3, [r3, #32]
 80025be:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80025c0:	68fb      	ldr	r3, [r7, #12]
 80025c2:	6a1b      	ldr	r3, [r3, #32]
 80025c4:	f023 0210 	bic.w	r2, r3, #16
 80025c8:	68fb      	ldr	r3, [r7, #12]
 80025ca:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80025cc:	68fb      	ldr	r3, [r7, #12]
 80025ce:	699b      	ldr	r3, [r3, #24]
 80025d0:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 80025d2:	693b      	ldr	r3, [r7, #16]
 80025d4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80025d8:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	021b      	lsls	r3, r3, #8
 80025de:	693a      	ldr	r2, [r7, #16]
 80025e0:	4313      	orrs	r3, r2
 80025e2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80025e4:	693b      	ldr	r3, [r7, #16]
 80025e6:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80025ea:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 80025ec:	683b      	ldr	r3, [r7, #0]
 80025ee:	031b      	lsls	r3, r3, #12
 80025f0:	b29b      	uxth	r3, r3
 80025f2:	693a      	ldr	r2, [r7, #16]
 80025f4:	4313      	orrs	r3, r2
 80025f6:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80025f8:	697b      	ldr	r3, [r7, #20]
 80025fa:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80025fe:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8002600:	68bb      	ldr	r3, [r7, #8]
 8002602:	011b      	lsls	r3, r3, #4
 8002604:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 8002608:	697a      	ldr	r2, [r7, #20]
 800260a:	4313      	orrs	r3, r2
 800260c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800260e:	68fb      	ldr	r3, [r7, #12]
 8002610:	693a      	ldr	r2, [r7, #16]
 8002612:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002614:	68fb      	ldr	r3, [r7, #12]
 8002616:	697a      	ldr	r2, [r7, #20]
 8002618:	621a      	str	r2, [r3, #32]
}
 800261a:	bf00      	nop
 800261c:	371c      	adds	r7, #28
 800261e:	46bd      	mov	sp, r7
 8002620:	bc80      	pop	{r7}
 8002622:	4770      	bx	lr

08002624 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002624:	b480      	push	{r7}
 8002626:	b087      	sub	sp, #28
 8002628:	af00      	add	r7, sp, #0
 800262a:	60f8      	str	r0, [r7, #12]
 800262c:	60b9      	str	r1, [r7, #8]
 800262e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8002630:	68fb      	ldr	r3, [r7, #12]
 8002632:	6a1b      	ldr	r3, [r3, #32]
 8002634:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002636:	68fb      	ldr	r3, [r7, #12]
 8002638:	6a1b      	ldr	r3, [r3, #32]
 800263a:	f023 0210 	bic.w	r2, r3, #16
 800263e:	68fb      	ldr	r3, [r7, #12]
 8002640:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002642:	68fb      	ldr	r3, [r7, #12]
 8002644:	699b      	ldr	r3, [r3, #24]
 8002646:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002648:	693b      	ldr	r3, [r7, #16]
 800264a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800264e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	031b      	lsls	r3, r3, #12
 8002654:	693a      	ldr	r2, [r7, #16]
 8002656:	4313      	orrs	r3, r2
 8002658:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800265a:	697b      	ldr	r3, [r7, #20]
 800265c:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8002660:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002662:	68bb      	ldr	r3, [r7, #8]
 8002664:	011b      	lsls	r3, r3, #4
 8002666:	697a      	ldr	r2, [r7, #20]
 8002668:	4313      	orrs	r3, r2
 800266a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800266c:	68fb      	ldr	r3, [r7, #12]
 800266e:	693a      	ldr	r2, [r7, #16]
 8002670:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002672:	68fb      	ldr	r3, [r7, #12]
 8002674:	697a      	ldr	r2, [r7, #20]
 8002676:	621a      	str	r2, [r3, #32]
}
 8002678:	bf00      	nop
 800267a:	371c      	adds	r7, #28
 800267c:	46bd      	mov	sp, r7
 800267e:	bc80      	pop	{r7}
 8002680:	4770      	bx	lr

08002682 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8002682:	b480      	push	{r7}
 8002684:	b087      	sub	sp, #28
 8002686:	af00      	add	r7, sp, #0
 8002688:	60f8      	str	r0, [r7, #12]
 800268a:	60b9      	str	r1, [r7, #8]
 800268c:	607a      	str	r2, [r7, #4]
 800268e:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  tmpccer = TIMx->CCER;
 8002690:	68fb      	ldr	r3, [r7, #12]
 8002692:	6a1b      	ldr	r3, [r3, #32]
 8002694:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8002696:	68fb      	ldr	r3, [r7, #12]
 8002698:	6a1b      	ldr	r3, [r3, #32]
 800269a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800269e:	68fb      	ldr	r3, [r7, #12]
 80026a0:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 80026a2:	68fb      	ldr	r3, [r7, #12]
 80026a4:	69db      	ldr	r3, [r3, #28]
 80026a6:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 80026a8:	693b      	ldr	r3, [r7, #16]
 80026aa:	f023 0303 	bic.w	r3, r3, #3
 80026ae:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= TIM_ICSelection;
 80026b0:	693a      	ldr	r2, [r7, #16]
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	4313      	orrs	r3, r2
 80026b6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 80026b8:	693b      	ldr	r3, [r7, #16]
 80026ba:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80026be:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 80026c0:	683b      	ldr	r3, [r7, #0]
 80026c2:	011b      	lsls	r3, r3, #4
 80026c4:	b2db      	uxtb	r3, r3
 80026c6:	693a      	ldr	r2, [r7, #16]
 80026c8:	4313      	orrs	r3, r2
 80026ca:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P);
 80026cc:	697b      	ldr	r3, [r7, #20]
 80026ce:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80026d2:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 8U) & TIM_CCER_CC3P);
 80026d4:	68bb      	ldr	r3, [r7, #8]
 80026d6:	021b      	lsls	r3, r3, #8
 80026d8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80026dc:	697a      	ldr	r2, [r7, #20]
 80026de:	4313      	orrs	r3, r2
 80026e0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 80026e2:	68fb      	ldr	r3, [r7, #12]
 80026e4:	693a      	ldr	r2, [r7, #16]
 80026e6:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 80026e8:	68fb      	ldr	r3, [r7, #12]
 80026ea:	697a      	ldr	r2, [r7, #20]
 80026ec:	621a      	str	r2, [r3, #32]
}
 80026ee:	bf00      	nop
 80026f0:	371c      	adds	r7, #28
 80026f2:	46bd      	mov	sp, r7
 80026f4:	bc80      	pop	{r7}
 80026f6:	4770      	bx	lr

080026f8 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80026f8:	b480      	push	{r7}
 80026fa:	b087      	sub	sp, #28
 80026fc:	af00      	add	r7, sp, #0
 80026fe:	60f8      	str	r0, [r7, #12]
 8002700:	60b9      	str	r1, [r7, #8]
 8002702:	607a      	str	r2, [r7, #4]
 8002704:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  tmpccer = TIMx->CCER;
 8002706:	68fb      	ldr	r3, [r7, #12]
 8002708:	6a1b      	ldr	r3, [r3, #32]
 800270a:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800270c:	68fb      	ldr	r3, [r7, #12]
 800270e:	6a1b      	ldr	r3, [r3, #32]
 8002710:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8002714:	68fb      	ldr	r3, [r7, #12]
 8002716:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8002718:	68fb      	ldr	r3, [r7, #12]
 800271a:	69db      	ldr	r3, [r3, #28]
 800271c:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 800271e:	693b      	ldr	r3, [r7, #16]
 8002720:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002724:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	021b      	lsls	r3, r3, #8
 800272a:	693a      	ldr	r2, [r7, #16]
 800272c:	4313      	orrs	r3, r2
 800272e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8002730:	693b      	ldr	r3, [r7, #16]
 8002732:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002736:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8002738:	683b      	ldr	r3, [r7, #0]
 800273a:	031b      	lsls	r3, r3, #12
 800273c:	b29b      	uxth	r3, r3
 800273e:	693a      	ldr	r2, [r7, #16]
 8002740:	4313      	orrs	r3, r2
 8002742:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P);
 8002744:	697b      	ldr	r3, [r7, #20]
 8002746:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800274a:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 12U) & TIM_CCER_CC4P);
 800274c:	68bb      	ldr	r3, [r7, #8]
 800274e:	031b      	lsls	r3, r3, #12
 8002750:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002754:	697a      	ldr	r2, [r7, #20]
 8002756:	4313      	orrs	r3, r2
 8002758:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800275a:	68fb      	ldr	r3, [r7, #12]
 800275c:	693a      	ldr	r2, [r7, #16]
 800275e:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8002760:	68fb      	ldr	r3, [r7, #12]
 8002762:	697a      	ldr	r2, [r7, #20]
 8002764:	621a      	str	r2, [r3, #32]
}
 8002766:	bf00      	nop
 8002768:	371c      	adds	r7, #28
 800276a:	46bd      	mov	sp, r7
 800276c:	bc80      	pop	{r7}
 800276e:	4770      	bx	lr

08002770 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002770:	b480      	push	{r7}
 8002772:	b085      	sub	sp, #20
 8002774:	af00      	add	r7, sp, #0
 8002776:	6078      	str	r0, [r7, #4]
 8002778:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	689b      	ldr	r3, [r3, #8]
 800277e:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002780:	68fb      	ldr	r3, [r7, #12]
 8002782:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002786:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002788:	683a      	ldr	r2, [r7, #0]
 800278a:	68fb      	ldr	r3, [r7, #12]
 800278c:	4313      	orrs	r3, r2
 800278e:	f043 0307 	orr.w	r3, r3, #7
 8002792:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	68fa      	ldr	r2, [r7, #12]
 8002798:	609a      	str	r2, [r3, #8]
}
 800279a:	bf00      	nop
 800279c:	3714      	adds	r7, #20
 800279e:	46bd      	mov	sp, r7
 80027a0:	bc80      	pop	{r7}
 80027a2:	4770      	bx	lr

080027a4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80027a4:	b480      	push	{r7}
 80027a6:	b087      	sub	sp, #28
 80027a8:	af00      	add	r7, sp, #0
 80027aa:	60f8      	str	r0, [r7, #12]
 80027ac:	60b9      	str	r1, [r7, #8]
 80027ae:	607a      	str	r2, [r7, #4]
 80027b0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80027b2:	68fb      	ldr	r3, [r7, #12]
 80027b4:	689b      	ldr	r3, [r3, #8]
 80027b6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80027b8:	697b      	ldr	r3, [r7, #20]
 80027ba:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80027be:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80027c0:	683b      	ldr	r3, [r7, #0]
 80027c2:	021a      	lsls	r2, r3, #8
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	431a      	orrs	r2, r3
 80027c8:	68bb      	ldr	r3, [r7, #8]
 80027ca:	4313      	orrs	r3, r2
 80027cc:	697a      	ldr	r2, [r7, #20]
 80027ce:	4313      	orrs	r3, r2
 80027d0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80027d2:	68fb      	ldr	r3, [r7, #12]
 80027d4:	697a      	ldr	r2, [r7, #20]
 80027d6:	609a      	str	r2, [r3, #8]
}
 80027d8:	bf00      	nop
 80027da:	371c      	adds	r7, #28
 80027dc:	46bd      	mov	sp, r7
 80027de:	bc80      	pop	{r7}
 80027e0:	4770      	bx	lr
	...

080027e4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80027e4:	b480      	push	{r7}
 80027e6:	b085      	sub	sp, #20
 80027e8:	af00      	add	r7, sp, #0
 80027ea:	6078      	str	r0, [r7, #4]
 80027ec:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80027f4:	2b01      	cmp	r3, #1
 80027f6:	d101      	bne.n	80027fc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80027f8:	2302      	movs	r3, #2
 80027fa:	e046      	b.n	800288a <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	2201      	movs	r2, #1
 8002800:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	2202      	movs	r2, #2
 8002808:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	685b      	ldr	r3, [r3, #4]
 8002812:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	689b      	ldr	r3, [r3, #8]
 800281a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800281c:	68fb      	ldr	r3, [r7, #12]
 800281e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002822:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002824:	683b      	ldr	r3, [r7, #0]
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	68fa      	ldr	r2, [r7, #12]
 800282a:	4313      	orrs	r3, r2
 800282c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	68fa      	ldr	r2, [r7, #12]
 8002834:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	4a16      	ldr	r2, [pc, #88]	; (8002894 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 800283c:	4293      	cmp	r3, r2
 800283e:	d00e      	beq.n	800285e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002848:	d009      	beq.n	800285e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	4a12      	ldr	r2, [pc, #72]	; (8002898 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8002850:	4293      	cmp	r3, r2
 8002852:	d004      	beq.n	800285e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	4a10      	ldr	r2, [pc, #64]	; (800289c <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 800285a:	4293      	cmp	r3, r2
 800285c:	d10c      	bne.n	8002878 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800285e:	68bb      	ldr	r3, [r7, #8]
 8002860:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002864:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002866:	683b      	ldr	r3, [r7, #0]
 8002868:	685b      	ldr	r3, [r3, #4]
 800286a:	68ba      	ldr	r2, [r7, #8]
 800286c:	4313      	orrs	r3, r2
 800286e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	68ba      	ldr	r2, [r7, #8]
 8002876:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	2201      	movs	r2, #1
 800287c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	2200      	movs	r2, #0
 8002884:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002888:	2300      	movs	r3, #0
}
 800288a:	4618      	mov	r0, r3
 800288c:	3714      	adds	r7, #20
 800288e:	46bd      	mov	sp, r7
 8002890:	bc80      	pop	{r7}
 8002892:	4770      	bx	lr
 8002894:	40012c00 	.word	0x40012c00
 8002898:	40000400 	.word	0x40000400
 800289c:	40000800 	.word	0x40000800

080028a0 <memset>:
 80028a0:	4603      	mov	r3, r0
 80028a2:	4402      	add	r2, r0
 80028a4:	4293      	cmp	r3, r2
 80028a6:	d100      	bne.n	80028aa <memset+0xa>
 80028a8:	4770      	bx	lr
 80028aa:	f803 1b01 	strb.w	r1, [r3], #1
 80028ae:	e7f9      	b.n	80028a4 <memset+0x4>

080028b0 <__libc_init_array>:
 80028b0:	b570      	push	{r4, r5, r6, lr}
 80028b2:	2600      	movs	r6, #0
 80028b4:	4d0c      	ldr	r5, [pc, #48]	; (80028e8 <__libc_init_array+0x38>)
 80028b6:	4c0d      	ldr	r4, [pc, #52]	; (80028ec <__libc_init_array+0x3c>)
 80028b8:	1b64      	subs	r4, r4, r5
 80028ba:	10a4      	asrs	r4, r4, #2
 80028bc:	42a6      	cmp	r6, r4
 80028be:	d109      	bne.n	80028d4 <__libc_init_array+0x24>
 80028c0:	f000 f81a 	bl	80028f8 <_init>
 80028c4:	2600      	movs	r6, #0
 80028c6:	4d0a      	ldr	r5, [pc, #40]	; (80028f0 <__libc_init_array+0x40>)
 80028c8:	4c0a      	ldr	r4, [pc, #40]	; (80028f4 <__libc_init_array+0x44>)
 80028ca:	1b64      	subs	r4, r4, r5
 80028cc:	10a4      	asrs	r4, r4, #2
 80028ce:	42a6      	cmp	r6, r4
 80028d0:	d105      	bne.n	80028de <__libc_init_array+0x2e>
 80028d2:	bd70      	pop	{r4, r5, r6, pc}
 80028d4:	f855 3b04 	ldr.w	r3, [r5], #4
 80028d8:	4798      	blx	r3
 80028da:	3601      	adds	r6, #1
 80028dc:	e7ee      	b.n	80028bc <__libc_init_array+0xc>
 80028de:	f855 3b04 	ldr.w	r3, [r5], #4
 80028e2:	4798      	blx	r3
 80028e4:	3601      	adds	r6, #1
 80028e6:	e7f2      	b.n	80028ce <__libc_init_array+0x1e>
 80028e8:	08002934 	.word	0x08002934
 80028ec:	08002934 	.word	0x08002934
 80028f0:	08002934 	.word	0x08002934
 80028f4:	08002938 	.word	0x08002938

080028f8 <_init>:
 80028f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80028fa:	bf00      	nop
 80028fc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80028fe:	bc08      	pop	{r3}
 8002900:	469e      	mov	lr, r3
 8002902:	4770      	bx	lr

08002904 <_fini>:
 8002904:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002906:	bf00      	nop
 8002908:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800290a:	bc08      	pop	{r3}
 800290c:	469e      	mov	lr, r3
 800290e:	4770      	bx	lr
